
BLINKY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cb8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007eb8  08007eb8  00017eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f50  08007f50  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007f50  08007f50  00017f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f58  08007f58  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007f58  08007f58  00017f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f60  08007f60  00017f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003198  20000010  08007f74  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200031a8  08007f74  000231a8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c5a  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004636  00000000  00000000  00044ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  000492d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bf8  00000000  00000000  0004b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e0b  00000000  00000000  0004cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f886  00000000  00000000  00053a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00135d52  00000000  00000000  00073301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a9053  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dcc  00000000  00000000  001a90a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08007ea0 	.word	0x08007ea0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08007ea0 	.word	0x08007ea0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b982 	b.w	800055c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000274:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000276:	4604      	mov	r4, r0
 8000278:	460f      	mov	r7, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d148      	bne.n	8000310 <__udivmoddi4+0xa0>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d961      	bls.n	8000348 <__udivmoddi4+0xd8>
 8000284:	fab2 f382 	clz	r3, r2
 8000288:	b143      	cbz	r3, 800029c <__udivmoddi4+0x2c>
 800028a:	f1c3 0120 	rsb	r1, r3, #32
 800028e:	409f      	lsls	r7, r3
 8000290:	fa02 fc03 	lsl.w	ip, r2, r3
 8000294:	409c      	lsls	r4, r3
 8000296:	fa20 f101 	lsr.w	r1, r0, r1
 800029a:	430f      	orrs	r7, r1
 800029c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002a0:	fa1f fe8c 	uxth.w	lr, ip
 80002a4:	0c22      	lsrs	r2, r4, #16
 80002a6:	fbb7 f6f1 	udiv	r6, r7, r1
 80002aa:	fb01 7716 	mls	r7, r1, r6, r7
 80002ae:	fb06 f00e 	mul.w	r0, r6, lr
 80002b2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b6:	4290      	cmp	r0, r2
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0x5c>
 80002ba:	eb1c 0202 	adds.w	r2, ip, r2
 80002be:	f106 37ff 	add.w	r7, r6, #4294967295
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x5a>
 80002c4:	4290      	cmp	r0, r2
 80002c6:	f200 8137 	bhi.w	8000538 <__udivmoddi4+0x2c8>
 80002ca:	463e      	mov	r6, r7
 80002cc:	1a12      	subs	r2, r2, r0
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb2 f0f1 	udiv	r0, r2, r1
 80002d4:	fb01 2210 	mls	r2, r1, r0, r2
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	d908      	bls.n	80002f6 <__udivmoddi4+0x86>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ec:	d202      	bcs.n	80002f4 <__udivmoddi4+0x84>
 80002ee:	45a6      	cmp	lr, r4
 80002f0:	f200 811c 	bhi.w	800052c <__udivmoddi4+0x2bc>
 80002f4:	4610      	mov	r0, r2
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	2600      	movs	r6, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0x9a>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c5 4300 	strd	r4, r3, [r5]
 800030a:	4631      	mov	r1, r6
 800030c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000310:	428b      	cmp	r3, r1
 8000312:	d909      	bls.n	8000328 <__udivmoddi4+0xb8>
 8000314:	2d00      	cmp	r5, #0
 8000316:	f000 80fd 	beq.w	8000514 <__udivmoddi4+0x2a4>
 800031a:	2600      	movs	r6, #0
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	4630      	mov	r0, r6
 8000322:	4631      	mov	r1, r6
 8000324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000328:	fab3 f683 	clz	r6, r3
 800032c:	2e00      	cmp	r6, #0
 800032e:	d14b      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000330:	428b      	cmp	r3, r1
 8000332:	f0c0 80f2 	bcc.w	800051a <__udivmoddi4+0x2aa>
 8000336:	4282      	cmp	r2, r0
 8000338:	f240 80ef 	bls.w	800051a <__udivmoddi4+0x2aa>
 800033c:	4630      	mov	r0, r6
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e3      	beq.n	800030a <__udivmoddi4+0x9a>
 8000342:	e9c5 4700 	strd	r4, r7, [r5]
 8000346:	e7e0      	b.n	800030a <__udivmoddi4+0x9a>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xdc>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f382 	clz	r3, r2
 8000350:	2b00      	cmp	r3, #0
 8000352:	f040 809d 	bne.w	8000490 <__udivmoddi4+0x220>
 8000356:	1a89      	subs	r1, r1, r2
 8000358:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800035c:	b297      	uxth	r7, r2
 800035e:	2601      	movs	r6, #1
 8000360:	0c20      	lsrs	r0, r4, #16
 8000362:	fbb1 f2fe 	udiv	r2, r1, lr
 8000366:	fb0e 1112 	mls	r1, lr, r2, r1
 800036a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800036e:	fb07 f002 	mul.w	r0, r7, r2
 8000372:	4288      	cmp	r0, r1
 8000374:	d90f      	bls.n	8000396 <__udivmoddi4+0x126>
 8000376:	eb1c 0101 	adds.w	r1, ip, r1
 800037a:	f102 38ff 	add.w	r8, r2, #4294967295
 800037e:	bf2c      	ite	cs
 8000380:	f04f 0901 	movcs.w	r9, #1
 8000384:	f04f 0900 	movcc.w	r9, #0
 8000388:	4288      	cmp	r0, r1
 800038a:	d903      	bls.n	8000394 <__udivmoddi4+0x124>
 800038c:	f1b9 0f00 	cmp.w	r9, #0
 8000390:	f000 80cf 	beq.w	8000532 <__udivmoddi4+0x2c2>
 8000394:	4642      	mov	r2, r8
 8000396:	1a09      	subs	r1, r1, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	fbb1 f0fe 	udiv	r0, r1, lr
 800039e:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a2:	fb00 f707 	mul.w	r7, r0, r7
 80003a6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x150>
 80003ae:	eb1c 0404 	adds.w	r4, ip, r4
 80003b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x14e>
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	f200 80b4 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003be:	4608      	mov	r0, r1
 80003c0:	1be4      	subs	r4, r4, r7
 80003c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003c6:	e79b      	b.n	8000300 <__udivmoddi4+0x90>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa01 f406 	lsl.w	r4, r1, r6
 80003d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d6:	40f9      	lsrs	r1, r7
 80003d8:	40b2      	lsls	r2, r6
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f307 	lsr.w	r3, r0, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	431c      	orrs	r4, r3
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fa00 f306 	lsl.w	r3, r0, r6
 80003f0:	0c20      	lsrs	r0, r4, #16
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	fb09 1118 	mls	r1, r9, r8, r1
 80003fa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fe:	fb08 f00e 	mul.w	r0, r8, lr
 8000402:	4288      	cmp	r0, r1
 8000404:	d90f      	bls.n	8000426 <__udivmoddi4+0x1b6>
 8000406:	eb1c 0101 	adds.w	r1, ip, r1
 800040a:	f108 3aff 	add.w	sl, r8, #4294967295
 800040e:	bf2c      	ite	cs
 8000410:	f04f 0b01 	movcs.w	fp, #1
 8000414:	f04f 0b00 	movcc.w	fp, #0
 8000418:	4288      	cmp	r0, r1
 800041a:	d903      	bls.n	8000424 <__udivmoddi4+0x1b4>
 800041c:	f1bb 0f00 	cmp.w	fp, #0
 8000420:	f000 808d 	beq.w	800053e <__udivmoddi4+0x2ce>
 8000424:	46d0      	mov	r8, sl
 8000426:	1a09      	subs	r1, r1, r0
 8000428:	b2a4      	uxth	r4, r4
 800042a:	fbb1 f0f9 	udiv	r0, r1, r9
 800042e:	fb09 1110 	mls	r1, r9, r0, r1
 8000432:	fb00 fe0e 	mul.w	lr, r0, lr
 8000436:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800043a:	458e      	cmp	lr, r1
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1de>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d201      	bcs.n	800044c <__udivmoddi4+0x1dc>
 8000448:	458e      	cmp	lr, r1
 800044a:	d87f      	bhi.n	800054c <__udivmoddi4+0x2dc>
 800044c:	4620      	mov	r0, r4
 800044e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	fba0 9802 	umull	r9, r8, r0, r2
 800045a:	4541      	cmp	r1, r8
 800045c:	464c      	mov	r4, r9
 800045e:	46c6      	mov	lr, r8
 8000460:	d302      	bcc.n	8000468 <__udivmoddi4+0x1f8>
 8000462:	d106      	bne.n	8000472 <__udivmoddi4+0x202>
 8000464:	454b      	cmp	r3, r9
 8000466:	d204      	bcs.n	8000472 <__udivmoddi4+0x202>
 8000468:	3801      	subs	r0, #1
 800046a:	ebb9 0402 	subs.w	r4, r9, r2
 800046e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000472:	2d00      	cmp	r5, #0
 8000474:	d070      	beq.n	8000558 <__udivmoddi4+0x2e8>
 8000476:	1b1a      	subs	r2, r3, r4
 8000478:	eb61 010e 	sbc.w	r1, r1, lr
 800047c:	fa22 f306 	lsr.w	r3, r2, r6
 8000480:	fa01 f707 	lsl.w	r7, r1, r7
 8000484:	40f1      	lsrs	r1, r6
 8000486:	2600      	movs	r6, #0
 8000488:	431f      	orrs	r7, r3
 800048a:	e9c5 7100 	strd	r7, r1, [r5]
 800048e:	e73c      	b.n	800030a <__udivmoddi4+0x9a>
 8000490:	fa02 fc03 	lsl.w	ip, r2, r3
 8000494:	f1c3 0020 	rsb	r0, r3, #32
 8000498:	fa01 f203 	lsl.w	r2, r1, r3
 800049c:	fa21 f600 	lsr.w	r6, r1, r0
 80004a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004a4:	fa24 f100 	lsr.w	r1, r4, r0
 80004a8:	fa1f f78c 	uxth.w	r7, ip
 80004ac:	409c      	lsls	r4, r3
 80004ae:	4311      	orrs	r1, r2
 80004b0:	fbb6 f0fe 	udiv	r0, r6, lr
 80004b4:	0c0a      	lsrs	r2, r1, #16
 80004b6:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ba:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004be:	fb00 f607 	mul.w	r6, r0, r7
 80004c2:	4296      	cmp	r6, r2
 80004c4:	d90e      	bls.n	80004e4 <__udivmoddi4+0x274>
 80004c6:	eb1c 0202 	adds.w	r2, ip, r2
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	bf2c      	ite	cs
 80004d0:	f04f 0901 	movcs.w	r9, #1
 80004d4:	f04f 0900 	movcc.w	r9, #0
 80004d8:	4296      	cmp	r6, r2
 80004da:	d902      	bls.n	80004e2 <__udivmoddi4+0x272>
 80004dc:	f1b9 0f00 	cmp.w	r9, #0
 80004e0:	d031      	beq.n	8000546 <__udivmoddi4+0x2d6>
 80004e2:	4640      	mov	r0, r8
 80004e4:	1b92      	subs	r2, r2, r6
 80004e6:	b289      	uxth	r1, r1
 80004e8:	fbb2 f6fe 	udiv	r6, r2, lr
 80004ec:	fb0e 2216 	mls	r2, lr, r6, r2
 80004f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004f4:	fb06 f207 	mul.w	r2, r6, r7
 80004f8:	428a      	cmp	r2, r1
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x29c>
 80004fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000500:	f106 38ff 	add.w	r8, r6, #4294967295
 8000504:	d201      	bcs.n	800050a <__udivmoddi4+0x29a>
 8000506:	428a      	cmp	r2, r1
 8000508:	d823      	bhi.n	8000552 <__udivmoddi4+0x2e2>
 800050a:	4646      	mov	r6, r8
 800050c:	1a89      	subs	r1, r1, r2
 800050e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000512:	e725      	b.n	8000360 <__udivmoddi4+0xf0>
 8000514:	462e      	mov	r6, r5
 8000516:	4628      	mov	r0, r5
 8000518:	e6f7      	b.n	800030a <__udivmoddi4+0x9a>
 800051a:	1a84      	subs	r4, r0, r2
 800051c:	eb61 0303 	sbc.w	r3, r1, r3
 8000520:	2001      	movs	r0, #1
 8000522:	461f      	mov	r7, r3
 8000524:	e70b      	b.n	800033e <__udivmoddi4+0xce>
 8000526:	4464      	add	r4, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e749      	b.n	80003c0 <__udivmoddi4+0x150>
 800052c:	4464      	add	r4, ip
 800052e:	3802      	subs	r0, #2
 8000530:	e6e1      	b.n	80002f6 <__udivmoddi4+0x86>
 8000532:	3a02      	subs	r2, #2
 8000534:	4461      	add	r1, ip
 8000536:	e72e      	b.n	8000396 <__udivmoddi4+0x126>
 8000538:	3e02      	subs	r6, #2
 800053a:	4462      	add	r2, ip
 800053c:	e6c6      	b.n	80002cc <__udivmoddi4+0x5c>
 800053e:	f1a8 0802 	sub.w	r8, r8, #2
 8000542:	4461      	add	r1, ip
 8000544:	e76f      	b.n	8000426 <__udivmoddi4+0x1b6>
 8000546:	3802      	subs	r0, #2
 8000548:	4462      	add	r2, ip
 800054a:	e7cb      	b.n	80004e4 <__udivmoddi4+0x274>
 800054c:	3802      	subs	r0, #2
 800054e:	4461      	add	r1, ip
 8000550:	e77d      	b.n	800044e <__udivmoddi4+0x1de>
 8000552:	3e02      	subs	r6, #2
 8000554:	4461      	add	r1, ip
 8000556:	e7d9      	b.n	800050c <__udivmoddi4+0x29c>
 8000558:	462e      	mov	r6, r5
 800055a:	e6d6      	b.n	800030a <__udivmoddi4+0x9a>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	4907      	ldr	r1, [pc, #28]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4013      	ands	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000

08000590 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	4907      	ldr	r1, [pc, #28]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 80005a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000

080005c0 <_ZN3LEDC1EP12GPIO_TypeDeftm>:
    uint16_t pin;         // GPIO pin (e.g., GPIO_PIN_5)
    uint32_t delay;       // Blinking delay in milliseconds

public:
    // Constructor to initialize the LED object
    LED(GPIO_TypeDef* port, uint16_t pin, uint32_t delay)
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	4613      	mov	r3, r2
 80005ce:	80fb      	strh	r3, [r7, #6]
        : port(port), pin(pin), delay(delay) {}
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	88fa      	ldrh	r2, [r7, #6]
 80005da:	809a      	strh	r2, [r3, #4]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	683a      	ldr	r2, [r7, #0]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	4618      	mov	r0, r3
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <_ZN3LED4initEv>:

    // Method to initialize the GPIO pin for the LED
    void init() {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

        GPIO_InitStruct.Pin = pin;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	889b      	ldrh	r3, [r3, #4]
 800060c:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(port, &GPIO_InitStruct);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f107 020c 	add.w	r2, r7, #12
 8000622:	4611      	mov	r1, r2
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fee7 	bl	80023f8 <HAL_GPIO_Init>
    }
 800062a:	bf00      	nop
 800062c:	3720      	adds	r7, #32
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <_ZN3LED6toggleEv>:
    void off() {
        HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
    }

    // Method to toggle the LED
    void toggle() {
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
        HAL_GPIO_TogglePin(port, pin);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	889b      	ldrh	r3, [r3, #4]
 8000642:	4619      	mov	r1, r3
 8000644:	4610      	mov	r0, r2
 8000646:	f002 f86f 	bl	8002728 <HAL_GPIO_TogglePin>
    }
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <_ZNK3LED8getDelayEv>:

    // Method to return the delay
    uint32_t getDelay() const {
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
        return delay;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	689b      	ldr	r3, [r3, #8]
    }
 800065e:	4618      	mov	r0, r3
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
	...

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fddb 	bl	800122a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f844 	bl	8000700 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 fa52 	bl	8000b20 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800067c:	f000 f8b0 	bl	80007e0 <_ZL12MX_ADC1_Initv>
  MX_LPUART1_UART_Init();
 8000680:	f000 f934 	bl	80008ec <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 8000684:	f000 f994 	bl	80009b0 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 8000688:	f000 f9e6 	bl	8000a58 <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 800068c:	f000 fa1a 	bl	8000ac4 <_ZL15MX_USB_PCD_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000690:	f005 f8bc 	bl	800580c <osKernelInitialize>

  /* Create the thread(s) */
  // Create LED objects

  // Initialize the LEDs
     greenLED.init();
 8000694:	4811      	ldr	r0, [pc, #68]	; (80006dc <main+0x70>)
 8000696:	f7ff ffab 	bl	80005f0 <_ZN3LED4initEv>
     redLED.init();
 800069a:	4811      	ldr	r0, [pc, #68]	; (80006e0 <main+0x74>)
 800069c:	f7ff ffa8 	bl	80005f0 <_ZN3LED4initEv>
     blueLED.init();
 80006a0:	4810      	ldr	r0, [pc, #64]	; (80006e4 <main+0x78>)
 80006a2:	f7ff ffa5 	bl	80005f0 <_ZN3LED4initEv>

     // Create tasks and store their handles
        greenLedTaskHandle = osThreadNew(StartGreenLedTask, &greenLED, nullptr);
 80006a6:	2200      	movs	r2, #0
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <main+0x70>)
 80006aa:	480f      	ldr	r0, [pc, #60]	; (80006e8 <main+0x7c>)
 80006ac:	f005 f8f8 	bl	80058a0 <osThreadNew>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <main+0x80>)
 80006b4:	6013      	str	r3, [r2, #0]
        redLedTaskHandle = osThreadNew(StartBlueLedTask, &redLED, nullptr);
 80006b6:	2200      	movs	r2, #0
 80006b8:	4909      	ldr	r1, [pc, #36]	; (80006e0 <main+0x74>)
 80006ba:	480d      	ldr	r0, [pc, #52]	; (80006f0 <main+0x84>)
 80006bc:	f005 f8f0 	bl	80058a0 <osThreadNew>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <main+0x88>)
 80006c4:	6013      	str	r3, [r2, #0]
        blueLedTaskHandle = osThreadNew( StartRedLedTask, &blueLED, nullptr);
 80006c6:	2200      	movs	r2, #0
 80006c8:	4906      	ldr	r1, [pc, #24]	; (80006e4 <main+0x78>)
 80006ca:	480b      	ldr	r0, [pc, #44]	; (80006f8 <main+0x8c>)
 80006cc:	f005 f8e8 	bl	80058a0 <osThreadNew>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <main+0x90>)
 80006d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006d6:	f005 f8bd 	bl	8005854 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006da:	e7fe      	b.n	80006da <main+0x6e>
 80006dc:	20000438 	.word	0x20000438
 80006e0:	20000444 	.word	0x20000444
 80006e4:	20000450 	.word	0x20000450
 80006e8:	08000c45 	.word	0x08000c45
 80006ec:	2000042c 	.word	0x2000042c
 80006f0:	08000c89 	.word	0x08000c89
 80006f4:	20000430 	.word	0x20000430
 80006f8:	08000c67 	.word	0x08000c67
 80006fc:	20000434 	.word	0x20000434

08000700 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b098      	sub	sp, #96	; 0x60
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0318 	add.w	r3, r7, #24
 800070a:	2248      	movs	r2, #72	; 0x48
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f007 fbbd 	bl	8007e8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000722:	2000      	movs	r0, #0
 8000724:	f002 f930 	bl	8002988 <HAL_PWREx_ControlVoltageScaling>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	bf14      	ite	ne
 800072e:	2301      	movne	r3, #1
 8000730:	2300      	moveq	r3, #0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8000738:	f000 fab7 	bl	8000caa <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800073c:	f002 f906 	bl	800294c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <_Z18SystemClock_Configv+0xdc>)
 8000742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000746:	4a25      	ldr	r2, [pc, #148]	; (80007dc <_Z18SystemClock_Configv+0xdc>)
 8000748:	f023 0318 	bic.w	r3, r3, #24
 800074c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000750:	2334      	movs	r3, #52	; 0x34
 8000752:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000754:	2381      	movs	r3, #129	; 0x81
 8000756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000760:	2300      	movs	r3, #0
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000764:	2360      	movs	r3, #96	; 0x60
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800076c:	2301      	movs	r3, #1
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000774:	2337      	movs	r3, #55	; 0x37
 8000776:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000778:	2307      	movs	r3, #7
 800077a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0318 	add.w	r3, r7, #24
 8000788:	4618      	mov	r0, r3
 800078a:	f002 f98d 	bl	8002aa8 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	bf14      	ite	ne
 8000794:	2301      	movne	r3, #1
 8000796:	2300      	moveq	r3, #0
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800079e:	f000 fa84 	bl	8000caa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2303      	movs	r3, #3
 80007a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2105      	movs	r1, #5
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fe4a 	bl	8003454 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	bf14      	ite	ne
 80007c6:	2301      	movne	r3, #1
 80007c8:	2300      	moveq	r3, #0
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80007d0:	f000 fa6b 	bl	8000caa <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3760      	adds	r7, #96	; 0x60
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000

080007e0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
 8000800:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000802:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 8000804:	4a37      	ldr	r2, [pc, #220]	; (80008e4 <_ZL12MX_ADC1_Initv+0x104>)
 8000806:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000808:	4b35      	ldr	r3, [pc, #212]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800080e:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000814:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800081a:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 8000822:	2204      	movs	r2, #4
 8000824:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 8000828:	2200      	movs	r2, #0
 800082a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 800082e:	2200      	movs	r2, #0
 8000830:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 8000834:	2201      	movs	r2, #1
 8000836:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000838:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000840:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 8000842:	2200      	movs	r2, #0
 8000844:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 8000848:	2200      	movs	r2, #0
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800084c:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 800084e:	2200      	movs	r2, #0
 8000850:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 8000856:	2200      	movs	r2, #0
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000862:	481f      	ldr	r0, [pc, #124]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 8000864:	f000 fee4 	bl	8001630 <HAL_ADC_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	bf14      	ite	ne
 800086e:	2301      	movne	r3, #1
 8000870:	2300      	moveq	r3, #0
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8000878:	f000 fa17 	bl	8000caa <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4816      	ldr	r0, [pc, #88]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 8000888:	f001 fc2e 	bl	80020e8 <HAL_ADCEx_MultiModeConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	bf14      	ite	ne
 8000892:	2301      	movne	r3, #1
 8000894:	2300      	moveq	r3, #0
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 800089c:	f000 fa05 	bl	8000caa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <_ZL12MX_ADC1_Initv+0x108>)
 80008a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a4:	2306      	movs	r3, #6
 80008a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ac:	237f      	movs	r3, #127	; 0x7f
 80008ae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008b0:	2304      	movs	r3, #4
 80008b2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4808      	ldr	r0, [pc, #32]	; (80008e0 <_ZL12MX_ADC1_Initv+0x100>)
 80008be:	f001 f803 	bl	80018c8 <HAL_ADC_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	bf14      	ite	ne
 80008c8:	2301      	movne	r3, #1
 80008ca:	2300      	moveq	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 80008d2:	f000 f9ea 	bl	8000caa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000002c 	.word	0x2000002c
 80008e4:	42028000 	.word	0x42028000
 80008e8:	0c900008 	.word	0x0c900008

080008ec <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008f0:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008f2:	4a2d      	ldr	r2, [pc, #180]	; (80009a8 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 80008f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80008f6:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008f8:	4a2c      	ldr	r2, [pc, #176]	; (80009ac <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 80008fa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000902:	4b28      	ldr	r3, [pc, #160]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800090e:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000910:	220c      	movs	r2, #12
 8000912:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800092e:	2200      	movs	r2, #0
 8000930:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000932:	481c      	ldr	r0, [pc, #112]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000934:	f003 fec2 	bl	80046bc <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2301      	movne	r3, #1
 8000940:	2300      	moveq	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 8000948:	f000 f9af 	bl	8000caa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	4815      	ldr	r0, [pc, #84]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000950:	f004 fc5c 	bl	800520c <HAL_UARTEx_SetTxFifoThreshold>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	bf14      	ite	ne
 800095a:	2301      	movne	r3, #1
 800095c:	2300      	moveq	r3, #0
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 8000964:	f000 f9a1 	bl	8000caa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	480e      	ldr	r0, [pc, #56]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800096c:	f004 fc8c 	bl	8005288 <HAL_UARTEx_SetRxFifoThreshold>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	bf14      	ite	ne
 8000976:	2301      	movne	r3, #1
 8000978:	2300      	moveq	r3, #0
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 8000980:	f000 f993 	bl	8000caa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000984:	4807      	ldr	r0, [pc, #28]	; (80009a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000986:	f004 fc08 	bl	800519a <HAL_UARTEx_DisableFifoMode>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	bf14      	ite	ne
 8000990:	2301      	movne	r3, #1
 8000992:	2300      	moveq	r3, #0
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 800099a:	f000 f986 	bl	8000caa <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000094 	.word	0x20000094
 80009a8:	40008000 	.word	0x40008000
 80009ac:	00033324 	.word	0x00033324

080009b0 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80009b6:	463b      	mov	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
 80009c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009c6:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <_ZL11MX_RTC_Initv+0xa0>)
 80009c8:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <_ZL11MX_RTC_Initv+0xa4>)
 80009ca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009cc:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <_ZL11MX_RTC_Initv+0xa0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <_ZL11MX_RTC_Initv+0xa0>)
 80009d4:	227f      	movs	r2, #127	; 0x7f
 80009d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <_ZL11MX_RTC_Initv+0xa0>)
 80009da:	22ff      	movs	r2, #255	; 0xff
 80009dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <_ZL11MX_RTC_Initv+0xa0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <_ZL11MX_RTC_Initv+0xa0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <_ZL11MX_RTC_Initv+0xa0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <_ZL11MX_RTC_Initv+0xa0>)
 80009f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <_ZL11MX_RTC_Initv+0xa0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009fe:	4814      	ldr	r0, [pc, #80]	; (8000a50 <_ZL11MX_RTC_Initv+0xa0>)
 8000a00:	f003 fd22 	bl	8004448 <HAL_RTC_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bf14      	ite	ne
 8000a0a:	2301      	movne	r3, #1
 8000a0c:	2300      	moveq	r3, #0
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 8000a14:	f000 f949 	bl	8000caa <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <_ZL11MX_RTC_Initv+0xa0>)
 8000a2e:	f003 fe19 	bl	8004664 <HAL_RTCEx_PrivilegeModeSet>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	bf14      	ite	ne
 8000a38:	2301      	movne	r3, #1
 8000a3a:	2300      	moveq	r3, #0
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8000a42:	f000 f932 	bl	8000caa <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000128 	.word	0x20000128
 8000a54:	40002800 	.word	0x40002800

08000a58 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000a6e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a72:	f7ff fd8d 	bl	8000590 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a76:	2002      	movs	r0, #2
 8000a78:	f7ff fd72 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f7ff fd6f 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a86:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	463b      	mov	r3, r7
 8000a92:	4619      	mov	r1, r3
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <_ZL13MX_UCPD1_Initv+0x64>)
 8000a96:	f004 fdce 	bl	8005636 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a9e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <_ZL13MX_UCPD1_Initv+0x68>)
 8000aae:	f004 fdc2 	bl	8005636 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	42020400 	.word	0x42020400
 8000ac0:	42020000 	.word	0x42020000

08000ac4 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000aca:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_ZL15MX_USB_PCD_Initv+0x58>)
 8000acc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ad0:	2208      	movs	r2, #8
 8000ad2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000af8:	4807      	ldr	r0, [pc, #28]	; (8000b18 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000afa:	f001 fe2f 	bl	800275c <HAL_PCD_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	bf14      	ite	ne
 8000b04:	2301      	movne	r3, #1
 8000b06:	2300      	moveq	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8000b0e:	f000 f8cc 	bl	8000caa <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000150 	.word	0x20000150
 8000b1c:	4000d400 	.word	0x4000d400

08000b20 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b3f      	ldr	r3, [pc, #252]	; (8000c34 <_ZL12MX_GPIO_Initv+0x114>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a3e      	ldr	r2, [pc, #248]	; (8000c34 <_ZL12MX_GPIO_Initv+0x114>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b3c      	ldr	r3, [pc, #240]	; (8000c34 <_ZL12MX_GPIO_Initv+0x114>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b39      	ldr	r3, [pc, #228]	; (8000c34 <_ZL12MX_GPIO_Initv+0x114>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a38      	ldr	r2, [pc, #224]	; (8000c34 <_ZL12MX_GPIO_Initv+0x114>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b36      	ldr	r3, [pc, #216]	; (8000c34 <_ZL12MX_GPIO_Initv+0x114>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b66:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <_ZL12MX_GPIO_Initv+0x114>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <_ZL12MX_GPIO_Initv+0x114>)
 8000b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <_ZL12MX_GPIO_Initv+0x114>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000b7e:	f001 ff5f 	bl	8002a40 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <_ZL12MX_GPIO_Initv+0x114>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4a2b      	ldr	r2, [pc, #172]	; (8000c34 <_ZL12MX_GPIO_Initv+0x114>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <_ZL12MX_GPIO_Initv+0x114>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	4826      	ldr	r0, [pc, #152]	; (8000c38 <_ZL12MX_GPIO_Initv+0x118>)
 8000ba0:	f001 fdaa 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000baa:	4824      	ldr	r0, [pc, #144]	; (8000c3c <_ZL12MX_GPIO_Initv+0x11c>)
 8000bac:	f001 fda4 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	21a0      	movs	r1, #160	; 0xa0
 8000bb4:	4822      	ldr	r0, [pc, #136]	; (8000c40 <_ZL12MX_GPIO_Initv+0x120>)
 8000bb6:	f001 fd9f 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000bba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	481b      	ldr	r0, [pc, #108]	; (8000c40 <_ZL12MX_GPIO_Initv+0x120>)
 8000bd2:	f001 fc11 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4812      	ldr	r0, [pc, #72]	; (8000c38 <_ZL12MX_GPIO_Initv+0x118>)
 8000bee:	f001 fc03 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <_ZL12MX_GPIO_Initv+0x11c>)
 8000c0c:	f001 fbf4 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000c10:	23a0      	movs	r3, #160	; 0xa0
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <_ZL12MX_GPIO_Initv+0x120>)
 8000c28:	f001 fbe6 	bl	80023f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	42020800 	.word	0x42020800
 8000c3c:	42020000 	.word	0x42020000
 8000c40:	42020400 	.word	0x42020400

08000c44 <_Z17StartGreenLedTaskPv>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
/* Green LED Task */
void StartGreenLedTask(void *argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	 LED* led = static_cast<LED*>(argument);  // Cast the argument to LED object
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	60fb      	str	r3, [r7, #12]

	    for (;;) {
	        led->toggle();          // Toggle the LED
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f7ff fcee 	bl	8000632 <_ZN3LED6toggleEv>
	        osDelay(led->getDelay());  // Delay based on the LED's delay
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f7ff fcfb 	bl	8000652 <_ZNK3LED8getDelayEv>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f004 feb0 	bl	80059c4 <osDelay>
	        led->toggle();          // Toggle the LED
 8000c64:	e7f4      	b.n	8000c50 <_Z17StartGreenLedTaskPv+0xc>

08000c66 <_Z15StartRedLedTaskPv>:
	    }
}

/* Red LED Task */
void StartRedLedTask(void *argument)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b084      	sub	sp, #16
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
	 LED* led = static_cast<LED*>(argument);  // Cast the argument to LED object
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60fb      	str	r3, [r7, #12]

	    for (;;) {
	        led->toggle();          // Toggle the LED
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f7ff fcdd 	bl	8000632 <_ZN3LED6toggleEv>
	        osDelay(led->getDelay());  // Delay based on the LED's delay
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f7ff fcea 	bl	8000652 <_ZNK3LED8getDelayEv>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fe9f 	bl	80059c4 <osDelay>
	        led->toggle();          // Toggle the LED
 8000c86:	e7f4      	b.n	8000c72 <_Z15StartRedLedTaskPv+0xc>

08000c88 <_Z16StartBlueLedTaskPv>:
	    }
}

/* Blue LED Task */
void StartBlueLedTask(void *argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	 LED* led = static_cast<LED*>(argument);  // Cast the argument to LED object
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	60fb      	str	r3, [r7, #12]

	    for (;;) {
	        led->toggle();          // Toggle the LED
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	f7ff fccc 	bl	8000632 <_ZN3LED6toggleEv>
	        osDelay(led->getDelay());  // Delay based on the LED's delay
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f7ff fcd9 	bl	8000652 <_ZNK3LED8getDelayEv>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f004 fe8e 	bl	80059c4 <osDelay>
	        led->toggle();          // Toggle the LED
 8000ca8:	e7f4      	b.n	8000c94 <_Z16StartBlueLedTaskPv+0xc>

08000caa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cae:	b672      	cpsid	i
}
 8000cb0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <Error_Handler+0x8>

08000cb4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d11a      	bne.n	8000cfa <_Z41__static_initialization_and_destruction_0ii+0x46>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d115      	bne.n	8000cfa <_Z41__static_initialization_and_destruction_0ii+0x46>
LED greenLED(GPIOC, GPIO_PIN_7, 500);  // Replace GPIOA and GPIO_PIN_5 with actual values
 8000cce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	490b      	ldr	r1, [pc, #44]	; (8000d04 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000cd6:	480c      	ldr	r0, [pc, #48]	; (8000d08 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000cd8:	f7ff fc72 	bl	80005c0 <_ZN3LEDC1EP12GPIO_TypeDeftm>
LED redLED(GPIOA, GPIO_PIN_9, 500);    // Replace GPIOB and GPIO_PIN_6 with actual values
 8000cdc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce4:	4909      	ldr	r1, [pc, #36]	; (8000d0c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000ce6:	480a      	ldr	r0, [pc, #40]	; (8000d10 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000ce8:	f7ff fc6a 	bl	80005c0 <_ZN3LEDC1EP12GPIO_TypeDeftm>
LED blueLED(GPIOB, GPIO_PIN_7, 500);  // Replace GPIOC and GPIO_PIN_7 with actual values
 8000cec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000cf4:	4808      	ldr	r0, [pc, #32]	; (8000d18 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000cf6:	f7ff fc63 	bl	80005c0 <_ZN3LEDC1EP12GPIO_TypeDeftm>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	42020800 	.word	0x42020800
 8000d08:	20000438 	.word	0x20000438
 8000d0c:	42020000 	.word	0x42020000
 8000d10:	20000444 	.word	0x20000444
 8000d14:	42020400 	.word	0x42020400
 8000d18:	20000450 	.word	0x20000450

08000d1c <_GLOBAL__sub_I_hadc1>:
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff ffc5 	bl	8000cb4 <_Z41__static_initialization_and_destruction_0ii>
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	6593      	str	r3, [r2, #88]	; 0x58
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2107      	movs	r1, #7
 8000d66:	f06f 0001 	mvn.w	r0, #1
 8000d6a:	f001 fb1e 	bl	80023aa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0ae      	sub	sp, #184	; 0xb8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	2294      	movs	r2, #148	; 0x94
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f007 f876 	bl	8007e8e <memset>
  if(hadc->Instance==ADC1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <HAL_ADC_MspInit+0xa8>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d137      	bne.n	8000e1c <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000db0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000db2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000db6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 fe2c 	bl	8003a1c <HAL_RCCEx_PeriphCLKConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000dca:	f7ff ff6e 	bl	8000caa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_ADC_MspInit+0xac>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <HAL_ADC_MspInit+0xac>)
 8000dd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_ADC_MspInit+0xac>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_ADC_MspInit+0xac>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <HAL_ADC_MspInit+0xac>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <HAL_ADC_MspInit+0xac>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e04:	2303      	movs	r3, #3
 8000e06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e14:	4619      	mov	r1, r3
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <HAL_ADC_MspInit+0xb0>)
 8000e18:	f001 faee 	bl	80023f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	37b8      	adds	r7, #184	; 0xb8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	42028000 	.word	0x42028000
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	42020800 	.word	0x42020800

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b0ae      	sub	sp, #184	; 0xb8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	2294      	movs	r2, #148	; 0x94
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f007 f81c 	bl	8007e8e <memset>
  if(huart->Instance==LPUART1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <HAL_UART_MspInit+0xb4>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d13d      	bne.n	8000edc <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e60:	2320      	movs	r3, #32
 8000e62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 fdd5 	bl	8003a1c <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e78:	f7ff ff17 	bl	8000caa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e98:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000eac:	f001 fdc8 	bl	8002a40 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000eb0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ed0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <HAL_UART_MspInit+0xbc>)
 8000ed8:	f001 fa8e 	bl	80023f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000edc:	bf00      	nop
 8000ede:	37b8      	adds	r7, #184	; 0xb8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40008000 	.word	0x40008000
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	42021800 	.word	0x42021800

08000ef0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0a8      	sub	sp, #160	; 0xa0
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2294      	movs	r2, #148	; 0x94
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f006 ffc4 	bl	8007e8e <memset>
  if(hrtc->Instance==RTC)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <HAL_RTC_MspInit+0x74>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d124      	bne.n	8000f5a <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f14:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 fd7a 	bl	8003a1c <HAL_RCCEx_PeriphCLKConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f2e:	f7ff febc 	bl	8000caa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_RTC_MspInit+0x78>)
 8000f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f38:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_RTC_MspInit+0x78>)
 8000f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_RTC_MspInit+0x78>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_RTC_MspInit+0x78>)
 8000f48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_RTC_MspInit+0x78>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	37a0      	adds	r7, #160	; 0xa0
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40002800 	.word	0x40002800
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b0ae      	sub	sp, #184	; 0xb8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	2294      	movs	r2, #148	; 0x94
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f006 ff7e 	bl	8007e8e <memset>
  if(hpcd->Instance==USB)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a22      	ldr	r2, [pc, #136]	; (8001020 <HAL_PCD_MspInit+0xb4>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d13d      	bne.n	8001018 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 fd35 	bl	8003a1c <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000fb8:	f7ff fe77 	bl	8000caa <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_PCD_MspInit+0xb8>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	4a18      	ldr	r2, [pc, #96]	; (8001024 <HAL_PCD_MspInit+0xb8>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_PCD_MspInit+0xb8>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fd4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000fee:	230a      	movs	r3, #10
 8000ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480b      	ldr	r0, [pc, #44]	; (8001028 <HAL_PCD_MspInit+0xbc>)
 8000ffc:	f001 f9fc 	bl	80023f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_PCD_MspInit+0xb8>)
 8001002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_PCD_MspInit+0xb8>)
 8001006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800100a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_PCD_MspInit+0xb8>)
 800100e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	37b8      	adds	r7, #184	; 0xb8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	4000d400 	.word	0x4000d400
 8001024:	40021000 	.word	0x40021000
 8001028:	42020000 	.word	0x42020000

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001082:	4b4f      	ldr	r3, [pc, #316]	; (80011c0 <SystemCoreClockUpdate+0x144>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d107      	bne.n	800109e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800108e:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <SystemCoreClockUpdate+0x144>)
 8001090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	e005      	b.n	80010aa <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800109e:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <SystemCoreClockUpdate+0x144>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80010aa:	4a46      	ldr	r2, [pc, #280]	; (80011c4 <SystemCoreClockUpdate+0x148>)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010b4:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <SystemCoreClockUpdate+0x144>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 030c 	and.w	r3, r3, #12
 80010bc:	2b0c      	cmp	r3, #12
 80010be:	d866      	bhi.n	800118e <SystemCoreClockUpdate+0x112>
 80010c0:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <SystemCoreClockUpdate+0x4c>)
 80010c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c6:	bf00      	nop
 80010c8:	080010fd 	.word	0x080010fd
 80010cc:	0800118f 	.word	0x0800118f
 80010d0:	0800118f 	.word	0x0800118f
 80010d4:	0800118f 	.word	0x0800118f
 80010d8:	08001105 	.word	0x08001105
 80010dc:	0800118f 	.word	0x0800118f
 80010e0:	0800118f 	.word	0x0800118f
 80010e4:	0800118f 	.word	0x0800118f
 80010e8:	0800110d 	.word	0x0800110d
 80010ec:	0800118f 	.word	0x0800118f
 80010f0:	0800118f 	.word	0x0800118f
 80010f4:	0800118f 	.word	0x0800118f
 80010f8:	08001115 	.word	0x08001115
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80010fc:	4a32      	ldr	r2, [pc, #200]	; (80011c8 <SystemCoreClockUpdate+0x14c>)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	6013      	str	r3, [r2, #0]
      break;
 8001102:	e048      	b.n	8001196 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001104:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <SystemCoreClockUpdate+0x14c>)
 8001106:	4a31      	ldr	r2, [pc, #196]	; (80011cc <SystemCoreClockUpdate+0x150>)
 8001108:	601a      	str	r2, [r3, #0]
      break;
 800110a:	e044      	b.n	8001196 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800110c:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <SystemCoreClockUpdate+0x14c>)
 800110e:	4a30      	ldr	r2, [pc, #192]	; (80011d0 <SystemCoreClockUpdate+0x154>)
 8001110:	601a      	str	r2, [r3, #0]
      break;
 8001112:	e040      	b.n	8001196 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <SystemCoreClockUpdate+0x144>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <SystemCoreClockUpdate+0x144>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	f003 030f 	and.w	r3, r3, #15
 8001128:	3301      	adds	r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d003      	beq.n	800113a <SystemCoreClockUpdate+0xbe>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b03      	cmp	r3, #3
 8001136:	d006      	beq.n	8001146 <SystemCoreClockUpdate+0xca>
 8001138:	e00b      	b.n	8001152 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800113a:	4a24      	ldr	r2, [pc, #144]	; (80011cc <SystemCoreClockUpdate+0x150>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	613b      	str	r3, [r7, #16]
          break;
 8001144:	e00b      	b.n	800115e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001146:	4a22      	ldr	r2, [pc, #136]	; (80011d0 <SystemCoreClockUpdate+0x154>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	613b      	str	r3, [r7, #16]
          break;
 8001150:	e005      	b.n	800115e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	613b      	str	r3, [r7, #16]
          break;
 800115c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <SystemCoreClockUpdate+0x144>)
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	fb02 f303 	mul.w	r3, r2, r3
 800116e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <SystemCoreClockUpdate+0x144>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0e5b      	lsrs	r3, r3, #25
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	3301      	adds	r3, #1
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	fbb2 f3f3 	udiv	r3, r2, r3
 8001188:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <SystemCoreClockUpdate+0x14c>)
 800118a:	6013      	str	r3, [r2, #0]
      break;
 800118c:	e003      	b.n	8001196 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800118e:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <SystemCoreClockUpdate+0x14c>)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	6013      	str	r3, [r2, #0]
      break;
 8001194:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <SystemCoreClockUpdate+0x144>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <SystemCoreClockUpdate+0x158>)
 80011a2:	5cd3      	ldrb	r3, [r2, r3]
 80011a4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <SystemCoreClockUpdate+0x14c>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <SystemCoreClockUpdate+0x14c>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40021000 	.word	0x40021000
 80011c4:	08007ee8 	.word	0x08007ee8
 80011c8:	20000000 	.word	0x20000000
 80011cc:	00f42400 	.word	0x00f42400
 80011d0:	007a1200 	.word	0x007a1200
 80011d4:	08007ed0 	.word	0x08007ed0

080011d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80011d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001210 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011dc:	f7ff ff3c 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011e2:	e003      	b.n	80011ec <LoopCopyDataInit>

080011e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011ea:	3104      	adds	r1, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011ec:	480a      	ldr	r0, [pc, #40]	; (8001218 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <LoopForever+0xe>)
	adds	r2, r0, r1
 80011f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011f4:	d3f6      	bcc.n	80011e4 <CopyDataInit>
	ldr	r2, =_sbss
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011f8:	e002      	b.n	8001200 <LoopFillZerobss>

080011fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011fc:	f842 3b04 	str.w	r3, [r2], #4

08001200 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <LoopForever+0x16>)
	cmp	r2, r3
 8001202:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001204:	d3f9      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001206:	f006 fe11 	bl	8007e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800120a:	f7ff fa2f 	bl	800066c <main>

0800120e <LoopForever>:

LoopForever:
    b LoopForever
 800120e:	e7fe      	b.n	800120e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001210:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001214:	08007f64 	.word	0x08007f64
	ldr	r0, =_sdata
 8001218:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800121c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001220:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001224:	200031a8 	.word	0x200031a8

08001228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC1_2_IRQHandler>

0800122a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001234:	2004      	movs	r0, #4
 8001236:	f001 f8ad 	bl	8002394 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800123a:	f7ff ff1f 	bl	800107c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800123e:	2007      	movs	r0, #7
 8001240:	f000 f80e 	bl	8001260 <HAL_InitTick>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	e001      	b.n	8001254 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001250:	f7ff fd6c 	bl	8000d2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001254:	79fb      	ldrb	r3, [r7, #7]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_InitTick+0x6c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d023      	beq.n	80012bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_InitTick+0x70>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_InitTick+0x6c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f001 f8a7 	bl	80023de <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10f      	bne.n	80012b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b07      	cmp	r3, #7
 800129a:	d809      	bhi.n	80012b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f001 f881 	bl	80023aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_InitTick+0x74>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e007      	b.n	80012c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	e004      	b.n	80012c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	e001      	b.n	80012c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000008 	.word	0x20000008
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000004 	.word	0x20000004

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	2000045c 	.word	0x2000045c

080012f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	609a      	str	r2, [r3, #8]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	609a      	str	r2, [r3, #8]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	3360      	adds	r3, #96	; 0x60
 800136a:	461a      	mov	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <LL_ADC_SetOffset+0x44>)
 800137a:	4013      	ands	r3, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	4313      	orrs	r3, r2
 8001388:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001390:	bf00      	nop
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	03fff000 	.word	0x03fff000

080013a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3360      	adds	r3, #96	; 0x60
 80013ae:	461a      	mov	r2, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3360      	adds	r3, #96	; 0x60
 80013dc:	461a      	mov	r2, r3
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013f6:	bf00      	nop
 80013f8:	371c      	adds	r7, #28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	615a      	str	r2, [r3, #20]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3330      	adds	r3, #48	; 0x30
 8001438:	461a      	mov	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	4413      	add	r3, r2
 8001446:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	211f      	movs	r1, #31
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	401a      	ands	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	0e9b      	lsrs	r3, r3, #26
 8001460:	f003 011f 	and.w	r1, r3, #31
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	431a      	orrs	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001474:	bf00      	nop
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	3314      	adds	r3, #20
 8001490:	461a      	mov	r2, r3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	0e5b      	lsrs	r3, r3, #25
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	4413      	add	r3, r2
 800149e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	0d1b      	lsrs	r3, r3, #20
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	2107      	movs	r1, #7
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	401a      	ands	r2, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	0d1b      	lsrs	r3, r3, #20
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	431a      	orrs	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014ca:	bf00      	nop
 80014cc:	371c      	adds	r7, #28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f0:	43db      	mvns	r3, r3
 80014f2:	401a      	ands	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0318 	and.w	r3, r3, #24
 80014fa:	4908      	ldr	r1, [pc, #32]	; (800151c <LL_ADC_SetChannelSingleDiff+0x44>)
 80014fc:	40d9      	lsrs	r1, r3
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	400b      	ands	r3, r1
 8001502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001506:	431a      	orrs	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	0007ffff 	.word	0x0007ffff

08001520 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001530:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6093      	str	r3, [r2, #8]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001558:	d101      	bne.n	800155e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800157c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001580:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015a8:	d101      	bne.n	80015ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <LL_ADC_IsEnabled+0x18>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <LL_ADC_IsEnabled+0x1a>
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d101      	bne.n	80015fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b08      	cmp	r3, #8
 800161a:	d101      	bne.n	8001620 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e12e      	b.n	80018a8 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	2b00      	cmp	r3, #0
 8001656:	d109      	bne.n	800166c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fb8f 	bl	8000d7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff67 	bl	8001544 <LL_ADC_IsDeepPowerDownEnabled>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d004      	beq.n	8001686 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff4d 	bl	8001520 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff82 	bl	8001594 <LL_ADC_IsInternalRegulatorEnabled>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d115      	bne.n	80016c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff66 	bl	800156c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016a0:	4b83      	ldr	r3, [pc, #524]	; (80018b0 <HAL_ADC_Init+0x280>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	4a83      	ldr	r2, [pc, #524]	; (80018b4 <HAL_ADC_Init+0x284>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	099b      	lsrs	r3, r3, #6
 80016ae:	3301      	adds	r3, #1
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016b4:	e002      	b.n	80016bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f9      	bne.n	80016b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff64 	bl	8001594 <LL_ADC_IsInternalRegulatorEnabled>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10d      	bne.n	80016ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	f043 0210 	orr.w	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e2:	f043 0201 	orr.w	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff75 	bl	80015e2 <LL_ADC_REG_IsConversionOngoing>
 80016f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 80c7 	bne.w	8001896 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 80c3 	bne.w	8001896 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001718:	f043 0202 	orr.w	r2, r3, #2
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff49 	bl	80015bc <LL_ADC_IsEnabled>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d110      	bne.n	8001752 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001730:	4861      	ldr	r0, [pc, #388]	; (80018b8 <HAL_ADC_Init+0x288>)
 8001732:	f7ff ff43 	bl	80015bc <LL_ADC_IsEnabled>
 8001736:	4604      	mov	r4, r0
 8001738:	4860      	ldr	r0, [pc, #384]	; (80018bc <HAL_ADC_Init+0x28c>)
 800173a:	f7ff ff3f 	bl	80015bc <LL_ADC_IsEnabled>
 800173e:	4603      	mov	r3, r0
 8001740:	4323      	orrs	r3, r4
 8001742:	2b00      	cmp	r3, #0
 8001744:	d105      	bne.n	8001752 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4619      	mov	r1, r3
 800174c:	485c      	ldr	r0, [pc, #368]	; (80018c0 <HAL_ADC_Init+0x290>)
 800174e:	f7ff fdcf 	bl	80012f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7e5b      	ldrb	r3, [r3, #25]
 8001756:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800175c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001762:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001768:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001770:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d106      	bne.n	800178e <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	3b01      	subs	r3, #1
 8001786:	045b      	lsls	r3, r3, #17
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <HAL_ADC_Init+0x294>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	69b9      	ldr	r1, [r7, #24]
 80017ba:	430b      	orrs	r3, r1
 80017bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff20 	bl	8001608 <LL_ADC_INJ_IsConversionOngoing>
 80017c8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d140      	bne.n	8001852 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d13d      	bne.n	8001852 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7e1b      	ldrb	r3, [r3, #24]
 80017de:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017e0:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017e8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017f8:	f023 0306 	bic.w	r3, r3, #6
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	69b9      	ldr	r1, [r7, #24]
 8001802:	430b      	orrs	r3, r1
 8001804:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800180c:	2b01      	cmp	r3, #1
 800180e:	d118      	bne.n	8001842 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800181a:	f023 0304 	bic.w	r3, r3, #4
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800182c:	4311      	orrs	r1, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001832:	430a      	orrs	r2, r1
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	e007      	b.n	8001852 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0201 	bic.w	r2, r2, #1
 8001850:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d10c      	bne.n	8001874 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	f023 010f 	bic.w	r1, r3, #15
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	631a      	str	r2, [r3, #48]	; 0x30
 8001872:	e007      	b.n	8001884 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 020f 	bic.w	r2, r2, #15
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	f023 0303 	bic.w	r3, r3, #3
 800188c:	f043 0201 	orr.w	r2, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	659a      	str	r2, [r3, #88]	; 0x58
 8001894:	e007      	b.n	80018a6 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	f043 0210 	orr.w	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3724      	adds	r7, #36	; 0x24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	20000000 	.word	0x20000000
 80018b4:	053e2d63 	.word	0x053e2d63
 80018b8:	42028000 	.word	0x42028000
 80018bc:	42028100 	.word	0x42028100
 80018c0:	42028300 	.word	0x42028300
 80018c4:	fff0c007 	.word	0xfff0c007

080018c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b0b7      	sub	sp, #220	; 0xdc
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x22>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e3c1      	b.n	800206e <HAL_ADC_ConfigChannel+0x7a6>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fe73 	bl	80015e2 <LL_ADC_REG_IsConversionOngoing>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 83a6 	bne.w	8002050 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	f7ff fd89 	bl	8001428 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fe61 	bl	80015e2 <LL_ADC_REG_IsConversionOngoing>
 8001920:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fe6d 	bl	8001608 <LL_ADC_INJ_IsConversionOngoing>
 800192e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001932:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 81c1 	bne.w	8001cbe <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800193c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001940:	2b00      	cmp	r3, #0
 8001942:	f040 81bc 	bne.w	8001cbe <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800194e:	d10f      	bne.n	8001970 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2200      	movs	r2, #0
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff fd90 	bl	8001480 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fd4a 	bl	8001402 <LL_ADC_SetSamplingTimeCommonConfig>
 800196e:	e00e      	b.n	800198e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6819      	ldr	r1, [r3, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	461a      	mov	r2, r3
 800197e:	f7ff fd7f 	bl	8001480 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fd3a 	bl	8001402 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	08db      	lsrs	r3, r3, #3
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d00a      	beq.n	80019c6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6919      	ldr	r1, [r3, #16]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019c0:	f7ff fcca 	bl	8001358 <LL_ADC_SetOffset>
 80019c4:	e17b      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fce7 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10a      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x12a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fcdc 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	0e9b      	lsrs	r3, r3, #26
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	e01e      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x168>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fcd1 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001a20:	2320      	movs	r3, #32
 8001a22:	e004      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x180>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0e9b      	lsrs	r3, r3, #26
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	e018      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x1b2>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	e004      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001a70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a74:	fab3 f383 	clz	r3, r3
 8001a78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d106      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fca0 	bl	80013cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2101      	movs	r1, #1
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fc84 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10a      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x1f0>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fc79 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	0e9b      	lsrs	r3, r3, #26
 8001ab2:	f003 021f 	and.w	r2, r3, #31
 8001ab6:	e01e      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x22e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2101      	movs	r1, #1
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fc6e 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ad6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ada:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ade:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	e004      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001aea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x246>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	0e9b      	lsrs	r3, r3, #26
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	e018      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x278>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001b32:	2320      	movs	r3, #32
 8001b34:	e004      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001b36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d106      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fc3d 	bl	80013cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2102      	movs	r1, #2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fc21 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10a      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x2b6>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fc16 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	0e9b      	lsrs	r3, r3, #26
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	e01e      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x2f4>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2102      	movs	r1, #2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fc0b 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b94:	fa93 f3a3 	rbit	r3, r3
 8001b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ba0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001bac:	2320      	movs	r3, #32
 8001bae:	e004      	b.n	8001bba <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001bb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x30c>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0e9b      	lsrs	r3, r3, #26
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	e016      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x33a>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001be6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	e004      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d106      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fbdc 	bl	80013cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2103      	movs	r1, #3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fbc0 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10a      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x378>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2103      	movs	r1, #3
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fbb5 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	0e9b      	lsrs	r3, r3, #26
 8001c3a:	f003 021f 	and.w	r2, r3, #31
 8001c3e:	e017      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x3a8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2103      	movs	r1, #3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fbaa 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c5a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001c62:	2320      	movs	r3, #32
 8001c64:	e003      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x3c0>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0e9b      	lsrs	r3, r3, #26
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	e011      	b.n	8001cac <HAL_ADC_ConfigChannel+0x3e4>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c98:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	e003      	b.n	8001cac <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2103      	movs	r1, #3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fb87 	bl	80013cc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fc7a 	bl	80015bc <LL_ADC_IsEnabled>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 81c9 	bne.w	8002062 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	6819      	ldr	r1, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f7ff fbfb 	bl	80014d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	4a8f      	ldr	r2, [pc, #572]	; (8001f24 <HAL_ADC_ConfigChannel+0x65c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	f040 8131 	bne.w	8001f50 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10b      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x44e>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	0e9b      	lsrs	r3, r3, #26
 8001d04:	3301      	adds	r3, #1
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	2b09      	cmp	r3, #9
 8001d0c:	bf94      	ite	ls
 8001d0e:	2301      	movls	r3, #1
 8001d10:	2300      	movhi	r3, #0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	e019      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x482>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d26:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001d2e:	2320      	movs	r3, #32
 8001d30:	e003      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	2b09      	cmp	r3, #9
 8001d42:	bf94      	ite	ls
 8001d44:	2301      	movls	r3, #1
 8001d46:	2300      	movhi	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d079      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d107      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x4a2>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0e9b      	lsrs	r3, r3, #26
 8001d60:	3301      	adds	r3, #1
 8001d62:	069b      	lsls	r3, r3, #26
 8001d64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d68:	e015      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x4ce>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001d82:	2320      	movs	r3, #32
 8001d84:	e003      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	069b      	lsls	r3, r3, #26
 8001d92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x4ee>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	0e9b      	lsrs	r3, r3, #26
 8001da8:	3301      	adds	r3, #1
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	e017      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x51e>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dc6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001dce:	2320      	movs	r3, #32
 8001dd0:	e003      	b.n	8001dda <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	ea42 0103 	orr.w	r1, r2, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10a      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x544>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0e9b      	lsrs	r3, r3, #26
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f003 021f 	and.w	r2, r3, #31
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	051b      	lsls	r3, r3, #20
 8001e0a:	e018      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x576>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001e24:	2320      	movs	r3, #32
 8001e26:	e003      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	3301      	adds	r3, #1
 8001e32:	f003 021f 	and.w	r2, r3, #31
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e3e:	430b      	orrs	r3, r1
 8001e40:	e081      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d107      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x596>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	3301      	adds	r3, #1
 8001e56:	069b      	lsls	r3, r3, #26
 8001e58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e5c:	e015      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x5c2>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001e76:	2320      	movs	r3, #32
 8001e78:	e003      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	069b      	lsls	r3, r3, #26
 8001e86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x5e2>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	0e9b      	lsrs	r3, r3, #26
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	e017      	b.n	8001eda <HAL_ADC_ConfigChannel+0x612>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	61fb      	str	r3, [r7, #28]
  return result;
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	e003      	b.n	8001ece <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	ea42 0103 	orr.w	r1, r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10d      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x63e>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	0e9b      	lsrs	r3, r3, #26
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f003 021f 	and.w	r2, r3, #31
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	3b1e      	subs	r3, #30
 8001efe:	051b      	lsls	r3, r3, #20
 8001f00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f04:	e01e      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x67c>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	613b      	str	r3, [r7, #16]
  return result;
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d104      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	e006      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x668>
 8001f22:	bf00      	nop
 8001f24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	f003 021f 	and.w	r2, r3, #31
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b1e      	subs	r3, #30
 8001f3e:	051b      	lsls	r3, r3, #20
 8001f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f44:	430b      	orrs	r3, r1
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	6892      	ldr	r2, [r2, #8]
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f7ff fa98 	bl	8001480 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b48      	ldr	r3, [pc, #288]	; (8002078 <HAL_ADC_ConfigChannel+0x7b0>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8082 	beq.w	8002062 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f5e:	4847      	ldr	r0, [pc, #284]	; (800207c <HAL_ADC_ConfigChannel+0x7b4>)
 8001f60:	f7ff f9ec 	bl	800133c <LL_ADC_GetCommonPathInternalCh>
 8001f64:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f68:	4845      	ldr	r0, [pc, #276]	; (8002080 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f6a:	f7ff fb27 	bl	80015bc <LL_ADC_IsEnabled>
 8001f6e:	4604      	mov	r4, r0
 8001f70:	4844      	ldr	r0, [pc, #272]	; (8002084 <HAL_ADC_ConfigChannel+0x7bc>)
 8001f72:	f7ff fb23 	bl	80015bc <LL_ADC_IsEnabled>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4323      	orrs	r3, r4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d15e      	bne.n	800203c <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a41      	ldr	r2, [pc, #260]	; (8002088 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d127      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d121      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a39      	ldr	r2, [pc, #228]	; (8002080 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d161      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fa2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4834      	ldr	r0, [pc, #208]	; (800207c <HAL_ADC_ConfigChannel+0x7b4>)
 8001faa:	f7ff f9b4 	bl	8001316 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fae:	4b37      	ldr	r3, [pc, #220]	; (800208c <HAL_ADC_ConfigChannel+0x7c4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	099b      	lsrs	r3, r3, #6
 8001fb4:	4a36      	ldr	r2, [pc, #216]	; (8002090 <HAL_ADC_ConfigChannel+0x7c8>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	099b      	lsrs	r3, r3, #6
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8001fc6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001fc8:	e002      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f9      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fd6:	e044      	b.n	8002062 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a2d      	ldr	r2, [pc, #180]	; (8002094 <HAL_ADC_ConfigChannel+0x7cc>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d113      	bne.n	800200a <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fe2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10d      	bne.n	800200a <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a23      	ldr	r2, [pc, #140]	; (8002080 <HAL_ADC_ConfigChannel+0x7b8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d134      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ff8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ffc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002000:	4619      	mov	r1, r3
 8002002:	481e      	ldr	r0, [pc, #120]	; (800207c <HAL_ADC_ConfigChannel+0x7b4>)
 8002004:	f7ff f987 	bl	8001316 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002008:	e02b      	b.n	8002062 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a22      	ldr	r2, [pc, #136]	; (8002098 <HAL_ADC_ConfigChannel+0x7d0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d126      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d120      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a16      	ldr	r2, [pc, #88]	; (8002080 <HAL_ADC_ConfigChannel+0x7b8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d11b      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800202a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800202e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002032:	4619      	mov	r1, r3
 8002034:	4811      	ldr	r0, [pc, #68]	; (800207c <HAL_ADC_ConfigChannel+0x7b4>)
 8002036:	f7ff f96e 	bl	8001316 <LL_ADC_SetCommonPathInternalCh>
 800203a:	e012      	b.n	8002062 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f043 0220 	orr.w	r2, r3, #32
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800204e:	e008      	b.n	8002062 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	f043 0220 	orr.w	r2, r3, #32
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800206a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800206e:	4618      	mov	r0, r3
 8002070:	37dc      	adds	r7, #220	; 0xdc
 8002072:	46bd      	mov	sp, r7
 8002074:	bd90      	pop	{r4, r7, pc}
 8002076:	bf00      	nop
 8002078:	80080000 	.word	0x80080000
 800207c:	42028300 	.word	0x42028300
 8002080:	42028000 	.word	0x42028000
 8002084:	42028100 	.word	0x42028100
 8002088:	c7520000 	.word	0xc7520000
 800208c:	20000000 	.word	0x20000000
 8002090:	053e2d63 	.word	0x053e2d63
 8002094:	cb840000 	.word	0xcb840000
 8002098:	80000001 	.word	0x80000001

0800209c <LL_ADC_IsEnabled>:
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <LL_ADC_IsEnabled+0x18>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <LL_ADC_IsEnabled+0x1a>
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d101      	bne.n	80020da <LL_ADC_REG_IsConversionOngoing+0x18>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b0a1      	sub	sp, #132	; 0x84
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002102:	2302      	movs	r3, #2
 8002104:	e089      	b.n	800221a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800210e:	2300      	movs	r3, #0
 8002110:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002112:	2300      	movs	r3, #0
 8002114:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a42      	ldr	r2, [pc, #264]	; (8002224 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d102      	bne.n	8002126 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002120:	4b41      	ldr	r3, [pc, #260]	; (8002228 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e001      	b.n	800212a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10b      	bne.n	8002148 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e068      	b.n	800221a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ffb9 	bl	80020c2 <LL_ADC_REG_IsConversionOngoing>
 8002150:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ffb3 	bl	80020c2 <LL_ADC_REG_IsConversionOngoing>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d14a      	bne.n	80021f8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002164:	2b00      	cmp	r3, #0
 8002166:	d147      	bne.n	80021f8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002168:	4b30      	ldr	r3, [pc, #192]	; (800222c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800216a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d027      	beq.n	80021c4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002186:	035b      	lsls	r3, r3, #13
 8002188:	430b      	orrs	r3, r1
 800218a:	431a      	orrs	r2, r3
 800218c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800218e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002190:	4824      	ldr	r0, [pc, #144]	; (8002224 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002192:	f7ff ff83 	bl	800209c <LL_ADC_IsEnabled>
 8002196:	4604      	mov	r4, r0
 8002198:	4823      	ldr	r0, [pc, #140]	; (8002228 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800219a:	f7ff ff7f 	bl	800209c <LL_ADC_IsEnabled>
 800219e:	4603      	mov	r3, r0
 80021a0:	4323      	orrs	r3, r4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d132      	bne.n	800220c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021ae:	f023 030f 	bic.w	r3, r3, #15
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	6811      	ldr	r1, [r2, #0]
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	6892      	ldr	r2, [r2, #8]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	431a      	orrs	r2, r3
 80021be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021c2:	e023      	b.n	800220c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021d0:	4814      	ldr	r0, [pc, #80]	; (8002224 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80021d2:	f7ff ff63 	bl	800209c <LL_ADC_IsEnabled>
 80021d6:	4604      	mov	r4, r0
 80021d8:	4813      	ldr	r0, [pc, #76]	; (8002228 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80021da:	f7ff ff5f 	bl	800209c <LL_ADC_IsEnabled>
 80021de:	4603      	mov	r3, r0
 80021e0:	4323      	orrs	r3, r4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d112      	bne.n	800220c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021ee:	f023 030f 	bic.w	r3, r3, #15
 80021f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021f6:	e009      	b.n	800220c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	f043 0220 	orr.w	r2, r3, #32
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800220a:	e000      	b.n	800220e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800220c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002216:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800221a:	4618      	mov	r0, r3
 800221c:	3784      	adds	r7, #132	; 0x84
 800221e:	46bd      	mov	sp, r7
 8002220:	bd90      	pop	{r4, r7, pc}
 8002222:	bf00      	nop
 8002224:	42028000 	.word	0x42028000
 8002228:	42028100 	.word	0x42028100
 800222c:	42028300 	.word	0x42028300

08002230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002262:	4a04      	ldr	r2, [pc, #16]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	60d3      	str	r3, [r2, #12]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <__NVIC_GetPriorityGrouping+0x18>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0307 	and.w	r3, r3, #7
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	db0a      	blt.n	80022be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	490c      	ldr	r1, [pc, #48]	; (80022e0 <__NVIC_SetPriority+0x4c>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	0152      	lsls	r2, r2, #5
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	440b      	add	r3, r1
 80022b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022bc:	e00a      	b.n	80022d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4908      	ldr	r1, [pc, #32]	; (80022e4 <__NVIC_SetPriority+0x50>)
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3b04      	subs	r3, #4
 80022cc:	0152      	lsls	r2, r2, #5
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	440b      	add	r3, r1
 80022d2:	761a      	strb	r2, [r3, #24]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f1c3 0307 	rsb	r3, r3, #7
 8002302:	2b03      	cmp	r3, #3
 8002304:	bf28      	it	cs
 8002306:	2303      	movcs	r3, #3
 8002308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3303      	adds	r3, #3
 800230e:	2b06      	cmp	r3, #6
 8002310:	d902      	bls.n	8002318 <NVIC_EncodePriority+0x30>
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3b04      	subs	r3, #4
 8002316:	e000      	b.n	800231a <NVIC_EncodePriority+0x32>
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	f04f 32ff 	mov.w	r2, #4294967295
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	43d9      	mvns	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	4313      	orrs	r3, r2
         );
}
 8002342:	4618      	mov	r0, r3
 8002344:	3724      	adds	r7, #36	; 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002360:	d301      	bcc.n	8002366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002362:	2301      	movs	r3, #1
 8002364:	e00f      	b.n	8002386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <SysTick_Config+0x40>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236e:	2107      	movs	r1, #7
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f7ff ff8e 	bl	8002294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <SysTick_Config+0x40>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <SysTick_Config+0x40>)
 8002380:	2207      	movs	r2, #7
 8002382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	e000e010 	.word	0xe000e010

08002394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff47 	bl	8002230 <__NVIC_SetPriorityGrouping>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023b8:	f7ff ff5e 	bl	8002278 <__NVIC_GetPriorityGrouping>
 80023bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	6978      	ldr	r0, [r7, #20]
 80023c4:	f7ff ff90 	bl	80022e8 <NVIC_EncodePriority>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff5f 	bl	8002294 <__NVIC_SetPriority>
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ffb2 	bl	8002350 <SysTick_Config>
 80023ec:	4603      	mov	r3, r0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002406:	e158      	b.n	80026ba <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	2101      	movs	r1, #1
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	fa01 f303 	lsl.w	r3, r1, r3
 8002414:	4013      	ands	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 814a 	beq.w	80026b4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d005      	beq.n	8002438 <HAL_GPIO_Init+0x40>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d130      	bne.n	800249a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	2203      	movs	r2, #3
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800246e:	2201      	movs	r2, #1
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	f003 0201 	and.w	r2, r3, #1
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d017      	beq.n	80024d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d123      	bne.n	800252a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	220f      	movs	r2, #15
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	08da      	lsrs	r2, r3, #3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3208      	adds	r2, #8
 8002524:	6939      	ldr	r1, [r7, #16]
 8002526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	2203      	movs	r2, #3
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0203 	and.w	r2, r3, #3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80a4 	beq.w	80026b4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800256c:	4a5a      	ldr	r2, [pc, #360]	; (80026d8 <HAL_GPIO_Init+0x2e0>)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	089b      	lsrs	r3, r3, #2
 8002572:	3318      	adds	r3, #24
 8002574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	220f      	movs	r2, #15
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a52      	ldr	r2, [pc, #328]	; (80026dc <HAL_GPIO_Init+0x2e4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d025      	beq.n	80025e4 <HAL_GPIO_Init+0x1ec>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a51      	ldr	r2, [pc, #324]	; (80026e0 <HAL_GPIO_Init+0x2e8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d01f      	beq.n	80025e0 <HAL_GPIO_Init+0x1e8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a50      	ldr	r2, [pc, #320]	; (80026e4 <HAL_GPIO_Init+0x2ec>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d019      	beq.n	80025dc <HAL_GPIO_Init+0x1e4>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a4f      	ldr	r2, [pc, #316]	; (80026e8 <HAL_GPIO_Init+0x2f0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d013      	beq.n	80025d8 <HAL_GPIO_Init+0x1e0>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a4e      	ldr	r2, [pc, #312]	; (80026ec <HAL_GPIO_Init+0x2f4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d00d      	beq.n	80025d4 <HAL_GPIO_Init+0x1dc>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a4d      	ldr	r2, [pc, #308]	; (80026f0 <HAL_GPIO_Init+0x2f8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d007      	beq.n	80025d0 <HAL_GPIO_Init+0x1d8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a4c      	ldr	r2, [pc, #304]	; (80026f4 <HAL_GPIO_Init+0x2fc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d101      	bne.n	80025cc <HAL_GPIO_Init+0x1d4>
 80025c8:	2306      	movs	r3, #6
 80025ca:	e00c      	b.n	80025e6 <HAL_GPIO_Init+0x1ee>
 80025cc:	2307      	movs	r3, #7
 80025ce:	e00a      	b.n	80025e6 <HAL_GPIO_Init+0x1ee>
 80025d0:	2305      	movs	r3, #5
 80025d2:	e008      	b.n	80025e6 <HAL_GPIO_Init+0x1ee>
 80025d4:	2304      	movs	r3, #4
 80025d6:	e006      	b.n	80025e6 <HAL_GPIO_Init+0x1ee>
 80025d8:	2303      	movs	r3, #3
 80025da:	e004      	b.n	80025e6 <HAL_GPIO_Init+0x1ee>
 80025dc:	2302      	movs	r3, #2
 80025de:	e002      	b.n	80025e6 <HAL_GPIO_Init+0x1ee>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <HAL_GPIO_Init+0x1ee>
 80025e4:	2300      	movs	r3, #0
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	f002 0203 	and.w	r2, r2, #3
 80025ec:	00d2      	lsls	r2, r2, #3
 80025ee:	4093      	lsls	r3, r2
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80025f6:	4938      	ldr	r1, [pc, #224]	; (80026d8 <HAL_GPIO_Init+0x2e0>)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3318      	adds	r3, #24
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002604:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <HAL_GPIO_Init+0x2e0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	43db      	mvns	r3, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002628:	4a2b      	ldr	r2, [pc, #172]	; (80026d8 <HAL_GPIO_Init+0x2e0>)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800262e:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <HAL_GPIO_Init+0x2e0>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	43db      	mvns	r3, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002652:	4a21      	ldr	r2, [pc, #132]	; (80026d8 <HAL_GPIO_Init+0x2e0>)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002658:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <HAL_GPIO_Init+0x2e0>)
 800265a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800267e:	4a16      	ldr	r2, [pc, #88]	; (80026d8 <HAL_GPIO_Init+0x2e0>)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8002686:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <HAL_GPIO_Init+0x2e0>)
 8002688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026ac:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <HAL_GPIO_Init+0x2e0>)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3301      	adds	r3, #1
 80026b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f47f ae9f 	bne.w	8002408 <HAL_GPIO_Init+0x10>
  }
}
 80026ca:	bf00      	nop
 80026cc:	bf00      	nop
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	4002f400 	.word	0x4002f400
 80026dc:	42020000 	.word	0x42020000
 80026e0:	42020400 	.word	0x42020400
 80026e4:	42020800 	.word	0x42020800
 80026e8:	42020c00 	.word	0x42020c00
 80026ec:	42021000 	.word	0x42021000
 80026f0:	42021400 	.word	0x42021400
 80026f4:	42021800 	.word	0x42021800

080026f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
 8002704:	4613      	mov	r3, r2
 8002706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002708:	787b      	ldrb	r3, [r7, #1]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002714:	e002      	b.n	800271c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4013      	ands	r3, r2
 8002740:	041a      	lsls	r2, r3, #16
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	43d9      	mvns	r1, r3
 8002746:	887b      	ldrh	r3, [r7, #2]
 8002748:	400b      	ands	r3, r1
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0c0      	b.n	80028f0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe fbf2 	bl	8000f6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2203      	movs	r2, #3
 800278c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f002 ffbb 	bl	8005710 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]
 800279e:	e03e      	b.n	800281e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	3311      	adds	r3, #17
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	440b      	add	r3, r1
 80027c2:	3310      	adds	r3, #16
 80027c4:	7bfa      	ldrb	r2, [r7, #15]
 80027c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	440b      	add	r3, r1
 80027d6:	3313      	adds	r3, #19
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	3320      	adds	r3, #32
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	3324      	adds	r3, #36	; 0x24
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	3301      	adds	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	791b      	ldrb	r3, [r3, #4]
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	429a      	cmp	r2, r3
 8002826:	d3bb      	bcc.n	80027a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002828:	2300      	movs	r3, #0
 800282a:	73fb      	strb	r3, [r7, #15]
 800282c:	e044      	b.n	80028b8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	f203 1353 	addw	r3, r3, #339	; 0x153
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002886:	7bfa      	ldrb	r2, [r7, #15]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	3301      	adds	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	791b      	ldrb	r3, [r3, #4]
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d3b5      	bcc.n	800282e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3304      	adds	r3, #4
 80028ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80028ce:	f002 ff3a 	bl	8005746 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7a9b      	ldrb	r3, [r3, #10]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d102      	bne.n	80028ee <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f805 	bl	80028f8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800291c:	b29b      	uxth	r3, r3
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002930:	b29b      	uxth	r3, r3
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295a:	6013      	str	r3, [r2, #0]
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40007000 	.word	0x40007000

0800296c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <HAL_PWREx_GetVoltageRange+0x18>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40007000 	.word	0x40007000

08002988 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002990:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002998:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800299a:	f000 f861 	bl	8002a60 <HAL_PWREx_SMPS_GetEffectiveMode>
 800299e:	4603      	mov	r3, r0
 80029a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a4:	d101      	bne.n	80029aa <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e03e      	b.n	8002a28 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80029aa:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b6:	d101      	bne.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e035      	b.n	8002a28 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d101      	bne.n	80029c8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e02f      	b.n	8002a28 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80029d0:	4917      	ldr	r1, [pc, #92]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80029d8:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	4a16      	ldr	r2, [pc, #88]	; (8002a38 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	09db      	lsrs	r3, r3, #7
 80029e6:	2232      	movs	r2, #50	; 0x32
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	08db      	lsrs	r3, r3, #3
 80029f4:	3301      	adds	r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029f8:	e002      	b.n	8002a00 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0c:	d102      	bne.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f2      	bne.n	80029fa <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a20:	d101      	bne.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e000      	b.n	8002a28 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40007000 	.word	0x40007000
 8002a34:	20000000 	.word	0x20000000
 8002a38:	0a7c5ac5 	.word	0x0a7c5ac5
 8002a3c:	cccccccd 	.word	0xcccccccd

08002a40 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4e:	6053      	str	r3, [r2, #4]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40007000 	.word	0x40007000

08002a60 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	e00a      	b.n	8002a94 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d103      	bne.n	8002a90 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	e001      	b.n	8002a94 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002a90:	2300      	movs	r3, #0
 8002a92:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002a94:	687b      	ldr	r3, [r7, #4]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40007000 	.word	0x40007000

08002aa8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d102      	bne.n	8002abc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	f000 bcc2 	b.w	8003440 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002abc:	4b99      	ldr	r3, [pc, #612]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac6:	4b97      	ldr	r3, [pc, #604]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80e9 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <HAL_RCC_OscConfig+0x4a>
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b0c      	cmp	r3, #12
 8002ae8:	f040 8083 	bne.w	8002bf2 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d17f      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002af2:	4b8c      	ldr	r3, [pc, #560]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d006      	beq.n	8002b0c <HAL_RCC_OscConfig+0x64>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f000 bc9a 	b.w	8003440 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b10:	4b84      	ldr	r3, [pc, #528]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_RCC_OscConfig+0x7e>
 8002b1c:	4b81      	ldr	r3, [pc, #516]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b24:	e005      	b.n	8002b32 <HAL_RCC_OscConfig+0x8a>
 8002b26:	4b7f      	ldr	r3, [pc, #508]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d224      	bcs.n	8002b80 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fe9c 	bl	8003878 <RCC_SetFlashLatencyFromMSIRange>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f000 bc7a 	b.w	8003440 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b4c:	4b75      	ldr	r3, [pc, #468]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a74      	ldr	r2, [pc, #464]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002b52:	f043 0308 	orr.w	r3, r3, #8
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	4b72      	ldr	r3, [pc, #456]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	496f      	ldr	r1, [pc, #444]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b6a:	4b6e      	ldr	r3, [pc, #440]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	496a      	ldr	r1, [pc, #424]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]
 8002b7e:	e026      	b.n	8002bce <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b80:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a67      	ldr	r2, [pc, #412]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002b86:	f043 0308 	orr.w	r3, r3, #8
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4b65      	ldr	r3, [pc, #404]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	4962      	ldr	r1, [pc, #392]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b9e:	4b61      	ldr	r3, [pc, #388]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	495d      	ldr	r1, [pc, #372]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fe5b 	bl	8003878 <RCC_SetFlashLatencyFromMSIRange>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f000 bc39 	b.w	8003440 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002bce:	f000 fe17 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4a54      	ldr	r2, [pc, #336]	; (8002d28 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bd8:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <HAL_RCC_OscConfig+0x284>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fe fb3f 	bl	8001260 <HAL_InitTick>
 8002be2:	4603      	mov	r3, r0
 8002be4:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d060      	beq.n	8002cae <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	f000 bc27 	b.w	8003440 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d039      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a49      	ldr	r2, [pc, #292]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c06:	f7fe fb67 	bl	80012d8 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c0c:	e00f      	b.n	8002c2e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c0e:	f7fe fb63 	bl	80012d8 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d908      	bls.n	8002c2e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c1c:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	f000 bc09 	b.w	8003440 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0e9      	beq.n	8002c0e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c3a:	4b3a      	ldr	r3, [pc, #232]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a39      	ldr	r2, [pc, #228]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002c40:	f043 0308 	orr.w	r3, r3, #8
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	4934      	ldr	r1, [pc, #208]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c58:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	492f      	ldr	r1, [pc, #188]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
 8002c6c:	e020      	b.n	8002cb0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a2c      	ldr	r2, [pc, #176]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fb2d 	bl	80012d8 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c80:	e00e      	b.n	8002ca0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c82:	f7fe fb29 	bl	80012d8 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d907      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c90:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e3cf      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ca0:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ea      	bne.n	8002c82 <HAL_RCC_OscConfig+0x1da>
 8002cac:	e000      	b.n	8002cb0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d07e      	beq.n	8002dba <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d005      	beq.n	8002cce <HAL_RCC_OscConfig+0x226>
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b0c      	cmp	r3, #12
 8002cc6:	d10e      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d10b      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d06e      	beq.n	8002db8 <HAL_RCC_OscConfig+0x310>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d16a      	bne.n	8002db8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e3ac      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x256>
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0b      	ldr	r2, [pc, #44]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	e024      	b.n	8002d48 <HAL_RCC_OscConfig+0x2a0>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d06:	d113      	bne.n	8002d30 <HAL_RCC_OscConfig+0x288>
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a05      	ldr	r2, [pc, #20]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a02      	ldr	r2, [pc, #8]	; (8002d24 <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	e012      	b.n	8002d48 <HAL_RCC_OscConfig+0x2a0>
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	20000004 	.word	0x20000004
 8002d30:	4b8b      	ldr	r3, [pc, #556]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a8a      	ldr	r2, [pc, #552]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b88      	ldr	r3, [pc, #544]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a87      	ldr	r2, [pc, #540]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d019      	beq.n	8002d84 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fac2 	bl	80012d8 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d56:	e00e      	b.n	8002d76 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d58:	f7fe fabe 	bl	80012d8 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	; 0x64
 8002d64:	d907      	bls.n	8002d76 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d66:	4b7e      	ldr	r3, [pc, #504]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e364      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d76:	4b7a      	ldr	r3, [pc, #488]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0ea      	beq.n	8002d58 <HAL_RCC_OscConfig+0x2b0>
 8002d82:	e01a      	b.n	8002dba <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe faa8 	bl	80012d8 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d8a:	e00e      	b.n	8002daa <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7fe faa4 	bl	80012d8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d907      	bls.n	8002daa <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d9a:	4b71      	ldr	r3, [pc, #452]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e34a      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002daa:	4b6d      	ldr	r3, [pc, #436]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1ea      	bne.n	8002d8c <HAL_RCC_OscConfig+0x2e4>
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d06c      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x330>
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d119      	bne.n	8002e06 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d116      	bne.n	8002e06 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd8:	4b61      	ldr	r3, [pc, #388]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_OscConfig+0x348>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e327      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df0:	4b5b      	ldr	r3, [pc, #364]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	061b      	lsls	r3, r3, #24
 8002dfe:	4958      	ldr	r1, [pc, #352]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e04:	e04c      	b.n	8002ea0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d029      	beq.n	8002e62 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0e:	4b54      	ldr	r3, [pc, #336]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a53      	ldr	r2, [pc, #332]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fa5d 	bl	80012d8 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e20:	e00e      	b.n	8002e40 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e22:	f7fe fa59 	bl	80012d8 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d907      	bls.n	8002e40 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e30:	4b4b      	ldr	r3, [pc, #300]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e2ff      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e40:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ea      	beq.n	8002e22 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4c:	4b44      	ldr	r3, [pc, #272]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	061b      	lsls	r3, r3, #24
 8002e5a:	4941      	ldr	r1, [pc, #260]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
 8002e60:	e01e      	b.n	8002ea0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e62:	4b3f      	ldr	r3, [pc, #252]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a3e      	ldr	r2, [pc, #248]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fa33 	bl	80012d8 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e74:	e00e      	b.n	8002e94 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e76:	f7fe fa2f 	bl	80012d8 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d907      	bls.n	8002e94 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e84:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e2d5      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e94:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ea      	bne.n	8002e76 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d062      	beq.n	8002f72 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d038      	beq.n	8002f26 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d108      	bne.n	8002ece <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002ebc:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec2:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002ec4:	f023 0310 	bic.w	r3, r3, #16
 8002ec8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002ecc:	e007      	b.n	8002ede <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed4:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002ed6:	f043 0310 	orr.w	r3, r3, #16
 8002eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eee:	f7fe f9f3 	bl	80012d8 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef4:	e00f      	b.n	8002f16 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef6:	f7fe f9ef 	bl	80012d8 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b07      	cmp	r3, #7
 8002f02:	d908      	bls.n	8002f16 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f04:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e294      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0e8      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x44e>
 8002f24:	e025      	b.n	8002f72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2c:	4a0c      	ldr	r2, [pc, #48]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f36:	f7fe f9cf 	bl	80012d8 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f3c:	e012      	b.n	8002f64 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7fe f9cb 	bl	80012d8 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b07      	cmp	r3, #7
 8002f4a:	d90b      	bls.n	8002f64 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <HAL_RCC_OscConfig+0x4b8>)
 8002f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d004      	beq.n	8002f64 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e270      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f64:	4ba8      	ldr	r3, [pc, #672]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8002f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1e5      	bne.n	8002f3e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 812d 	beq.w	80031da <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f80:	2300      	movs	r3, #0
 8002f82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f84:	4ba0      	ldr	r3, [pc, #640]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10d      	bne.n	8002fac <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f90:	4b9d      	ldr	r3, [pc, #628]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	4a9c      	ldr	r2, [pc, #624]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8002f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f9c:	4b9a      	ldr	r3, [pc, #616]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fac:	4b97      	ldr	r3, [pc, #604]	; (800320c <HAL_RCC_OscConfig+0x764>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d11e      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb8:	4b94      	ldr	r3, [pc, #592]	; (800320c <HAL_RCC_OscConfig+0x764>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a93      	ldr	r2, [pc, #588]	; (800320c <HAL_RCC_OscConfig+0x764>)
 8002fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc4:	f7fe f988 	bl	80012d8 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fca:	e00e      	b.n	8002fea <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fcc:	f7fe f984 	bl	80012d8 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d907      	bls.n	8002fea <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fda:	4b8c      	ldr	r3, [pc, #560]	; (800320c <HAL_RCC_OscConfig+0x764>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e22a      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fea:	4b88      	ldr	r3, [pc, #544]	; (800320c <HAL_RCC_OscConfig+0x764>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0ea      	beq.n	8002fcc <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d01f      	beq.n	8003042 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d010      	beq.n	8003030 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800300e:	4b7e      	ldr	r3, [pc, #504]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	4a7c      	ldr	r2, [pc, #496]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800301e:	4b7a      	ldr	r3, [pc, #488]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	4a78      	ldr	r2, [pc, #480]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800302e:	e018      	b.n	8003062 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003030:	4b75      	ldr	r3, [pc, #468]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	4a74      	ldr	r2, [pc, #464]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003040:	e00f      	b.n	8003062 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003042:	4b71      	ldr	r3, [pc, #452]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	4a6f      	ldr	r2, [pc, #444]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003052:	4b6d      	ldr	r3, [pc, #436]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	4a6b      	ldr	r2, [pc, #428]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 800305a:	f023 0304 	bic.w	r3, r3, #4
 800305e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d068      	beq.n	800313c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306a:	f7fe f935 	bl	80012d8 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003070:	e011      	b.n	8003096 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7fe f931 	bl	80012d8 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d908      	bls.n	8003096 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003084:	4b60      	ldr	r3, [pc, #384]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e1d4      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003096:	4b5c      	ldr	r3, [pc, #368]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0e6      	beq.n	8003072 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d022      	beq.n	80030f6 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030b0:	4b55      	ldr	r3, [pc, #340]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	4a54      	ldr	r2, [pc, #336]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 80030b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80030c0:	e011      	b.n	80030e6 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fe f909 	bl	80012d8 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d908      	bls.n	80030e6 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80030d4:	4b4c      	ldr	r3, [pc, #304]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1ac      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80030e6:	4b48      	ldr	r3, [pc, #288]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0e6      	beq.n	80030c2 <HAL_RCC_OscConfig+0x61a>
 80030f4:	e068      	b.n	80031c8 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030f6:	4b44      	ldr	r3, [pc, #272]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	4a42      	ldr	r2, [pc, #264]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 80030fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003106:	e011      	b.n	800312c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7fe f8e6 	bl	80012d8 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	; 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d908      	bls.n	800312c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800311a:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e189      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e6      	bne.n	8003108 <HAL_RCC_OscConfig+0x660>
 800313a:	e045      	b.n	80031c8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fe f8cc 	bl	80012d8 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003142:	e011      	b.n	8003168 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003144:	f7fe f8c8 	bl	80012d8 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d908      	bls.n	8003168 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003156:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e16b      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003168:	4b27      	ldr	r3, [pc, #156]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e6      	bne.n	8003144 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003176:	4b24      	ldr	r3, [pc, #144]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003180:	2b00      	cmp	r3, #0
 8003182:	d021      	beq.n	80031c8 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003184:	4b20      	ldr	r3, [pc, #128]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 800318c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003194:	e011      	b.n	80031ba <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003196:	f7fe f89f 	bl	80012d8 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d908      	bls.n	80031ba <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031a8:	4b17      	ldr	r3, [pc, #92]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e142      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e6      	bne.n	8003196 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031c8:	7ffb      	ldrb	r3, [r7, #31]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d105      	bne.n	80031da <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ce:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	4a0d      	ldr	r2, [pc, #52]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 80031d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d04f      	beq.n	8003286 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d028      	beq.n	8003240 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 80031f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031f4:	4a04      	ldr	r2, [pc, #16]	; (8003208 <HAL_RCC_OscConfig+0x760>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fe f86b 	bl	80012d8 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003204:	e014      	b.n	8003230 <HAL_RCC_OscConfig+0x788>
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003210:	f7fe f862 	bl	80012d8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d908      	bls.n	8003230 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800321e:	4b8a      	ldr	r3, [pc, #552]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 8003220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e107      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003230:	4b85      	ldr	r3, [pc, #532]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 8003232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0e8      	beq.n	8003210 <HAL_RCC_OscConfig+0x768>
 800323e:	e022      	b.n	8003286 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003240:	4b81      	ldr	r3, [pc, #516]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 8003242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003246:	4a80      	ldr	r2, [pc, #512]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003250:	f7fe f842 	bl	80012d8 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003256:	e00f      	b.n	8003278 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003258:	f7fe f83e 	bl	80012d8 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d908      	bls.n	8003278 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003266:	4b78      	ldr	r3, [pc, #480]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 8003268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e0e3      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003278:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 800327a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1e8      	bne.n	8003258 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80d7 	beq.w	800343e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003290:	4b6d      	ldr	r3, [pc, #436]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b0c      	cmp	r3, #12
 800329a:	f000 8091 	beq.w	80033c0 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d166      	bne.n	8003374 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	4b68      	ldr	r3, [pc, #416]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a67      	ldr	r2, [pc, #412]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 80032ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7fe f811 	bl	80012d8 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b8:	e00e      	b.n	80032d8 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fe f80d 	bl	80012d8 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d907      	bls.n	80032d8 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c8:	4b5f      	ldr	r3, [pc, #380]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0b3      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d8:	4b5b      	ldr	r3, [pc, #364]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1ea      	bne.n	80032ba <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e4:	4b58      	ldr	r3, [pc, #352]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	4b58      	ldr	r3, [pc, #352]	; (800344c <HAL_RCC_OscConfig+0x9a4>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032f4:	3a01      	subs	r2, #1
 80032f6:	0112      	lsls	r2, r2, #4
 80032f8:	4311      	orrs	r1, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032fe:	0212      	lsls	r2, r2, #8
 8003300:	4311      	orrs	r1, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003306:	0852      	lsrs	r2, r2, #1
 8003308:	3a01      	subs	r2, #1
 800330a:	0552      	lsls	r2, r2, #21
 800330c:	4311      	orrs	r1, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003312:	0852      	lsrs	r2, r2, #1
 8003314:	3a01      	subs	r2, #1
 8003316:	0652      	lsls	r2, r2, #25
 8003318:	4311      	orrs	r1, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800331e:	06d2      	lsls	r2, r2, #27
 8003320:	430a      	orrs	r2, r1
 8003322:	4949      	ldr	r1, [pc, #292]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 8003324:	4313      	orrs	r3, r2
 8003326:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003328:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a46      	ldr	r2, [pc, #280]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 800332e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003332:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003334:	4b44      	ldr	r3, [pc, #272]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4a43      	ldr	r2, [pc, #268]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 800333a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fd ffca 	bl	80012d8 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003346:	e00e      	b.n	8003366 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003348:	f7fd ffc6 	bl	80012d8 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d907      	bls.n	8003366 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003356:	4b3c      	ldr	r3, [pc, #240]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e06c      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003366:	4b38      	ldr	r3, [pc, #224]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0ea      	beq.n	8003348 <HAL_RCC_OscConfig+0x8a0>
 8003372:	e064      	b.n	800343e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003374:	4b34      	ldr	r3, [pc, #208]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a33      	ldr	r2, [pc, #204]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 800337a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800337e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fd ffaa 	bl	80012d8 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003386:	e00e      	b.n	80033a6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fd ffa6 	bl	80012d8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d907      	bls.n	80033a6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003396:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e04c      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a6:	4b28      	ldr	r3, [pc, #160]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1ea      	bne.n	8003388 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033b2:	4b25      	ldr	r3, [pc, #148]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	4924      	ldr	r1, [pc, #144]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 80033b8:	4b25      	ldr	r3, [pc, #148]	; (8003450 <HAL_RCC_OscConfig+0x9a8>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	60cb      	str	r3, [r1, #12]
 80033be:	e03e      	b.n	800343e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e039      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80033cc:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_RCC_OscConfig+0x9a0>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f003 0203 	and.w	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	429a      	cmp	r2, r3
 80033de:	d12c      	bne.n	800343a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	3b01      	subs	r3, #1
 80033ec:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d123      	bne.n	800343a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d11b      	bne.n	800343a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d113      	bne.n	800343a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	3b01      	subs	r3, #1
 8003420:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d109      	bne.n	800343a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	3b01      	subs	r3, #1
 8003434:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d001      	beq.n	800343e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	019f800c 	.word	0x019f800c
 8003450:	feeefffc 	.word	0xfeeefffc

08003454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e11c      	b.n	80036a6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800346c:	4b90      	ldr	r3, [pc, #576]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d910      	bls.n	800349c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b8d      	ldr	r3, [pc, #564]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 020f 	bic.w	r2, r3, #15
 8003482:	498b      	ldr	r1, [pc, #556]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b89      	ldr	r3, [pc, #548]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e104      	b.n	80036a6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d010      	beq.n	80034ca <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	4b81      	ldr	r3, [pc, #516]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d908      	bls.n	80034ca <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b8:	4b7e      	ldr	r3, [pc, #504]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	497b      	ldr	r1, [pc, #492]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8085 	beq.w	80035e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d11f      	bne.n	8003520 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e0:	4b74      	ldr	r3, [pc, #464]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0da      	b.n	80036a6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80034f0:	f000 fa26 	bl	8003940 <RCC_GetSysClockFreqFromPLLSource>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4a6f      	ldr	r2, [pc, #444]	; (80036b8 <HAL_RCC_ClockConfig+0x264>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d947      	bls.n	800358e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80034fe:	4b6d      	ldr	r3, [pc, #436]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d141      	bne.n	800358e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800350a:	4b6a      	ldr	r3, [pc, #424]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003512:	4a68      	ldr	r2, [pc, #416]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003518:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	e036      	b.n	800358e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b02      	cmp	r3, #2
 8003526:	d107      	bne.n	8003538 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003528:	4b62      	ldr	r3, [pc, #392]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d115      	bne.n	8003560 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0b6      	b.n	80036a6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d107      	bne.n	8003550 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003540:	4b5c      	ldr	r3, [pc, #368]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0aa      	b.n	80036a6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003550:	4b58      	ldr	r3, [pc, #352]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0a2      	b.n	80036a6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003560:	f000 f8b0 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003564:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4a53      	ldr	r2, [pc, #332]	; (80036b8 <HAL_RCC_ClockConfig+0x264>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d90f      	bls.n	800358e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800356e:	4b51      	ldr	r3, [pc, #324]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800357a:	4b4e      	ldr	r3, [pc, #312]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003582:	4a4c      	ldr	r2, [pc, #304]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003588:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800358e:	4b49      	ldr	r3, [pc, #292]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4946      	ldr	r1, [pc, #280]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a0:	f7fd fe9a 	bl	80012d8 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	e013      	b.n	80035d0 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7fd fe96 	bl	80012d8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d90a      	bls.n	80035d0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 020c 	and.w	r2, r3, #12
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e06a      	b.n	80036a6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d0:	4b38      	ldr	r3, [pc, #224]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 020c 	and.w	r2, r3, #12
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	429a      	cmp	r2, r3
 80035e0:	d1e2      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b80      	cmp	r3, #128	; 0x80
 80035e6:	d105      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035e8:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4a31      	ldr	r2, [pc, #196]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 80035ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f2:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d010      	beq.n	8003622 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800360c:	429a      	cmp	r2, r3
 800360e:	d208      	bcs.n	8003622 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003610:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4925      	ldr	r1, [pc, #148]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003622:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d210      	bcs.n	8003652 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003630:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f023 020f 	bic.w	r2, r3, #15
 8003638:	491d      	ldr	r1, [pc, #116]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_RCC_ClockConfig+0x25c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d001      	beq.n	8003652 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e029      	b.n	80036a6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365e:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	4912      	ldr	r1, [pc, #72]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800366c:	4313      	orrs	r3, r2
 800366e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800367c:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	490a      	ldr	r1, [pc, #40]	; (80036b4 <HAL_RCC_ClockConfig+0x260>)
 800368c:	4313      	orrs	r3, r2
 800368e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003690:	f000 f8b6 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003694:	4603      	mov	r3, r0
 8003696:	4a09      	ldr	r2, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x268>)
 8003698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd fdde 	bl	8001260 <HAL_InitTick>
 80036a4:	4603      	mov	r3, r0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40022000 	.word	0x40022000
 80036b4:	40021000 	.word	0x40021000
 80036b8:	04c4b400 	.word	0x04c4b400
 80036bc:	20000000 	.word	0x20000000
 80036c0:	20000004 	.word	0x20000004

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036d2:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036dc:	4b44      	ldr	r3, [pc, #272]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x34>
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d121      	bne.n	8003736 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d11e      	bne.n	8003736 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036f8:	4b3d      	ldr	r3, [pc, #244]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d107      	bne.n	8003714 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003704:	4b3a      	ldr	r3, [pc, #232]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	e005      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003714:	4b36      	ldr	r3, [pc, #216]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003720:	4a34      	ldr	r2, [pc, #208]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x130>)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003728:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10d      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003734:	e00a      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b04      	cmp	r3, #4
 800373a:	d102      	bne.n	8003742 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800373c:	4b2e      	ldr	r3, [pc, #184]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x134>)
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	e004      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b08      	cmp	r3, #8
 8003746:	d101      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003748:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <HAL_RCC_GetSysClockFreq+0x138>)
 800374a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d146      	bne.n	80037e0 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003752:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800375c:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x12c>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	3301      	adds	r3, #1
 8003768:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b02      	cmp	r3, #2
 800376e:	d003      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0xb4>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d00d      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0xce>
 8003776:	e019      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003778:	4a1f      	ldr	r2, [pc, #124]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x134>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003780:	4a1b      	ldr	r2, [pc, #108]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003782:	68d2      	ldr	r2, [r2, #12]
 8003784:	0a12      	lsrs	r2, r2, #8
 8003786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800378a:	fb02 f303 	mul.w	r3, r2, r3
 800378e:	617b      	str	r3, [r7, #20]
        break;
 8003790:	e019      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003792:	4a1a      	ldr	r2, [pc, #104]	; (80037fc <HAL_RCC_GetSysClockFreq+0x138>)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	fbb2 f3f3 	udiv	r3, r2, r3
 800379a:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x12c>)
 800379c:	68d2      	ldr	r2, [r2, #12]
 800379e:	0a12      	lsrs	r2, r2, #8
 80037a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037a4:	fb02 f303 	mul.w	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]
        break;
 80037aa:	e00c      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037b6:	68d2      	ldr	r2, [r2, #12]
 80037b8:	0a12      	lsrs	r2, r2, #8
 80037ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	617b      	str	r3, [r7, #20]
        break;
 80037c4:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80037c6:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	0e5b      	lsrs	r3, r3, #25
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	3301      	adds	r3, #1
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037e0:	69bb      	ldr	r3, [r7, #24]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3724      	adds	r7, #36	; 0x24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	08007ee8 	.word	0x08007ee8
 80037f8:	00f42400 	.word	0x00f42400
 80037fc:	007a1200 	.word	0x007a1200

08003800 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003804:	f7ff ff5e 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003808:	4602      	mov	r2, r0
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <HAL_RCC_GetHCLKFreq+0x20>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	4903      	ldr	r1, [pc, #12]	; (8003824 <HAL_RCC_GetHCLKFreq+0x24>)
 8003816:	5ccb      	ldrb	r3, [r1, r3]
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	08007ed0 	.word	0x08007ed0

08003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800382c:	f7ff ffe8 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4903      	ldr	r1, [pc, #12]	; (800384c <HAL_RCC_GetPCLK1Freq+0x24>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	08007ee0 	.word	0x08007ee0

08003850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003854:	f7ff ffd4 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0adb      	lsrs	r3, r3, #11
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4903      	ldr	r1, [pc, #12]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000
 8003874:	08007ee0 	.word	0x08007ee0

08003878 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003884:	4b2c      	ldr	r3, [pc, #176]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003890:	f7ff f86c 	bl	800296c <HAL_PWREx_GetVoltageRange>
 8003894:	6138      	str	r0, [r7, #16]
 8003896:	e014      	b.n	80038c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003898:	4b27      	ldr	r3, [pc, #156]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800389a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389c:	4a26      	ldr	r2, [pc, #152]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800389e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a2:	6593      	str	r3, [r2, #88]	; 0x58
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038b0:	f7ff f85c 	bl	800296c <HAL_PWREx_GetVoltageRange>
 80038b4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038b6:	4b20      	ldr	r3, [pc, #128]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	4a1f      	ldr	r2, [pc, #124]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ce:	d10b      	bne.n	80038e8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b80      	cmp	r3, #128	; 0x80
 80038d4:	d919      	bls.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2ba0      	cmp	r3, #160	; 0xa0
 80038da:	d902      	bls.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038dc:	2302      	movs	r3, #2
 80038de:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80038e0:	e013      	b.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038e2:	2301      	movs	r3, #1
 80038e4:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80038e6:	e010      	b.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b80      	cmp	r3, #128	; 0x80
 80038ec:	d902      	bls.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038ee:	2303      	movs	r3, #3
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	e00a      	b.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b80      	cmp	r3, #128	; 0x80
 80038f8:	d102      	bne.n	8003900 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038fa:	2302      	movs	r3, #2
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e004      	b.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b70      	cmp	r3, #112	; 0x70
 8003904:	d101      	bne.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003906:	2301      	movs	r3, #1
 8003908:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 020f 	bic.w	r2, r3, #15
 8003912:	490a      	ldr	r1, [pc, #40]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000
 800393c:	40022000 	.word	0x40022000

08003940 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003946:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003950:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3301      	adds	r3, #1
 800395c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b03      	cmp	r3, #3
 8003962:	d015      	beq.n	8003990 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b03      	cmp	r3, #3
 8003968:	d839      	bhi.n	80039de <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d01c      	beq.n	80039aa <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d133      	bne.n	80039de <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003976:	4a26      	ldr	r2, [pc, #152]	; (8003a10 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	4a23      	ldr	r2, [pc, #140]	; (8003a0c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003980:	68d2      	ldr	r2, [r2, #12]
 8003982:	0a12      	lsrs	r2, r2, #8
 8003984:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003988:	fb02 f303 	mul.w	r3, r2, r3
 800398c:	613b      	str	r3, [r7, #16]
      break;
 800398e:	e029      	b.n	80039e4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003990:	4a20      	ldr	r2, [pc, #128]	; (8003a14 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	fbb2 f3f3 	udiv	r3, r2, r3
 8003998:	4a1c      	ldr	r2, [pc, #112]	; (8003a0c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800399a:	68d2      	ldr	r2, [r2, #12]
 800399c:	0a12      	lsrs	r2, r2, #8
 800399e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	613b      	str	r3, [r7, #16]
      break;
 80039a8:	e01c      	b.n	80039e4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039aa:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d107      	bne.n	80039c6 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039bc:	0a1b      	lsrs	r3, r3, #8
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	e005      	b.n	80039d2 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039c6:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	091b      	lsrs	r3, r3, #4
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80039d2:	4a11      	ldr	r2, [pc, #68]	; (8003a18 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	613b      	str	r3, [r7, #16]
        break;
 80039dc:	e002      	b.n	80039e4 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
      break;
 80039e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	0e5b      	lsrs	r3, r3, #25
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	3301      	adds	r3, #1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80039fe:	683b      	ldr	r3, [r7, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	00f42400 	.word	0x00f42400
 8003a14:	007a1200 	.word	0x007a1200
 8003a18:	08007ee8 	.word	0x08007ee8

08003a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a24:	2300      	movs	r3, #0
 8003a26:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a28:	2300      	movs	r3, #0
 8003a2a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d040      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a3c:	2b80      	cmp	r3, #128	; 0x80
 8003a3e:	d02a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a40:	2b80      	cmp	r3, #128	; 0x80
 8003a42:	d825      	bhi.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a44:	2b60      	cmp	r3, #96	; 0x60
 8003a46:	d026      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a48:	2b60      	cmp	r3, #96	; 0x60
 8003a4a:	d821      	bhi.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d006      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d81d      	bhi.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d009      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d010      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003a5c:	e018      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a5e:	4b8f      	ldr	r3, [pc, #572]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	4a8e      	ldr	r2, [pc, #568]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a68:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a6a:	e015      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fb56 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a7c:	e00c      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3320      	adds	r3, #32
 8003a82:	2100      	movs	r1, #0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fc33 	bl	80042f0 <RCCEx_PLLSAI2_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a8e:	e003      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	77fb      	strb	r3, [r7, #31]
        break;
 8003a94:	e000      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a98:	7ffb      	ldrb	r3, [r7, #31]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10b      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a9e:	4b7f      	ldr	r3, [pc, #508]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aa4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aac:	497b      	ldr	r1, [pc, #492]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ab4:	e001      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab6:	7ffb      	ldrb	r3, [r7, #31]
 8003ab8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d047      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ace:	d030      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad4:	d82a      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ada:	d02a      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae0:	d824      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae6:	d008      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aec:	d81e      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af6:	d010      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003af8:	e018      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003afa:	4b68      	ldr	r3, [pc, #416]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	4a67      	ldr	r2, [pc, #412]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b04:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b06:	e015      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fb08 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b18:	e00c      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3320      	adds	r3, #32
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fbe5 	bl	80042f0 <RCCEx_PLLSAI2_Config>
 8003b26:	4603      	mov	r3, r0
 8003b28:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b2a:	e003      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	77fb      	strb	r3, [r7, #31]
        break;
 8003b30:	e000      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b34:	7ffb      	ldrb	r3, [r7, #31]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b3a:	4b58      	ldr	r3, [pc, #352]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	4954      	ldr	r1, [pc, #336]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003b50:	e001      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b52:	7ffb      	ldrb	r3, [r7, #31]
 8003b54:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80ab 	beq.w	8003cba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b64:	2300      	movs	r3, #0
 8003b66:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b68:	4b4c      	ldr	r3, [pc, #304]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10d      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b74:	4b49      	ldr	r3, [pc, #292]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	4a48      	ldr	r2, [pc, #288]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b80:	4b46      	ldr	r3, [pc, #280]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b90:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a42      	ldr	r2, [pc, #264]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b9c:	f7fd fb9c 	bl	80012d8 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ba2:	e00f      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba4:	f7fd fb98 	bl	80012d8 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d908      	bls.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bb2:	4b3b      	ldr	r3, [pc, #236]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003bc2:	e006      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bc4:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0e9      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003bd2:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003bd4:	7ffb      	ldrb	r3, [r7, #31]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d164      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bda:	4b30      	ldr	r3, [pc, #192]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be4:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01f      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d019      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bf8:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c02:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c04:	4b25      	ldr	r3, [pc, #148]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	4a24      	ldr	r2, [pc, #144]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c14:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	4a20      	ldr	r2, [pc, #128]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c24:	4a1d      	ldr	r2, [pc, #116]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01f      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fd fb4f 	bl	80012d8 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c3c:	e012      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fd fb4b 	bl	80012d8 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d909      	bls.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c50:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003c62:	e007      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0e5      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003c72:	e000      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003c74:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003c76:	7ffb      	ldrb	r3, [r7, #31]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10c      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8c:	4903      	ldr	r1, [pc, #12]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c94:	e008      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c96:	7ffb      	ldrb	r3, [r7, #31]
 8003c98:	77bb      	strb	r3, [r7, #30]
 8003c9a:	e005      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca4:	7ffb      	ldrb	r3, [r7, #31]
 8003ca6:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d105      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cae:	4b9c      	ldr	r3, [pc, #624]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb2:	4a9b      	ldr	r2, [pc, #620]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cc6:	4b96      	ldr	r3, [pc, #600]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f023 0203 	bic.w	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	4992      	ldr	r1, [pc, #584]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ce8:	4b8d      	ldr	r3, [pc, #564]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f023 020c 	bic.w	r2, r3, #12
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	498a      	ldr	r1, [pc, #552]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d0a:	4b85      	ldr	r3, [pc, #532]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	4981      	ldr	r1, [pc, #516]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d2c:	4b7c      	ldr	r3, [pc, #496]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	4979      	ldr	r1, [pc, #484]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d4e:	4b74      	ldr	r3, [pc, #464]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5c:	4970      	ldr	r1, [pc, #448]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d70:	4b6b      	ldr	r3, [pc, #428]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7e:	4968      	ldr	r1, [pc, #416]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d92:	4b63      	ldr	r3, [pc, #396]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da0:	495f      	ldr	r1, [pc, #380]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003db4:	4b5a      	ldr	r3, [pc, #360]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc2:	4957      	ldr	r1, [pc, #348]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003dd6:	4b52      	ldr	r3, [pc, #328]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ddc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de4:	494e      	ldr	r1, [pc, #312]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d031      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e00:	d00e      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003e02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e06:	d814      	bhi.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d015      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e10:	d10f      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e12:	4b43      	ldr	r3, [pc, #268]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	4a42      	ldr	r2, [pc, #264]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e1c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e1e:	e00c      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3304      	adds	r3, #4
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f97c 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e30:	e003      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	77fb      	strb	r3, [r7, #31]
        break;
 8003e36:	e000      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3a:	7ffb      	ldrb	r3, [r7, #31]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e40:	4b37      	ldr	r3, [pc, #220]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e4e:	4934      	ldr	r1, [pc, #208]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e56:	e001      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	7ffb      	ldrb	r3, [r7, #31]
 8003e5a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e68:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e76:	492a      	ldr	r1, [pc, #168]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e8a:	4b25      	ldr	r3, [pc, #148]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e98:	4921      	ldr	r1, [pc, #132]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eac:	4b1c      	ldr	r3, [pc, #112]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eba:	4919      	ldr	r1, [pc, #100]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ece:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ed4:	f023 0203 	bic.w	r2, r3, #3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003edc:	4910      	ldr	r1, [pc, #64]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d02b      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efe:	4908      	ldr	r1, [pc, #32]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f0e:	d109      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f10:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4a02      	ldr	r2, [pc, #8]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f1a:	60d3      	str	r3, [r2, #12]
 8003f1c:	e014      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003f1e:	bf00      	nop
 8003f20:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3304      	adds	r3, #4
 8003f32:	2101      	movs	r1, #1
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 f8f5 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003f3e:	7ffb      	ldrb	r3, [r7, #31]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8003f44:	7ffb      	ldrb	r3, [r7, #31]
 8003f46:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d04a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f5c:	d108      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003f5e:	4b70      	ldr	r3, [pc, #448]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f64:	4a6e      	ldr	r2, [pc, #440]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003f6e:	e012      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003f70:	4b6b      	ldr	r3, [pc, #428]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7e:	4968      	ldr	r1, [pc, #416]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f86:	4b66      	ldr	r3, [pc, #408]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f8c:	4a64      	ldr	r2, [pc, #400]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f92:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f9e:	d10d      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f8bc 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003fb0:	7ffb      	ldrb	r3, [r7, #31]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d019      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003fb6:	7ffb      	ldrb	r3, [r7, #31]
 8003fb8:	77bb      	strb	r3, [r7, #30]
 8003fba:	e016      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc4:	d106      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc6:	4b56      	ldr	r3, [pc, #344]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	4a55      	ldr	r2, [pc, #340]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fd0:	60d3      	str	r3, [r2, #12]
 8003fd2:	e00a      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fdc:	d105      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fde:	4b50      	ldr	r3, [pc, #320]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4a4f      	ldr	r2, [pc, #316]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d028      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ff6:	4b4a      	ldr	r3, [pc, #296]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004004:	4946      	ldr	r1, [pc, #280]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004014:	d106      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004016:	4b42      	ldr	r3, [pc, #264]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	4a41      	ldr	r2, [pc, #260]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800401c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004020:	60d3      	str	r3, [r2, #12]
 8004022:	e011      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800402c:	d10c      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3304      	adds	r3, #4
 8004032:	2101      	movs	r1, #1
 8004034:	4618      	mov	r0, r3
 8004036:	f000 f875 	bl	8004124 <RCCEx_PLLSAI1_Config>
 800403a:	4603      	mov	r3, r0
 800403c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800403e:	7ffb      	ldrb	r3, [r7, #31]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004044:	7ffb      	ldrb	r3, [r7, #31]
 8004046:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01e      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004054:	4b32      	ldr	r3, [pc, #200]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004064:	492e      	ldr	r1, [pc, #184]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004076:	d10c      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	2102      	movs	r1, #2
 800407e:	4618      	mov	r0, r3
 8004080:	f000 f850 	bl	8004124 <RCCEx_PLLSAI1_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004088:	7ffb      	ldrb	r3, [r7, #31]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800408e:	7ffb      	ldrb	r3, [r7, #31]
 8004090:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00b      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800409e:	4b20      	ldr	r3, [pc, #128]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040a4:	f023 0204 	bic.w	r2, r3, #4
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ae:	491c      	ldr	r1, [pc, #112]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040c2:	4b17      	ldr	r3, [pc, #92]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040c8:	f023 0218 	bic.w	r2, r3, #24
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	4913      	ldr	r1, [pc, #76]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d017      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80040e6:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f6:	490a      	ldr	r1, [pc, #40]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004104:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004108:	d105      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	4a04      	ldr	r2, [pc, #16]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004114:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004116:	7fbb      	ldrb	r3, [r7, #30]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3720      	adds	r7, #32
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000

08004124 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d018      	beq.n	800416c <RCCEx_PLLSAI1_Config+0x48>
 800413a:	2b03      	cmp	r3, #3
 800413c:	d81f      	bhi.n	800417e <RCCEx_PLLSAI1_Config+0x5a>
 800413e:	2b01      	cmp	r3, #1
 8004140:	d002      	beq.n	8004148 <RCCEx_PLLSAI1_Config+0x24>
 8004142:	2b02      	cmp	r3, #2
 8004144:	d009      	beq.n	800415a <RCCEx_PLLSAI1_Config+0x36>
 8004146:	e01a      	b.n	800417e <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004148:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d117      	bne.n	8004184 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004158:	e014      	b.n	8004184 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800415a:	4b61      	ldr	r3, [pc, #388]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004162:	2b00      	cmp	r3, #0
 8004164:	d110      	bne.n	8004188 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800416a:	e00d      	b.n	8004188 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800416c:	4b5c      	ldr	r3, [pc, #368]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800417c:	e006      	b.n	800418c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
      break;
 8004182:	e004      	b.n	800418e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004184:	bf00      	nop
 8004186:	e002      	b.n	800418e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004188:	bf00      	nop
 800418a:	e000      	b.n	800418e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800418c:	bf00      	nop
  }

  if (status == HAL_OK)
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 809f 	bne.w	80042d4 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004196:	4b52      	ldr	r3, [pc, #328]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a51      	ldr	r2, [pc, #324]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800419c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a2:	f7fd f899 	bl	80012d8 <HAL_GetTick>
 80041a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041a8:	e00f      	b.n	80041ca <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041aa:	f7fd f895 	bl	80012d8 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d908      	bls.n	80041ca <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041b8:	4b49      	ldr	r3, [pc, #292]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d009      	beq.n	80041d8 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041c8:	e006      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041ca:	4b45      	ldr	r3, [pc, #276]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e9      	bne.n	80041aa <RCCEx_PLLSAI1_Config+0x86>
 80041d6:	e000      	b.n	80041da <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80041d8:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d179      	bne.n	80042d4 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d116      	bne.n	8004214 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041e6:	4b3e      	ldr	r3, [pc, #248]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	4b3e      	ldr	r3, [pc, #248]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1c0>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6892      	ldr	r2, [r2, #8]
 80041f2:	0211      	lsls	r1, r2, #8
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68d2      	ldr	r2, [r2, #12]
 80041f8:	06d2      	lsls	r2, r2, #27
 80041fa:	4311      	orrs	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6852      	ldr	r2, [r2, #4]
 8004200:	3a01      	subs	r2, #1
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	4934      	ldr	r1, [pc, #208]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	610b      	str	r3, [r1, #16]
 8004212:	e033      	b.n	800427c <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d118      	bne.n	800424c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800421a:	4b31      	ldr	r3, [pc, #196]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	4b32      	ldr	r3, [pc, #200]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004220:	4013      	ands	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6892      	ldr	r2, [r2, #8]
 8004226:	0211      	lsls	r1, r2, #8
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6912      	ldr	r2, [r2, #16]
 800422c:	0852      	lsrs	r2, r2, #1
 800422e:	3a01      	subs	r2, #1
 8004230:	0552      	lsls	r2, r2, #21
 8004232:	4311      	orrs	r1, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6852      	ldr	r2, [r2, #4]
 8004238:	3a01      	subs	r2, #1
 800423a:	0112      	lsls	r2, r2, #4
 800423c:	4311      	orrs	r1, r2
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	4926      	ldr	r1, [pc, #152]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	610b      	str	r3, [r1, #16]
 800424a:	e017      	b.n	800427c <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800424c:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	4b26      	ldr	r3, [pc, #152]	; (80042ec <RCCEx_PLLSAI1_Config+0x1c8>)
 8004252:	4013      	ands	r3, r2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6892      	ldr	r2, [r2, #8]
 8004258:	0211      	lsls	r1, r2, #8
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6952      	ldr	r2, [r2, #20]
 800425e:	0852      	lsrs	r2, r2, #1
 8004260:	3a01      	subs	r2, #1
 8004262:	0652      	lsls	r2, r2, #25
 8004264:	4311      	orrs	r1, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6852      	ldr	r2, [r2, #4]
 800426a:	3a01      	subs	r2, #1
 800426c:	0112      	lsls	r2, r2, #4
 800426e:	4311      	orrs	r1, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	491a      	ldr	r1, [pc, #104]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004278:	4313      	orrs	r3, r2
 800427a:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800427c:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004286:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fd f826 	bl	80012d8 <HAL_GetTick>
 800428c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800428e:	e00f      	b.n	80042b0 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004290:	f7fd f822 	bl	80012d8 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d908      	bls.n	80042b0 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800429e:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80042ae:	e006      	b.n	80042be <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0e9      	beq.n	8004290 <RCCEx_PLLSAI1_Config+0x16c>
 80042bc:	e000      	b.n	80042c0 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80042be:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	4904      	ldr	r1, [pc, #16]	; (80042e0 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000
 80042e4:	07ff800c 	.word	0x07ff800c
 80042e8:	ff9f800c 	.word	0xff9f800c
 80042ec:	f9ff800c 	.word	0xf9ff800c

080042f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b03      	cmp	r3, #3
 8004304:	d018      	beq.n	8004338 <RCCEx_PLLSAI2_Config+0x48>
 8004306:	2b03      	cmp	r3, #3
 8004308:	d81f      	bhi.n	800434a <RCCEx_PLLSAI2_Config+0x5a>
 800430a:	2b01      	cmp	r3, #1
 800430c:	d002      	beq.n	8004314 <RCCEx_PLLSAI2_Config+0x24>
 800430e:	2b02      	cmp	r3, #2
 8004310:	d009      	beq.n	8004326 <RCCEx_PLLSAI2_Config+0x36>
 8004312:	e01a      	b.n	800434a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004314:	4b4a      	ldr	r3, [pc, #296]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d117      	bne.n	8004350 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004324:	e014      	b.n	8004350 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004326:	4b46      	ldr	r3, [pc, #280]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432e:	2b00      	cmp	r3, #0
 8004330:	d110      	bne.n	8004354 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004336:	e00d      	b.n	8004354 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004338:	4b41      	ldr	r3, [pc, #260]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004348:	e006      	b.n	8004358 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	73fb      	strb	r3, [r7, #15]
      break;
 800434e:	e004      	b.n	800435a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004350:	bf00      	nop
 8004352:	e002      	b.n	800435a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004354:	bf00      	nop
 8004356:	e000      	b.n	800435a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004358:	bf00      	nop
  }

  if (status == HAL_OK)
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d169      	bne.n	8004434 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004360:	4b37      	ldr	r3, [pc, #220]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a36      	ldr	r2, [pc, #216]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 8004366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436c:	f7fc ffb4 	bl	80012d8 <HAL_GetTick>
 8004370:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004372:	e00f      	b.n	8004394 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004374:	f7fc ffb0 	bl	80012d8 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d908      	bls.n	8004394 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004382:	4b2f      	ldr	r3, [pc, #188]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d009      	beq.n	80043a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004392:	e006      	b.n	80043a2 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004394:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e9      	bne.n	8004374 <RCCEx_PLLSAI2_Config+0x84>
 80043a0:	e000      	b.n	80043a4 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80043a2:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d144      	bne.n	8004434 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d115      	bne.n	80043dc <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043b0:	4b23      	ldr	r3, [pc, #140]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 80043b2:	695a      	ldr	r2, [r3, #20]
 80043b4:	4b23      	ldr	r3, [pc, #140]	; (8004444 <RCCEx_PLLSAI2_Config+0x154>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6892      	ldr	r2, [r2, #8]
 80043bc:	0211      	lsls	r1, r2, #8
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68d2      	ldr	r2, [r2, #12]
 80043c2:	06d2      	lsls	r2, r2, #27
 80043c4:	4311      	orrs	r1, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6852      	ldr	r2, [r2, #4]
 80043ca:	3a01      	subs	r2, #1
 80043cc:	0112      	lsls	r2, r2, #4
 80043ce:	4311      	orrs	r1, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	491a      	ldr	r1, [pc, #104]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043dc:	4b18      	ldr	r3, [pc, #96]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a17      	ldr	r2, [pc, #92]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 80043e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fc ff76 	bl	80012d8 <HAL_GetTick>
 80043ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043ee:	e00f      	b.n	8004410 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043f0:	f7fc ff72 	bl	80012d8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d908      	bls.n	8004410 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800440e:	e006      	b.n	800441e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0e9      	beq.n	80043f0 <RCCEx_PLLSAI2_Config+0x100>
 800441c:	e000      	b.n	8004420 <RCCEx_PLLSAI2_Config+0x130>
          break;
 800441e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	4904      	ldr	r1, [pc, #16]	; (8004440 <RCCEx_PLLSAI2_Config+0x150>)
 8004430:	4313      	orrs	r3, r2
 8004432:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40021000 	.word	0x40021000
 8004444:	07ff800c 	.word	0x07ff800c

08004448 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d066      	beq.n	8004528 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc fd3e 	bl	8000ef0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b10      	cmp	r3, #16
 8004488:	d045      	beq.n	8004516 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800448a:	4b2a      	ldr	r3, [pc, #168]	; (8004534 <HAL_RTC_Init+0xec>)
 800448c:	22ca      	movs	r2, #202	; 0xca
 800448e:	625a      	str	r2, [r3, #36]	; 0x24
 8004490:	4b28      	ldr	r3, [pc, #160]	; (8004534 <HAL_RTC_Init+0xec>)
 8004492:	2253      	movs	r2, #83	; 0x53
 8004494:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f872 	bl	8004580 <RTC_EnterInitMode>
 800449c:	4603      	mov	r3, r0
 800449e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d121      	bne.n	80044ea <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80044a6:	4b23      	ldr	r3, [pc, #140]	; (8004534 <HAL_RTC_Init+0xec>)
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	4a22      	ldr	r2, [pc, #136]	; (8004534 <HAL_RTC_Init+0xec>)
 80044ac:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80044b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b4:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80044b6:	4b1f      	ldr	r3, [pc, #124]	; (8004534 <HAL_RTC_Init+0xec>)
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6859      	ldr	r1, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	4319      	orrs	r1, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	430b      	orrs	r3, r1
 80044ca:	491a      	ldr	r1, [pc, #104]	; (8004534 <HAL_RTC_Init+0xec>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	041b      	lsls	r3, r3, #16
 80044da:	4916      	ldr	r1, [pc, #88]	; (8004534 <HAL_RTC_Init+0xec>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f881 	bl	80045e8 <RTC_ExitInitMode>
 80044e6:	4603      	mov	r3, r0
 80044e8:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10e      	bne.n	800450e <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 80044f0:	4b10      	ldr	r3, [pc, #64]	; (8004534 <HAL_RTC_Init+0xec>)
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a19      	ldr	r1, [r3, #32]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	4319      	orrs	r1, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	430b      	orrs	r3, r1
 8004508:	490a      	ldr	r1, [pc, #40]	; (8004534 <HAL_RTC_Init+0xec>)
 800450a:	4313      	orrs	r3, r2
 800450c:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_RTC_Init+0xec>)
 8004510:	22ff      	movs	r2, #255	; 0xff
 8004512:	625a      	str	r2, [r3, #36]	; 0x24
 8004514:	e001      	b.n	800451a <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d103      	bne.n	8004528 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40002800 	.word	0x40002800

08004538 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_RTC_WaitForSynchro+0x40>)
 8004542:	4a0e      	ldr	r2, [pc, #56]	; (800457c <HAL_RTC_WaitForSynchro+0x44>)
 8004544:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004546:	f7fc fec7 	bl	80012d8 <HAL_GetTick>
 800454a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800454c:	e009      	b.n	8004562 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800454e:	f7fc fec3 	bl	80012d8 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800455c:	d901      	bls.n	8004562 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e006      	b.n	8004570 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <HAL_RTC_WaitForSynchro+0x40>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0ef      	beq.n	800454e <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40002800 	.word	0x40002800
 800457c:	0001005c 	.word	0x0001005c

08004580 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800458c:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <RTC_EnterInitMode+0x64>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d120      	bne.n	80045da <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004598:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <RTC_EnterInitMode+0x64>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4a11      	ldr	r2, [pc, #68]	; (80045e4 <RTC_EnterInitMode+0x64>)
 800459e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80045a4:	f7fc fe98 	bl	80012d8 <HAL_GetTick>
 80045a8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80045aa:	e00d      	b.n	80045c8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045ac:	f7fc fe94 	bl	80012d8 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045ba:	d905      	bls.n	80045c8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2203      	movs	r2, #3
 80045c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <RTC_EnterInitMode+0x64>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d102      	bne.n	80045da <RTC_EnterInitMode+0x5a>
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d1e8      	bne.n	80045ac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80045da:	7bfb      	ldrb	r3, [r7, #15]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40002800 	.word	0x40002800

080045e8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80045f4:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <RTC_ExitInitMode+0x78>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4a19      	ldr	r2, [pc, #100]	; (8004660 <RTC_ExitInitMode+0x78>)
 80045fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045fe:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004600:	4b17      	ldr	r3, [pc, #92]	; (8004660 <RTC_ExitInitMode+0x78>)
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10c      	bne.n	8004626 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff ff93 	bl	8004538 <HAL_RTC_WaitForSynchro>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01e      	beq.n	8004656 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2203      	movs	r2, #3
 800461c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	e017      	b.n	8004656 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004626:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <RTC_ExitInitMode+0x78>)
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	4a0d      	ldr	r2, [pc, #52]	; (8004660 <RTC_ExitInitMode+0x78>)
 800462c:	f023 0320 	bic.w	r3, r3, #32
 8004630:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff ff80 	bl	8004538 <HAL_RTC_WaitForSynchro>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2203      	movs	r2, #3
 8004642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <RTC_ExitInitMode+0x78>)
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	4a04      	ldr	r2, [pc, #16]	; (8004660 <RTC_ExitInitMode+0x78>)
 8004650:	f043 0320 	orr.w	r3, r3, #32
 8004654:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004656:	7bfb      	ldrb	r3, [r7, #15]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40002800 	.word	0x40002800

08004664 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	490f      	ldr	r1, [pc, #60]	; (80046b4 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8004678:	4313      	orrs	r3, r2
 800467a:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	490c      	ldr	r1, [pc, #48]	; (80046b8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004686:	4313      	orrs	r3, r2
 8004688:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800468a:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6919      	ldr	r1, [r3, #16]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	041b      	lsls	r3, r3, #16
 800469c:	430b      	orrs	r3, r1
 800469e:	4906      	ldr	r1, [pc, #24]	; (80046b8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40002800 	.word	0x40002800
 80046b8:	40003400 	.word	0x40003400

080046bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e042      	b.n	8004754 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fc fba5 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2224      	movs	r2, #36	; 0x24
 80046ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fb28 	bl	8004d5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f825 	bl	800475c <UART_SetConfig>
 8004712:	4603      	mov	r3, r0
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e01b      	b.n	8004754 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800472a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800473a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fba7 	bl	8004ea0 <UART_CheckIdleState>
 8004752:	4603      	mov	r3, r0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800475c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004760:	b08c      	sub	sp, #48	; 0x30
 8004762:	af00      	add	r7, sp, #0
 8004764:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	431a      	orrs	r2, r3
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	431a      	orrs	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	4313      	orrs	r3, r2
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4baa      	ldr	r3, [pc, #680]	; (8004a34 <UART_SetConfig+0x2d8>)
 800478c:	4013      	ands	r3, r2
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004794:	430b      	orrs	r3, r1
 8004796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a9f      	ldr	r2, [pc, #636]	; (8004a38 <UART_SetConfig+0x2dc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c4:	4313      	orrs	r3, r2
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80047d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047dc:	430b      	orrs	r3, r1
 80047de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	f023 010f 	bic.w	r1, r3, #15
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a90      	ldr	r2, [pc, #576]	; (8004a3c <UART_SetConfig+0x2e0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d125      	bne.n	800484c <UART_SetConfig+0xf0>
 8004800:	4b8f      	ldr	r3, [pc, #572]	; (8004a40 <UART_SetConfig+0x2e4>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	2b03      	cmp	r3, #3
 800480c:	d81a      	bhi.n	8004844 <UART_SetConfig+0xe8>
 800480e:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <UART_SetConfig+0xb8>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004825 	.word	0x08004825
 8004818:	08004835 	.word	0x08004835
 800481c:	0800482d 	.word	0x0800482d
 8004820:	0800483d 	.word	0x0800483d
 8004824:	2301      	movs	r3, #1
 8004826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800482a:	e116      	b.n	8004a5a <UART_SetConfig+0x2fe>
 800482c:	2302      	movs	r3, #2
 800482e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004832:	e112      	b.n	8004a5a <UART_SetConfig+0x2fe>
 8004834:	2304      	movs	r3, #4
 8004836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800483a:	e10e      	b.n	8004a5a <UART_SetConfig+0x2fe>
 800483c:	2308      	movs	r3, #8
 800483e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004842:	e10a      	b.n	8004a5a <UART_SetConfig+0x2fe>
 8004844:	2310      	movs	r3, #16
 8004846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800484a:	e106      	b.n	8004a5a <UART_SetConfig+0x2fe>
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a7c      	ldr	r2, [pc, #496]	; (8004a44 <UART_SetConfig+0x2e8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d138      	bne.n	80048c8 <UART_SetConfig+0x16c>
 8004856:	4b7a      	ldr	r3, [pc, #488]	; (8004a40 <UART_SetConfig+0x2e4>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b0c      	cmp	r3, #12
 8004862:	d82d      	bhi.n	80048c0 <UART_SetConfig+0x164>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <UART_SetConfig+0x110>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	080048a1 	.word	0x080048a1
 8004870:	080048c1 	.word	0x080048c1
 8004874:	080048c1 	.word	0x080048c1
 8004878:	080048c1 	.word	0x080048c1
 800487c:	080048b1 	.word	0x080048b1
 8004880:	080048c1 	.word	0x080048c1
 8004884:	080048c1 	.word	0x080048c1
 8004888:	080048c1 	.word	0x080048c1
 800488c:	080048a9 	.word	0x080048a9
 8004890:	080048c1 	.word	0x080048c1
 8004894:	080048c1 	.word	0x080048c1
 8004898:	080048c1 	.word	0x080048c1
 800489c:	080048b9 	.word	0x080048b9
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048a6:	e0d8      	b.n	8004a5a <UART_SetConfig+0x2fe>
 80048a8:	2302      	movs	r3, #2
 80048aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ae:	e0d4      	b.n	8004a5a <UART_SetConfig+0x2fe>
 80048b0:	2304      	movs	r3, #4
 80048b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048b6:	e0d0      	b.n	8004a5a <UART_SetConfig+0x2fe>
 80048b8:	2308      	movs	r3, #8
 80048ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048be:	e0cc      	b.n	8004a5a <UART_SetConfig+0x2fe>
 80048c0:	2310      	movs	r3, #16
 80048c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048c6:	e0c8      	b.n	8004a5a <UART_SetConfig+0x2fe>
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a5e      	ldr	r2, [pc, #376]	; (8004a48 <UART_SetConfig+0x2ec>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d125      	bne.n	800491e <UART_SetConfig+0x1c2>
 80048d2:	4b5b      	ldr	r3, [pc, #364]	; (8004a40 <UART_SetConfig+0x2e4>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048dc:	2b30      	cmp	r3, #48	; 0x30
 80048de:	d016      	beq.n	800490e <UART_SetConfig+0x1b2>
 80048e0:	2b30      	cmp	r3, #48	; 0x30
 80048e2:	d818      	bhi.n	8004916 <UART_SetConfig+0x1ba>
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d00a      	beq.n	80048fe <UART_SetConfig+0x1a2>
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d814      	bhi.n	8004916 <UART_SetConfig+0x1ba>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <UART_SetConfig+0x19a>
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d008      	beq.n	8004906 <UART_SetConfig+0x1aa>
 80048f4:	e00f      	b.n	8004916 <UART_SetConfig+0x1ba>
 80048f6:	2300      	movs	r3, #0
 80048f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fc:	e0ad      	b.n	8004a5a <UART_SetConfig+0x2fe>
 80048fe:	2302      	movs	r3, #2
 8004900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004904:	e0a9      	b.n	8004a5a <UART_SetConfig+0x2fe>
 8004906:	2304      	movs	r3, #4
 8004908:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800490c:	e0a5      	b.n	8004a5a <UART_SetConfig+0x2fe>
 800490e:	2308      	movs	r3, #8
 8004910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004914:	e0a1      	b.n	8004a5a <UART_SetConfig+0x2fe>
 8004916:	2310      	movs	r3, #16
 8004918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800491c:	e09d      	b.n	8004a5a <UART_SetConfig+0x2fe>
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a4a      	ldr	r2, [pc, #296]	; (8004a4c <UART_SetConfig+0x2f0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d125      	bne.n	8004974 <UART_SetConfig+0x218>
 8004928:	4b45      	ldr	r3, [pc, #276]	; (8004a40 <UART_SetConfig+0x2e4>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004932:	2bc0      	cmp	r3, #192	; 0xc0
 8004934:	d016      	beq.n	8004964 <UART_SetConfig+0x208>
 8004936:	2bc0      	cmp	r3, #192	; 0xc0
 8004938:	d818      	bhi.n	800496c <UART_SetConfig+0x210>
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d00a      	beq.n	8004954 <UART_SetConfig+0x1f8>
 800493e:	2b80      	cmp	r3, #128	; 0x80
 8004940:	d814      	bhi.n	800496c <UART_SetConfig+0x210>
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <UART_SetConfig+0x1f0>
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d008      	beq.n	800495c <UART_SetConfig+0x200>
 800494a:	e00f      	b.n	800496c <UART_SetConfig+0x210>
 800494c:	2300      	movs	r3, #0
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004952:	e082      	b.n	8004a5a <UART_SetConfig+0x2fe>
 8004954:	2302      	movs	r3, #2
 8004956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800495a:	e07e      	b.n	8004a5a <UART_SetConfig+0x2fe>
 800495c:	2304      	movs	r3, #4
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004962:	e07a      	b.n	8004a5a <UART_SetConfig+0x2fe>
 8004964:	2308      	movs	r3, #8
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800496a:	e076      	b.n	8004a5a <UART_SetConfig+0x2fe>
 800496c:	2310      	movs	r3, #16
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004972:	e072      	b.n	8004a5a <UART_SetConfig+0x2fe>
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a35      	ldr	r2, [pc, #212]	; (8004a50 <UART_SetConfig+0x2f4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d12a      	bne.n	80049d4 <UART_SetConfig+0x278>
 800497e:	4b30      	ldr	r3, [pc, #192]	; (8004a40 <UART_SetConfig+0x2e4>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800498c:	d01a      	beq.n	80049c4 <UART_SetConfig+0x268>
 800498e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004992:	d81b      	bhi.n	80049cc <UART_SetConfig+0x270>
 8004994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004998:	d00c      	beq.n	80049b4 <UART_SetConfig+0x258>
 800499a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499e:	d815      	bhi.n	80049cc <UART_SetConfig+0x270>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <UART_SetConfig+0x250>
 80049a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a8:	d008      	beq.n	80049bc <UART_SetConfig+0x260>
 80049aa:	e00f      	b.n	80049cc <UART_SetConfig+0x270>
 80049ac:	2300      	movs	r3, #0
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b2:	e052      	b.n	8004a5a <UART_SetConfig+0x2fe>
 80049b4:	2302      	movs	r3, #2
 80049b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ba:	e04e      	b.n	8004a5a <UART_SetConfig+0x2fe>
 80049bc:	2304      	movs	r3, #4
 80049be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c2:	e04a      	b.n	8004a5a <UART_SetConfig+0x2fe>
 80049c4:	2308      	movs	r3, #8
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ca:	e046      	b.n	8004a5a <UART_SetConfig+0x2fe>
 80049cc:	2310      	movs	r3, #16
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d2:	e042      	b.n	8004a5a <UART_SetConfig+0x2fe>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a17      	ldr	r2, [pc, #92]	; (8004a38 <UART_SetConfig+0x2dc>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d13a      	bne.n	8004a54 <UART_SetConfig+0x2f8>
 80049de:	4b18      	ldr	r3, [pc, #96]	; (8004a40 <UART_SetConfig+0x2e4>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ec:	d01a      	beq.n	8004a24 <UART_SetConfig+0x2c8>
 80049ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049f2:	d81b      	bhi.n	8004a2c <UART_SetConfig+0x2d0>
 80049f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f8:	d00c      	beq.n	8004a14 <UART_SetConfig+0x2b8>
 80049fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049fe:	d815      	bhi.n	8004a2c <UART_SetConfig+0x2d0>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <UART_SetConfig+0x2b0>
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a08:	d008      	beq.n	8004a1c <UART_SetConfig+0x2c0>
 8004a0a:	e00f      	b.n	8004a2c <UART_SetConfig+0x2d0>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a12:	e022      	b.n	8004a5a <UART_SetConfig+0x2fe>
 8004a14:	2302      	movs	r3, #2
 8004a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a1a:	e01e      	b.n	8004a5a <UART_SetConfig+0x2fe>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a22:	e01a      	b.n	8004a5a <UART_SetConfig+0x2fe>
 8004a24:	2308      	movs	r3, #8
 8004a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a2a:	e016      	b.n	8004a5a <UART_SetConfig+0x2fe>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a32:	e012      	b.n	8004a5a <UART_SetConfig+0x2fe>
 8004a34:	cfff69f3 	.word	0xcfff69f3
 8004a38:	40008000 	.word	0x40008000
 8004a3c:	40013800 	.word	0x40013800
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40004400 	.word	0x40004400
 8004a48:	40004800 	.word	0x40004800
 8004a4c:	40004c00 	.word	0x40004c00
 8004a50:	40005000 	.word	0x40005000
 8004a54:	2310      	movs	r3, #16
 8004a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4ab0      	ldr	r2, [pc, #704]	; (8004d20 <UART_SetConfig+0x5c4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	f040 809b 	bne.w	8004b9c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d827      	bhi.n	8004abe <UART_SetConfig+0x362>
 8004a6e:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <UART_SetConfig+0x318>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004a99 	.word	0x08004a99
 8004a78:	08004aa1 	.word	0x08004aa1
 8004a7c:	08004aa9 	.word	0x08004aa9
 8004a80:	08004abf 	.word	0x08004abf
 8004a84:	08004aaf 	.word	0x08004aaf
 8004a88:	08004abf 	.word	0x08004abf
 8004a8c:	08004abf 	.word	0x08004abf
 8004a90:	08004abf 	.word	0x08004abf
 8004a94:	08004ab7 	.word	0x08004ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a98:	f7fe fec6 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8004a9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a9e:	e014      	b.n	8004aca <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa0:	f7fe fed6 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8004aa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004aa6:	e010      	b.n	8004aca <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa8:	4b9e      	ldr	r3, [pc, #632]	; (8004d24 <UART_SetConfig+0x5c8>)
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004aac:	e00d      	b.n	8004aca <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aae:	f7fe fe09 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8004ab2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ab4:	e009      	b.n	8004aca <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004abc:	e005      	b.n	8004aca <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ac8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8130 	beq.w	8004d32 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	4a94      	ldr	r2, [pc, #592]	; (8004d28 <UART_SetConfig+0x5cc>)
 8004ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004adc:	461a      	mov	r2, r3
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	4413      	add	r3, r2
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d305      	bcc.n	8004b02 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d903      	bls.n	8004b0a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b08:	e113      	b.n	8004d32 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	60fa      	str	r2, [r7, #12]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	4a84      	ldr	r2, [pc, #528]	; (8004d28 <UART_SetConfig+0x5cc>)
 8004b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2200      	movs	r2, #0
 8004b20:	603b      	str	r3, [r7, #0]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b2c:	f7fb fb88 	bl	8000240 <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4610      	mov	r0, r2
 8004b36:	4619      	mov	r1, r3
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	020b      	lsls	r3, r1, #8
 8004b42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b46:	0202      	lsls	r2, r0, #8
 8004b48:	6979      	ldr	r1, [r7, #20]
 8004b4a:	6849      	ldr	r1, [r1, #4]
 8004b4c:	0849      	lsrs	r1, r1, #1
 8004b4e:	2000      	movs	r0, #0
 8004b50:	460c      	mov	r4, r1
 8004b52:	4605      	mov	r5, r0
 8004b54:	eb12 0804 	adds.w	r8, r2, r4
 8004b58:	eb43 0905 	adc.w	r9, r3, r5
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	469a      	mov	sl, r3
 8004b64:	4693      	mov	fp, r2
 8004b66:	4652      	mov	r2, sl
 8004b68:	465b      	mov	r3, fp
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	f7fb fb67 	bl	8000240 <__aeabi_uldivmod>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4613      	mov	r3, r2
 8004b78:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b80:	d308      	bcc.n	8004b94 <UART_SetConfig+0x438>
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b88:	d204      	bcs.n	8004b94 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6a3a      	ldr	r2, [r7, #32]
 8004b90:	60da      	str	r2, [r3, #12]
 8004b92:	e0ce      	b.n	8004d32 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b9a:	e0ca      	b.n	8004d32 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba4:	d166      	bne.n	8004c74 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8004ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d827      	bhi.n	8004bfe <UART_SetConfig+0x4a2>
 8004bae:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <UART_SetConfig+0x458>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004be1 	.word	0x08004be1
 8004bbc:	08004be9 	.word	0x08004be9
 8004bc0:	08004bff 	.word	0x08004bff
 8004bc4:	08004bef 	.word	0x08004bef
 8004bc8:	08004bff 	.word	0x08004bff
 8004bcc:	08004bff 	.word	0x08004bff
 8004bd0:	08004bff 	.word	0x08004bff
 8004bd4:	08004bf7 	.word	0x08004bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd8:	f7fe fe26 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8004bdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bde:	e014      	b.n	8004c0a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be0:	f7fe fe36 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8004be4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004be6:	e010      	b.n	8004c0a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be8:	4b4e      	ldr	r3, [pc, #312]	; (8004d24 <UART_SetConfig+0x5c8>)
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bec:	e00d      	b.n	8004c0a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bee:	f7fe fd69 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8004bf2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bf4:	e009      	b.n	8004c0a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bfc:	e005      	b.n	8004c0a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8090 	beq.w	8004d32 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	4a44      	ldr	r2, [pc, #272]	; (8004d28 <UART_SetConfig+0x5cc>)
 8004c18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c24:	005a      	lsls	r2, r3, #1
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	441a      	add	r2, r3
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	2b0f      	cmp	r3, #15
 8004c3c:	d916      	bls.n	8004c6c <UART_SetConfig+0x510>
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c44:	d212      	bcs.n	8004c6c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f023 030f 	bic.w	r3, r3, #15
 8004c4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	085b      	lsrs	r3, r3, #1
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	8bfb      	ldrh	r3, [r7, #30]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	8bfa      	ldrh	r2, [r7, #30]
 8004c68:	60da      	str	r2, [r3, #12]
 8004c6a:	e062      	b.n	8004d32 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c72:	e05e      	b.n	8004d32 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d828      	bhi.n	8004cce <UART_SetConfig+0x572>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0x528>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cb1 	.word	0x08004cb1
 8004c8c:	08004cb9 	.word	0x08004cb9
 8004c90:	08004ccf 	.word	0x08004ccf
 8004c94:	08004cbf 	.word	0x08004cbf
 8004c98:	08004ccf 	.word	0x08004ccf
 8004c9c:	08004ccf 	.word	0x08004ccf
 8004ca0:	08004ccf 	.word	0x08004ccf
 8004ca4:	08004cc7 	.word	0x08004cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7fe fdbe 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8004cac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cae:	e014      	b.n	8004cda <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cb0:	f7fe fdce 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8004cb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cb6:	e010      	b.n	8004cda <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb8:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <UART_SetConfig+0x5c8>)
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cbc:	e00d      	b.n	8004cda <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cbe:	f7fe fd01 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8004cc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cc4:	e009      	b.n	8004cda <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ccc:	e005      	b.n	8004cda <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004cd8:	bf00      	nop
    }

    if (pclk != 0U)
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d028      	beq.n	8004d32 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	4a10      	ldr	r2, [pc, #64]	; (8004d28 <UART_SetConfig+0x5cc>)
 8004ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cea:	461a      	mov	r2, r3
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	085b      	lsrs	r3, r3, #1
 8004cf8:	441a      	add	r2, r3
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	2b0f      	cmp	r3, #15
 8004d08:	d910      	bls.n	8004d2c <UART_SetConfig+0x5d0>
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d10:	d20c      	bcs.n	8004d2c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60da      	str	r2, [r3, #12]
 8004d1c:	e009      	b.n	8004d32 <UART_SetConfig+0x5d6>
 8004d1e:	bf00      	nop
 8004d20:	40008000 	.word	0x40008000
 8004d24:	00f42400 	.word	0x00f42400
 8004d28:	08007f28 	.word	0x08007f28
      }
      else
      {
        ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2200      	movs	r2, #0
 8004d46:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d4e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3730      	adds	r7, #48	; 0x30
 8004d56:	46bd      	mov	sp, r7
 8004d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01a      	beq.n	8004e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e5a:	d10a      	bne.n	8004e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
  }
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b098      	sub	sp, #96	; 0x60
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004eb0:	f7fc fa12 	bl	80012d8 <HAL_GetTick>
 8004eb4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d12f      	bne.n	8004f24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f88e 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d022      	beq.n	8004f24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee6:	e853 3f00 	ldrex	r3, [r3]
 8004eea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004efc:	647b      	str	r3, [r7, #68]	; 0x44
 8004efe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f04:	e841 2300 	strex	r3, r2, [r1]
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e6      	bne.n	8004ede <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e063      	b.n	8004fec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d149      	bne.n	8004fc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f857 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d03c      	beq.n	8004fc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	623b      	str	r3, [r7, #32]
   return(result);
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f6c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e6      	bne.n	8004f4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3308      	adds	r3, #8
 8004f84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f9e:	61fa      	str	r2, [r7, #28]
 8004fa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	69b9      	ldr	r1, [r7, #24]
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	617b      	str	r3, [r7, #20]
   return(result);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e5      	bne.n	8004f7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e012      	b.n	8004fec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3758      	adds	r7, #88	; 0x58
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	4613      	mov	r3, r2
 8005002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005004:	e04f      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500c:	d04b      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500e:	f7fc f963 	bl	80012d8 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	429a      	cmp	r2, r3
 800501c:	d302      	bcc.n	8005024 <UART_WaitOnFlagUntilTimeout+0x30>
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e04e      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	d037      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b80      	cmp	r3, #128	; 0x80
 800503a:	d034      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b40      	cmp	r3, #64	; 0x40
 8005040:	d031      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b08      	cmp	r3, #8
 800504e:	d110      	bne.n	8005072 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2208      	movs	r2, #8
 8005056:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f838 	bl	80050ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2208      	movs	r2, #8
 8005062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e029      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800507c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005080:	d111      	bne.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800508a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f81e 	bl	80050ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2220      	movs	r2, #32
 8005096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e00f      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4013      	ands	r3, r2
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	bf0c      	ite	eq
 80050b6:	2301      	moveq	r3, #1
 80050b8:	2300      	movne	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d0a0      	beq.n	8005006 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b095      	sub	sp, #84	; 0x54
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f4:	643b      	str	r3, [r7, #64]	; 0x40
 80050f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050fc:	e841 2300 	strex	r3, r2, [r1]
 8005100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e6      	bne.n	80050d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3308      	adds	r3, #8
 800510e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	e853 3f00 	ldrex	r3, [r3]
 8005116:	61fb      	str	r3, [r7, #28]
   return(result);
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	64bb      	str	r3, [r7, #72]	; 0x48
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3308      	adds	r3, #8
 800512a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800512c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e3      	bne.n	8005108 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005144:	2b01      	cmp	r3, #1
 8005146:	d118      	bne.n	800517a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	60bb      	str	r3, [r7, #8]
   return(result);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f023 0310 	bic.w	r3, r3, #16
 800515c:	647b      	str	r3, [r7, #68]	; 0x44
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6979      	ldr	r1, [r7, #20]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	613b      	str	r3, [r7, #16]
   return(result);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e6      	bne.n	8005148 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800518e:	bf00      	nop
 8005190:	3754      	adds	r7, #84	; 0x54
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e027      	b.n	8005200 <HAL_UARTEx_DisableFifoMode+0x66>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2224      	movs	r2, #36	; 0x24
 80051bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0201 	bic.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005220:	2302      	movs	r3, #2
 8005222:	e02d      	b.n	8005280 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2224      	movs	r2, #36	; 0x24
 8005230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f84f 	bl	8005304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800529c:	2302      	movs	r3, #2
 800529e:	e02d      	b.n	80052fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2224      	movs	r2, #36	; 0x24
 80052ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f811 	bl	8005304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005310:	2b00      	cmp	r3, #0
 8005312:	d108      	bne.n	8005326 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005324:	e031      	b.n	800538a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005326:	2308      	movs	r3, #8
 8005328:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800532a:	2308      	movs	r3, #8
 800532c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	0e5b      	lsrs	r3, r3, #25
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	0f5b      	lsrs	r3, r3, #29
 8005346:	b2db      	uxtb	r3, r3
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800534e:	7bbb      	ldrb	r3, [r7, #14]
 8005350:	7b3a      	ldrb	r2, [r7, #12]
 8005352:	4911      	ldr	r1, [pc, #68]	; (8005398 <UARTEx_SetNbDataToProcess+0x94>)
 8005354:	5c8a      	ldrb	r2, [r1, r2]
 8005356:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800535a:	7b3a      	ldrb	r2, [r7, #12]
 800535c:	490f      	ldr	r1, [pc, #60]	; (800539c <UARTEx_SetNbDataToProcess+0x98>)
 800535e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005360:	fb93 f3f2 	sdiv	r3, r3, r2
 8005364:	b29a      	uxth	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	7b7a      	ldrb	r2, [r7, #13]
 8005370:	4909      	ldr	r1, [pc, #36]	; (8005398 <UARTEx_SetNbDataToProcess+0x94>)
 8005372:	5c8a      	ldrb	r2, [r1, r2]
 8005374:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005378:	7b7a      	ldrb	r2, [r7, #13]
 800537a:	4908      	ldr	r1, [pc, #32]	; (800539c <UARTEx_SetNbDataToProcess+0x98>)
 800537c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800537e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005382:	b29a      	uxth	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	08007f40 	.word	0x08007f40
 800539c:	08007f48 	.word	0x08007f48

080053a0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b08b      	sub	sp, #44	; 0x2c
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	fa93 f3a3 	rbit	r3, r3
 80053ba:	613b      	str	r3, [r7, #16]
  return result;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80053c6:	2320      	movs	r3, #32
 80053c8:	e003      	b.n	80053d2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	fab3 f383 	clz	r3, r3
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	2103      	movs	r1, #3
 80053d6:	fa01 f303 	lsl.w	r3, r1, r3
 80053da:	43db      	mvns	r3, r3
 80053dc:	401a      	ands	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	fa93 f3a3 	rbit	r3, r3
 80053e8:	61fb      	str	r3, [r7, #28]
  return result;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80053f4:	2320      	movs	r3, #32
 80053f6:	e003      	b.n	8005400 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	fab3 f383 	clz	r3, r3
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	fa01 f303 	lsl.w	r3, r1, r3
 8005408:	431a      	orrs	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	601a      	str	r2, [r3, #0]
}
 800540e:	bf00      	nop
 8005410:	372c      	adds	r7, #44	; 0x2c
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800541a:	b480      	push	{r7}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	43db      	mvns	r3, r3
 800542e:	401a      	ands	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	fb01 f303 	mul.w	r3, r1, r3
 8005438:	431a      	orrs	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	605a      	str	r2, [r3, #4]
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800544a:	b480      	push	{r7}
 800544c:	b08b      	sub	sp, #44	; 0x2c
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	fa93 f3a3 	rbit	r3, r3
 8005464:	613b      	str	r3, [r7, #16]
  return result;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005470:	2320      	movs	r3, #32
 8005472:	e003      	b.n	800547c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	fab3 f383 	clz	r3, r3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	2103      	movs	r1, #3
 8005480:	fa01 f303 	lsl.w	r3, r1, r3
 8005484:	43db      	mvns	r3, r3
 8005486:	401a      	ands	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	fa93 f3a3 	rbit	r3, r3
 8005492:	61fb      	str	r3, [r7, #28]
  return result;
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800549e:	2320      	movs	r3, #32
 80054a0:	e003      	b.n	80054aa <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	fab3 f383 	clz	r3, r3
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	fa01 f303 	lsl.w	r3, r1, r3
 80054b2:	431a      	orrs	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80054b8:	bf00      	nop
 80054ba:	372c      	adds	r7, #44	; 0x2c
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b08b      	sub	sp, #44	; 0x2c
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	fa93 f3a3 	rbit	r3, r3
 80054de:	613b      	str	r3, [r7, #16]
  return result;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80054ea:	2320      	movs	r3, #32
 80054ec:	e003      	b.n	80054f6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	fab3 f383 	clz	r3, r3
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	2103      	movs	r1, #3
 80054fa:	fa01 f303 	lsl.w	r3, r1, r3
 80054fe:	43db      	mvns	r3, r3
 8005500:	401a      	ands	r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	fa93 f3a3 	rbit	r3, r3
 800550c:	61fb      	str	r3, [r7, #28]
  return result;
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005518:	2320      	movs	r3, #32
 800551a:	e003      	b.n	8005524 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	fab3 f383 	clz	r3, r3
 8005522:	b2db      	uxtb	r3, r3
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	fa01 f303 	lsl.w	r3, r1, r3
 800552c:	431a      	orrs	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	60da      	str	r2, [r3, #12]
}
 8005532:	bf00      	nop
 8005534:	372c      	adds	r7, #44	; 0x2c
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800553e:	b480      	push	{r7}
 8005540:	b08b      	sub	sp, #44	; 0x2c
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a1a      	ldr	r2, [r3, #32]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	fa93 f3a3 	rbit	r3, r3
 8005558:	613b      	str	r3, [r7, #16]
  return result;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005564:	2320      	movs	r3, #32
 8005566:	e003      	b.n	8005570 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	fab3 f383 	clz	r3, r3
 800556e:	b2db      	uxtb	r3, r3
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	210f      	movs	r1, #15
 8005574:	fa01 f303 	lsl.w	r3, r1, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	401a      	ands	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	fa93 f3a3 	rbit	r3, r3
 8005586:	61fb      	str	r3, [r7, #28]
  return result;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005592:	2320      	movs	r3, #32
 8005594:	e003      	b.n	800559e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	fab3 f383 	clz	r3, r3
 800559c:	b2db      	uxtb	r3, r3
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	fa01 f303 	lsl.w	r3, r1, r3
 80055a6:	431a      	orrs	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80055ac:	bf00      	nop
 80055ae:	372c      	adds	r7, #44	; 0x2c
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b08b      	sub	sp, #44	; 0x2c
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	fa93 f3a3 	rbit	r3, r3
 80055d4:	613b      	str	r3, [r7, #16]
  return result;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80055e0:	2320      	movs	r3, #32
 80055e2:	e003      	b.n	80055ec <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	fab3 f383 	clz	r3, r3
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	210f      	movs	r1, #15
 80055f0:	fa01 f303 	lsl.w	r3, r1, r3
 80055f4:	43db      	mvns	r3, r3
 80055f6:	401a      	ands	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	0a1b      	lsrs	r3, r3, #8
 80055fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	fa93 f3a3 	rbit	r3, r3
 8005604:	61fb      	str	r3, [r7, #28]
  return result;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005610:	2320      	movs	r3, #32
 8005612:	e003      	b.n	800561c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	fab3 f383 	clz	r3, r3
 800561a:	b2db      	uxtb	r3, r3
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	fa01 f303 	lsl.w	r3, r1, r3
 8005624:	431a      	orrs	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800562a:	bf00      	nop
 800562c:	372c      	adds	r7, #44	; 0x2c
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b088      	sub	sp, #32
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	fa93 f3a3 	rbit	r3, r3
 800564c:	60fb      	str	r3, [r7, #12]
  return result;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <LL_GPIO_Init+0x26>
    return 32U;
 8005658:	2320      	movs	r3, #32
 800565a:	e003      	b.n	8005664 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	fab3 f383 	clz	r3, r3
 8005662:	b2db      	uxtb	r3, r3
 8005664:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005666:	e047      	b.n	80056f8 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	2101      	movs	r1, #1
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	fa01 f303 	lsl.w	r3, r1, r3
 8005674:	4013      	ands	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d039      	beq.n	80056f2 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d003      	beq.n	800568e <LL_GPIO_Init+0x58>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d10d      	bne.n	80056aa <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	461a      	mov	r2, r3
 8005694:	69b9      	ldr	r1, [r7, #24]
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff fed7 	bl	800544a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	461a      	mov	r2, r3
 80056a2:	69b9      	ldr	r1, [r7, #24]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff feb8 	bl	800541a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	461a      	mov	r2, r3
 80056b0:	69b9      	ldr	r1, [r7, #24]
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff ff06 	bl	80054c4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d111      	bne.n	80056e4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2bff      	cmp	r3, #255	; 0xff
 80056c4:	d807      	bhi.n	80056d6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	461a      	mov	r2, r3
 80056cc:	69b9      	ldr	r1, [r7, #24]
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff ff35 	bl	800553e <LL_GPIO_SetAFPin_0_7>
 80056d4:	e006      	b.n	80056e4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	461a      	mov	r2, r3
 80056dc:	69b9      	ldr	r1, [r7, #24]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff ff6a 	bl	80055b8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	461a      	mov	r2, r3
 80056ea:	69b9      	ldr	r1, [r7, #24]
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff fe57 	bl	80053a0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	3301      	adds	r3, #1
 80056f6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1b0      	bne.n	8005668 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3720      	adds	r7, #32
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005718:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800571c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	b29b      	uxth	r3, r3
 800572a:	43db      	mvns	r3, r3
 800572c:	b29b      	uxth	r3, r3
 800572e:	4013      	ands	r3, r2
 8005730:	b29a      	uxth	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005746:	b480      	push	{r7}
 8005748:	b085      	sub	sp, #20
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	1d3b      	adds	r3, r7, #4
 8005750:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <__NVIC_SetPriority>:
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	4603      	mov	r3, r0
 800578c:	6039      	str	r1, [r7, #0]
 800578e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005794:	2b00      	cmp	r3, #0
 8005796:	db0a      	blt.n	80057ae <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	b2da      	uxtb	r2, r3
 800579c:	490c      	ldr	r1, [pc, #48]	; (80057d0 <__NVIC_SetPriority+0x4c>)
 800579e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a2:	0152      	lsls	r2, r2, #5
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	440b      	add	r3, r1
 80057a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80057ac:	e00a      	b.n	80057c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	4908      	ldr	r1, [pc, #32]	; (80057d4 <__NVIC_SetPriority+0x50>)
 80057b4:	79fb      	ldrb	r3, [r7, #7]
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	3b04      	subs	r3, #4
 80057bc:	0152      	lsls	r2, r2, #5
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	440b      	add	r3, r1
 80057c2:	761a      	strb	r2, [r3, #24]
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	e000e100 	.word	0xe000e100
 80057d4:	e000ed00 	.word	0xe000ed00

080057d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80057dc:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <SysTick_Handler+0x1c>)
 80057de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80057e0:	f001 fb9e 	bl	8006f20 <xTaskGetSchedulerState>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d001      	beq.n	80057ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80057ea:	f001 fff3 	bl	80077d4 <xPortSysTickHandler>
  }
}
 80057ee:	bf00      	nop
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	e000e010 	.word	0xe000e010

080057f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80057fc:	2100      	movs	r1, #0
 80057fe:	f06f 0004 	mvn.w	r0, #4
 8005802:	f7ff ffbf 	bl	8005784 <__NVIC_SetPriority>
#endif
}
 8005806:	bf00      	nop
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005812:	f3ef 8305 	mrs	r3, IPSR
 8005816:	603b      	str	r3, [r7, #0]
  return(result);
 8005818:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800581e:	f06f 0305 	mvn.w	r3, #5
 8005822:	607b      	str	r3, [r7, #4]
 8005824:	e00c      	b.n	8005840 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005826:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <osKernelInitialize+0x44>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d105      	bne.n	800583a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800582e:	4b08      	ldr	r3, [pc, #32]	; (8005850 <osKernelInitialize+0x44>)
 8005830:	2201      	movs	r2, #1
 8005832:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005834:	2300      	movs	r3, #0
 8005836:	607b      	str	r3, [r7, #4]
 8005838:	e002      	b.n	8005840 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800583a:	f04f 33ff 	mov.w	r3, #4294967295
 800583e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005840:	687b      	ldr	r3, [r7, #4]
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	20000460 	.word	0x20000460

08005854 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800585a:	f3ef 8305 	mrs	r3, IPSR
 800585e:	603b      	str	r3, [r7, #0]
  return(result);
 8005860:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005866:	f06f 0305 	mvn.w	r3, #5
 800586a:	607b      	str	r3, [r7, #4]
 800586c:	e010      	b.n	8005890 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800586e:	4b0b      	ldr	r3, [pc, #44]	; (800589c <osKernelStart+0x48>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d109      	bne.n	800588a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005876:	f7ff ffbf 	bl	80057f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800587a:	4b08      	ldr	r3, [pc, #32]	; (800589c <osKernelStart+0x48>)
 800587c:	2202      	movs	r2, #2
 800587e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005880:	f000 ff70 	bl	8006764 <vTaskStartScheduler>
      stat = osOK;
 8005884:	2300      	movs	r3, #0
 8005886:	607b      	str	r3, [r7, #4]
 8005888:	e002      	b.n	8005890 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800588a:	f04f 33ff 	mov.w	r3, #4294967295
 800588e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005890:	687b      	ldr	r3, [r7, #4]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000460 	.word	0x20000460

080058a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08e      	sub	sp, #56	; 0x38
 80058a4:	af04      	add	r7, sp, #16
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058b0:	f3ef 8305 	mrs	r3, IPSR
 80058b4:	617b      	str	r3, [r7, #20]
  return(result);
 80058b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d17e      	bne.n	80059ba <osThreadNew+0x11a>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d07b      	beq.n	80059ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058c6:	2318      	movs	r3, #24
 80058c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80058ce:	f04f 33ff 	mov.w	r3, #4294967295
 80058d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d045      	beq.n	8005966 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <osThreadNew+0x48>
        name = attr->name;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d008      	beq.n	800590e <osThreadNew+0x6e>
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	2b38      	cmp	r3, #56	; 0x38
 8005900:	d805      	bhi.n	800590e <osThreadNew+0x6e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <osThreadNew+0x72>
        return (NULL);
 800590e:	2300      	movs	r3, #0
 8005910:	e054      	b.n	80059bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	089b      	lsrs	r3, r3, #2
 8005920:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00e      	beq.n	8005948 <osThreadNew+0xa8>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	2b5b      	cmp	r3, #91	; 0x5b
 8005930:	d90a      	bls.n	8005948 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005936:	2b00      	cmp	r3, #0
 8005938:	d006      	beq.n	8005948 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d002      	beq.n	8005948 <osThreadNew+0xa8>
        mem = 1;
 8005942:	2301      	movs	r3, #1
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	e010      	b.n	800596a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10c      	bne.n	800596a <osThreadNew+0xca>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d108      	bne.n	800596a <osThreadNew+0xca>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <osThreadNew+0xca>
          mem = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	e001      	b.n	800596a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005966:	2300      	movs	r3, #0
 8005968:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d110      	bne.n	8005992 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005978:	9202      	str	r2, [sp, #8]
 800597a:	9301      	str	r3, [sp, #4]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6a3a      	ldr	r2, [r7, #32]
 8005984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fd4c 	bl	8006424 <xTaskCreateStatic>
 800598c:	4603      	mov	r3, r0
 800598e:	613b      	str	r3, [r7, #16]
 8005990:	e013      	b.n	80059ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d110      	bne.n	80059ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	b29a      	uxth	r2, r3
 800599c:	f107 0310 	add.w	r3, r7, #16
 80059a0:	9301      	str	r3, [sp, #4]
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fd7f 	bl	80064ae <xTaskCreate>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d001      	beq.n	80059ba <osThreadNew+0x11a>
            hTask = NULL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059ba:	693b      	ldr	r3, [r7, #16]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3728      	adds	r7, #40	; 0x28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059cc:	f3ef 8305 	mrs	r3, IPSR
 80059d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80059d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <osDelay+0x1c>
    stat = osErrorISR;
 80059d8:	f06f 0305 	mvn.w	r3, #5
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e007      	b.n	80059f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fe96 	bl	800671c <vTaskDelay>
    }
  }

  return (stat);
 80059f0:	68fb      	ldr	r3, [r7, #12]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4a07      	ldr	r2, [pc, #28]	; (8005a28 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4a06      	ldr	r2, [pc, #24]	; (8005a2c <vApplicationGetIdleTaskMemory+0x30>)
 8005a12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2280      	movs	r2, #128	; 0x80
 8005a18:	601a      	str	r2, [r3, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	20000464 	.word	0x20000464
 8005a2c:	200004c0 	.word	0x200004c0

08005a30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <vApplicationGetTimerTaskMemory+0x2c>)
 8005a40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	4a06      	ldr	r2, [pc, #24]	; (8005a60 <vApplicationGetTimerTaskMemory+0x30>)
 8005a46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a4e:	601a      	str	r2, [r3, #0]
}
 8005a50:	bf00      	nop
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	200006c0 	.word	0x200006c0
 8005a60:	2000071c 	.word	0x2000071c

08005a64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f103 0208 	add.w	r2, r3, #8
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f04f 32ff 	mov.w	r2, #4294967295
 8005a7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f103 0208 	add.w	r2, r3, #8
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f103 0208 	add.w	r2, r3, #8
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	601a      	str	r2, [r3, #0]
}
 8005afa:	bf00      	nop
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b06:	b480      	push	{r7}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1c:	d103      	bne.n	8005b26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	e00c      	b.n	8005b40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3308      	adds	r3, #8
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	e002      	b.n	8005b34 <vListInsert+0x2e>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d2f6      	bcs.n	8005b2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	601a      	str	r2, [r3, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6892      	ldr	r2, [r2, #8]
 8005b8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6852      	ldr	r2, [r2, #4]
 8005b98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d103      	bne.n	8005bac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	1e5a      	subs	r2, r3, #1
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d102      	bne.n	8005be6 <xQueueGenericReset+0x1a>
 8005be0:	f001 ff02 	bl	80079e8 <ulSetInterruptMask>
 8005be4:	e7fe      	b.n	8005be4 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8005be6:	f001 fdc9 	bl	800777c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf2:	68f9      	ldr	r1, [r7, #12]
 8005bf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005bf6:	fb01 f303 	mul.w	r3, r1, r3
 8005bfa:	441a      	add	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c16:	3b01      	subs	r3, #1
 8005c18:	68f9      	ldr	r1, [r7, #12]
 8005c1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c1c:	fb01 f303 	mul.w	r3, r1, r3
 8005c20:	441a      	add	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	22ff      	movs	r2, #255	; 0xff
 8005c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	22ff      	movs	r2, #255	; 0xff
 8005c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10e      	bne.n	8005c5a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d014      	beq.n	8005c6e <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3310      	adds	r3, #16
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 ffd3 	bl	8006bf4 <xTaskRemoveFromEventList>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00c      	beq.n	8005c6e <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c54:	f001 fd80 	bl	8007758 <vPortYield>
 8005c58:	e009      	b.n	8005c6e <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3310      	adds	r3, #16
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff ff00 	bl	8005a64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3324      	adds	r3, #36	; 0x24
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff fefb 	bl	8005a64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c6e:	f001 fd97 	bl	80077a0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c72:	2301      	movs	r3, #1
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d102      	bne.n	8005c96 <xQueueGenericCreateStatic+0x1a>
 8005c90:	f001 feaa 	bl	80079e8 <ulSetInterruptMask>
 8005c94:	e7fe      	b.n	8005c94 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <xQueueGenericCreateStatic+0x26>
 8005c9c:	f001 fea4 	bl	80079e8 <ulSetInterruptMask>
 8005ca0:	e7fe      	b.n	8005ca0 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <xQueueGenericCreateStatic+0x32>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <xQueueGenericCreateStatic+0x36>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <xQueueGenericCreateStatic+0x38>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d102      	bne.n	8005cbe <xQueueGenericCreateStatic+0x42>
 8005cb8:	f001 fe96 	bl	80079e8 <ulSetInterruptMask>
 8005cbc:	e7fe      	b.n	8005cbc <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <xQueueGenericCreateStatic+0x4e>
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <xQueueGenericCreateStatic+0x52>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <xQueueGenericCreateStatic+0x54>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <xQueueGenericCreateStatic+0x5e>
 8005cd4:	f001 fe88 	bl	80079e8 <ulSetInterruptMask>
 8005cd8:	e7fe      	b.n	8005cd8 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005cda:	2350      	movs	r3, #80	; 0x50
 8005cdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b50      	cmp	r3, #80	; 0x50
 8005ce2:	d002      	beq.n	8005cea <xQueueGenericCreateStatic+0x6e>
 8005ce4:	f001 fe80 	bl	80079e8 <ulSetInterruptMask>
 8005ce8:	e7fe      	b.n	8005ce8 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cea:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00d      	beq.n	8005d12 <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cfe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	4613      	mov	r3, r2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f805 	bl	8005d1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d12:	697b      	ldr	r3, [r7, #20]
	}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d103      	bne.n	8005d38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	e002      	b.n	8005d3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	69b8      	ldr	r0, [r7, #24]
 8005d4e:	f7ff ff3d 	bl	8005bcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b08a      	sub	sp, #40	; 0x28
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	607a      	str	r2, [r7, #4]
 8005d6e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d70:	2300      	movs	r3, #0
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d102      	bne.n	8005d84 <xQueueGenericSend+0x22>
 8005d7e:	f001 fe33 	bl	80079e8 <ulSetInterruptMask>
 8005d82:	e7fe      	b.n	8005d82 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d103      	bne.n	8005d92 <xQueueGenericSend+0x30>
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <xQueueGenericSend+0x34>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <xQueueGenericSend+0x36>
 8005d96:	2300      	movs	r3, #0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d102      	bne.n	8005da2 <xQueueGenericSend+0x40>
 8005d9c:	f001 fe24 	bl	80079e8 <ulSetInterruptMask>
 8005da0:	e7fe      	b.n	8005da0 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d103      	bne.n	8005db0 <xQueueGenericSend+0x4e>
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <xQueueGenericSend+0x52>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <xQueueGenericSend+0x54>
 8005db4:	2300      	movs	r3, #0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d102      	bne.n	8005dc0 <xQueueGenericSend+0x5e>
 8005dba:	f001 fe15 	bl	80079e8 <ulSetInterruptMask>
 8005dbe:	e7fe      	b.n	8005dbe <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dc0:	f001 f8ae 	bl	8006f20 <xTaskGetSchedulerState>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d102      	bne.n	8005dd0 <xQueueGenericSend+0x6e>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <xQueueGenericSend+0x72>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e000      	b.n	8005dd6 <xQueueGenericSend+0x74>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d102      	bne.n	8005de0 <xQueueGenericSend+0x7e>
 8005dda:	f001 fe05 	bl	80079e8 <ulSetInterruptMask>
 8005dde:	e7fe      	b.n	8005dde <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005de0:	f001 fccc 	bl	800777c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d302      	bcc.n	8005df6 <xQueueGenericSend+0x94>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d11d      	bne.n	8005e32 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	6a38      	ldr	r0, [r7, #32]
 8005dfc:	f000 f9a4 	bl	8006148 <prvCopyDataToQueue>
 8005e00:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	3324      	adds	r3, #36	; 0x24
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fef0 	bl	8006bf4 <xTaskRemoveFromEventList>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d007      	beq.n	8005e2a <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e1a:	f001 fc9d 	bl	8007758 <vPortYield>
 8005e1e:	e004      	b.n	8005e2a <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e26:	f001 fc97 	bl	8007758 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e2a:	f001 fcb9 	bl	80077a0 <vPortExitCritical>
				return pdPASS;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e05c      	b.n	8005eec <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e38:	f001 fcb2 	bl	80077a0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e055      	b.n	8005eec <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e46:	f107 0314 	add.w	r3, r7, #20
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 ff2e 	bl	8006cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e50:	2301      	movs	r3, #1
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e54:	f001 fca4 	bl	80077a0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e58:	f000 fcda 	bl	8006810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e5c:	f001 fc8e 	bl	800777c <vPortEnterCritical>
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e66:	b25b      	sxtb	r3, r3
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6c:	d103      	bne.n	8005e76 <xQueueGenericSend+0x114>
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e7c:	b25b      	sxtb	r3, r3
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	d103      	bne.n	8005e8c <xQueueGenericSend+0x12a>
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e8c:	f001 fc88 	bl	80077a0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e90:	1d3a      	adds	r2, r7, #4
 8005e92:	f107 0314 	add.w	r3, r7, #20
 8005e96:	4611      	mov	r1, r2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 ff1d 	bl	8006cd8 <xTaskCheckForTimeOut>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d11d      	bne.n	8005ee0 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ea4:	6a38      	ldr	r0, [r7, #32]
 8005ea6:	f000 fa47 	bl	8006338 <prvIsQueueFull>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d011      	beq.n	8005ed4 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	3310      	adds	r3, #16
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fe5b 	bl	8006b74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ebe:	6a38      	ldr	r0, [r7, #32]
 8005ec0:	f000 f9d2 	bl	8006268 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ec4:	f000 fcb2 	bl	800682c <xTaskResumeAll>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d188      	bne.n	8005de0 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 8005ece:	f001 fc43 	bl	8007758 <vPortYield>
 8005ed2:	e785      	b.n	8005de0 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ed4:	6a38      	ldr	r0, [r7, #32]
 8005ed6:	f000 f9c7 	bl	8006268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eda:	f000 fca7 	bl	800682c <xTaskResumeAll>
 8005ede:	e77f      	b.n	8005de0 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ee0:	6a38      	ldr	r0, [r7, #32]
 8005ee2:	f000 f9c1 	bl	8006268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ee6:	f000 fca1 	bl	800682c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005eea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3728      	adds	r7, #40	; 0x28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08a      	sub	sp, #40	; 0x28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <xQueueGenericSendFromISR+0x1e>
 8005f0c:	f001 fd6c 	bl	80079e8 <ulSetInterruptMask>
 8005f10:	e7fe      	b.n	8005f10 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d103      	bne.n	8005f20 <xQueueGenericSendFromISR+0x2c>
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <xQueueGenericSendFromISR+0x30>
 8005f20:	2301      	movs	r3, #1
 8005f22:	e000      	b.n	8005f26 <xQueueGenericSendFromISR+0x32>
 8005f24:	2300      	movs	r3, #0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <xQueueGenericSendFromISR+0x3c>
 8005f2a:	f001 fd5d 	bl	80079e8 <ulSetInterruptMask>
 8005f2e:	e7fe      	b.n	8005f2e <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d103      	bne.n	8005f3e <xQueueGenericSendFromISR+0x4a>
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <xQueueGenericSendFromISR+0x4e>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <xQueueGenericSendFromISR+0x50>
 8005f42:	2300      	movs	r3, #0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d102      	bne.n	8005f4e <xQueueGenericSendFromISR+0x5a>
 8005f48:	f001 fd4e 	bl	80079e8 <ulSetInterruptMask>
 8005f4c:	e7fe      	b.n	8005f4c <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f4e:	f001 fd4b 	bl	80079e8 <ulSetInterruptMask>
 8005f52:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d302      	bcc.n	8005f66 <xQueueGenericSendFromISR+0x72>
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d12d      	bne.n	8005fc2 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f6c:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	6a38      	ldr	r0, [r7, #32]
 8005f7a:	f000 f8e5 	bl	8006148 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f86:	d112      	bne.n	8005fae <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d015      	beq.n	8005fbc <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	3324      	adds	r3, #36	; 0x24
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fe2d 	bl	8006bf4 <xTaskRemoveFromEventList>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00d      	beq.n	8005fbc <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	e006      	b.n	8005fbc <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fae:	7efb      	ldrb	r3, [r7, #27]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	b25a      	sxtb	r2, r3
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8005fc0:	e001      	b.n	8005fc6 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005fc6:	69f8      	ldr	r0, [r7, #28]
 8005fc8:	f001 fd1b 	bl	8007a02 <vClearInterruptMask>

	return xReturn;
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3728      	adds	r7, #40	; 0x28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b08a      	sub	sp, #40	; 0x28
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d102      	bne.n	8005ff6 <xQueueReceive+0x20>
 8005ff0:	f001 fcfa 	bl	80079e8 <ulSetInterruptMask>
 8005ff4:	e7fe      	b.n	8005ff4 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d103      	bne.n	8006004 <xQueueReceive+0x2e>
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <xQueueReceive+0x32>
 8006004:	2301      	movs	r3, #1
 8006006:	e000      	b.n	800600a <xQueueReceive+0x34>
 8006008:	2300      	movs	r3, #0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d102      	bne.n	8006014 <xQueueReceive+0x3e>
 800600e:	f001 fceb 	bl	80079e8 <ulSetInterruptMask>
 8006012:	e7fe      	b.n	8006012 <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006014:	f000 ff84 	bl	8006f20 <xTaskGetSchedulerState>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d102      	bne.n	8006024 <xQueueReceive+0x4e>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <xQueueReceive+0x52>
 8006024:	2301      	movs	r3, #1
 8006026:	e000      	b.n	800602a <xQueueReceive+0x54>
 8006028:	2300      	movs	r3, #0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d102      	bne.n	8006034 <xQueueReceive+0x5e>
 800602e:	f001 fcdb 	bl	80079e8 <ulSetInterruptMask>
 8006032:	e7fe      	b.n	8006032 <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006034:	f001 fba2 	bl	800777c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d019      	beq.n	8006078 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	6a38      	ldr	r0, [r7, #32]
 8006048:	f000 f8e8 	bl	800621c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	1e5a      	subs	r2, r3, #1
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d009      	beq.n	8006070 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	3310      	adds	r3, #16
 8006060:	4618      	mov	r0, r3
 8006062:	f000 fdc7 	bl	8006bf4 <xTaskRemoveFromEventList>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800606c:	f001 fb74 	bl	8007758 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006070:	f001 fb96 	bl	80077a0 <vPortExitCritical>
				return pdPASS;
 8006074:	2301      	movs	r3, #1
 8006076:	e063      	b.n	8006140 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d103      	bne.n	8006086 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800607e:	f001 fb8f 	bl	80077a0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006082:	2300      	movs	r3, #0
 8006084:	e05c      	b.n	8006140 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800608c:	f107 0314 	add.w	r3, r7, #20
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fe0b 	bl	8006cac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006096:	2301      	movs	r3, #1
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800609a:	f001 fb81 	bl	80077a0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800609e:	f000 fbb7 	bl	8006810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060a2:	f001 fb6b 	bl	800777c <vPortEnterCritical>
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060ac:	b25b      	sxtb	r3, r3
 80060ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b2:	d103      	bne.n	80060bc <xQueueReceive+0xe6>
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060c2:	b25b      	sxtb	r3, r3
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d103      	bne.n	80060d2 <xQueueReceive+0xfc>
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060d2:	f001 fb65 	bl	80077a0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060d6:	1d3a      	adds	r2, r7, #4
 80060d8:	f107 0314 	add.w	r3, r7, #20
 80060dc:	4611      	mov	r1, r2
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fdfa 	bl	8006cd8 <xTaskCheckForTimeOut>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d11d      	bne.n	8006126 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060ea:	6a38      	ldr	r0, [r7, #32]
 80060ec:	f000 f90e 	bl	800630c <prvIsQueueEmpty>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d011      	beq.n	800611a <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	3324      	adds	r3, #36	; 0x24
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	4611      	mov	r1, r2
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fd38 	bl	8006b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006104:	6a38      	ldr	r0, [r7, #32]
 8006106:	f000 f8af 	bl	8006268 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800610a:	f000 fb8f 	bl	800682c <xTaskResumeAll>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d18f      	bne.n	8006034 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 8006114:	f001 fb20 	bl	8007758 <vPortYield>
 8006118:	e78c      	b.n	8006034 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800611a:	6a38      	ldr	r0, [r7, #32]
 800611c:	f000 f8a4 	bl	8006268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006120:	f000 fb84 	bl	800682c <xTaskResumeAll>
 8006124:	e786      	b.n	8006034 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006126:	6a38      	ldr	r0, [r7, #32]
 8006128:	f000 f89e 	bl	8006268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800612c:	f000 fb7e 	bl	800682c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006130:	6a38      	ldr	r0, [r7, #32]
 8006132:	f000 f8eb 	bl	800630c <prvIsQueueEmpty>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	f43f af7b 	beq.w	8006034 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800613e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006140:	4618      	mov	r0, r3
 8006142:	3728      	adds	r7, #40	; 0x28
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10d      	bne.n	8006182 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d14d      	bne.n	800620a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fef2 	bl	8006f5c <xTaskPriorityDisinherit>
 8006178:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	609a      	str	r2, [r3, #8]
 8006180:	e043      	b.n	800620a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d119      	bne.n	80061bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6858      	ldr	r0, [r3, #4]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	461a      	mov	r2, r3
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	f001 fe6e 	bl	8007e74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	441a      	add	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d32b      	bcc.n	800620a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	e026      	b.n	800620a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68d8      	ldr	r0, [r3, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c4:	461a      	mov	r2, r3
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	f001 fe54 	bl	8007e74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	425b      	negs	r3, r3
 80061d6:	441a      	add	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d207      	bcs.n	80061f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	425b      	negs	r3, r3
 80061f2:	441a      	add	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d105      	bne.n	800620a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	3b01      	subs	r3, #1
 8006208:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006212:	697b      	ldr	r3, [r7, #20]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	d018      	beq.n	8006260 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	441a      	add	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	429a      	cmp	r2, r3
 8006246:	d303      	bcc.n	8006250 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68d9      	ldr	r1, [r3, #12]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	461a      	mov	r2, r3
 800625a:	6838      	ldr	r0, [r7, #0]
 800625c:	f001 fe0a 	bl	8007e74 <memcpy>
	}
}
 8006260:	bf00      	nop
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006270:	f001 fa84 	bl	800777c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800627a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800627c:	e011      	b.n	80062a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	2b00      	cmp	r3, #0
 8006284:	d012      	beq.n	80062ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3324      	adds	r3, #36	; 0x24
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fcb2 	bl	8006bf4 <xTaskRemoveFromEventList>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006296:	f000 fd71 	bl	8006d7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	3b01      	subs	r3, #1
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	dce9      	bgt.n	800627e <prvUnlockQueue+0x16>
 80062aa:	e000      	b.n	80062ae <prvUnlockQueue+0x46>
					break;
 80062ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	22ff      	movs	r2, #255	; 0xff
 80062b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80062b6:	f001 fa73 	bl	80077a0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062ba:	f001 fa5f 	bl	800777c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062c6:	e011      	b.n	80062ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d012      	beq.n	80062f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3310      	adds	r3, #16
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fc8d 	bl	8006bf4 <xTaskRemoveFromEventList>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062e0:	f000 fd4c 	bl	8006d7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	dce9      	bgt.n	80062c8 <prvUnlockQueue+0x60>
 80062f4:	e000      	b.n	80062f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	22ff      	movs	r2, #255	; 0xff
 80062fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006300:	f001 fa4e 	bl	80077a0 <vPortExitCritical>
}
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006314:	f001 fa32 	bl	800777c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	2b00      	cmp	r3, #0
 800631e:	d102      	bne.n	8006326 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006320:	2301      	movs	r3, #1
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	e001      	b.n	800632a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800632a:	f001 fa39 	bl	80077a0 <vPortExitCritical>

	return xReturn;
 800632e:	68fb      	ldr	r3, [r7, #12]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006340:	f001 fa1c 	bl	800777c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634c:	429a      	cmp	r2, r3
 800634e:	d102      	bne.n	8006356 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006350:	2301      	movs	r3, #1
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	e001      	b.n	800635a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800635a:	f001 fa21 	bl	80077a0 <vPortExitCritical>

	return xReturn;
 800635e:	68fb      	ldr	r3, [r7, #12]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	e014      	b.n	80063a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006378:	4a0f      	ldr	r2, [pc, #60]	; (80063b8 <vQueueAddToRegistry+0x50>)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10b      	bne.n	800639c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006384:	490c      	ldr	r1, [pc, #48]	; (80063b8 <vQueueAddToRegistry+0x50>)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800638e:	4a0a      	ldr	r2, [pc, #40]	; (80063b8 <vQueueAddToRegistry+0x50>)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	4413      	add	r3, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800639a:	e006      	b.n	80063aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b07      	cmp	r3, #7
 80063a6:	d9e7      	bls.n	8006378 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80063a8:	bf00      	nop
 80063aa:	bf00      	nop
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	20000b1c 	.word	0x20000b1c

080063bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063cc:	f001 f9d6 	bl	800777c <vPortEnterCritical>
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063d6:	b25b      	sxtb	r3, r3
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d103      	bne.n	80063e6 <vQueueWaitForMessageRestricted+0x2a>
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ec:	b25b      	sxtb	r3, r3
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f2:	d103      	bne.n	80063fc <vQueueWaitForMessageRestricted+0x40>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063fc:	f001 f9d0 	bl	80077a0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	2b00      	cmp	r3, #0
 8006406:	d106      	bne.n	8006416 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	3324      	adds	r3, #36	; 0x24
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	68b9      	ldr	r1, [r7, #8]
 8006410:	4618      	mov	r0, r3
 8006412:	f000 fbcb 	bl	8006bac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006416:	6978      	ldr	r0, [r7, #20]
 8006418:	f7ff ff26 	bl	8006268 <prvUnlockQueue>
	}
 800641c:	bf00      	nop
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08c      	sub	sp, #48	; 0x30
 8006428:	af04      	add	r7, sp, #16
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <xTaskCreateStatic+0x1a>
 8006438:	f001 fad6 	bl	80079e8 <ulSetInterruptMask>
 800643c:	e7fe      	b.n	800643c <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <xTaskCreateStatic+0x26>
 8006444:	f001 fad0 	bl	80079e8 <ulSetInterruptMask>
 8006448:	e7fe      	b.n	8006448 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800644a:	235c      	movs	r3, #92	; 0x5c
 800644c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b5c      	cmp	r3, #92	; 0x5c
 8006452:	d002      	beq.n	800645a <xTaskCreateStatic+0x36>
 8006454:	f001 fac8 	bl	80079e8 <ulSetInterruptMask>
 8006458:	e7fe      	b.n	8006458 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800645a:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	2b00      	cmp	r3, #0
 8006460:	d01e      	beq.n	80064a0 <xTaskCreateStatic+0x7c>
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01b      	beq.n	80064a0 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006470:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	2202      	movs	r2, #2
 8006476:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800647a:	2300      	movs	r3, #0
 800647c:	9303      	str	r3, [sp, #12]
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	9302      	str	r3, [sp, #8]
 8006482:	f107 0318 	add.w	r3, r7, #24
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f850 	bl	8006538 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006498:	69f8      	ldr	r0, [r7, #28]
 800649a:	f000 f8d7 	bl	800664c <prvAddNewTaskToReadyList>
 800649e:	e001      	b.n	80064a4 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064a4:	69bb      	ldr	r3, [r7, #24]
	}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3720      	adds	r7, #32
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b08c      	sub	sp, #48	; 0x30
 80064b2:	af04      	add	r7, sp, #16
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	603b      	str	r3, [r7, #0]
 80064ba:	4613      	mov	r3, r2
 80064bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4618      	mov	r0, r3
 80064c4:	f001 faf0 	bl	8007aa8 <pvPortMalloc>
 80064c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00e      	beq.n	80064ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064d0:	205c      	movs	r0, #92	; 0x5c
 80064d2:	f001 fae9 	bl	8007aa8 <pvPortMalloc>
 80064d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	631a      	str	r2, [r3, #48]	; 0x30
 80064e4:	e005      	b.n	80064f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064e6:	6978      	ldr	r0, [r7, #20]
 80064e8:	f001 fb92 	bl	8007c10 <vPortFree>
 80064ec:	e001      	b.n	80064f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d017      	beq.n	8006528 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006500:	88fa      	ldrh	r2, [r7, #6]
 8006502:	2300      	movs	r3, #0
 8006504:	9303      	str	r3, [sp, #12]
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	9302      	str	r3, [sp, #8]
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 f80e 	bl	8006538 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800651c:	69f8      	ldr	r0, [r7, #28]
 800651e:	f000 f895 	bl	800664c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006522:	2301      	movs	r3, #1
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	e002      	b.n	800652e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006528:	f04f 33ff 	mov.w	r3, #4294967295
 800652c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800652e:	69bb      	ldr	r3, [r7, #24]
	}
 8006530:	4618      	mov	r0, r3
 8006532:	3720      	adds	r7, #32
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	461a      	mov	r2, r3
 8006550:	21a5      	movs	r1, #165	; 0xa5
 8006552:	f001 fc9c 	bl	8007e8e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006560:	3b01      	subs	r3, #1
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f023 0307 	bic.w	r3, r3, #7
 800656e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <prvInitialiseNewTask+0x48>
 800657a:	f001 fa35 	bl	80079e8 <ulSetInterruptMask>
 800657e:	e7fe      	b.n	800657e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01f      	beq.n	80065c6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	e012      	b.n	80065b2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4413      	add	r3, r2
 8006592:	7819      	ldrb	r1, [r3, #0]
 8006594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	4413      	add	r3, r2
 800659a:	3334      	adds	r3, #52	; 0x34
 800659c:	460a      	mov	r2, r1
 800659e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	4413      	add	r3, r2
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d006      	beq.n	80065ba <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	3301      	adds	r3, #1
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b0f      	cmp	r3, #15
 80065b6:	d9e9      	bls.n	800658c <prvInitialiseNewTask+0x54>
 80065b8:	e000      	b.n	80065bc <prvInitialiseNewTask+0x84>
			{
				break;
 80065ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065c4:	e003      	b.n	80065ce <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	2b37      	cmp	r3, #55	; 0x37
 80065d2:	d901      	bls.n	80065d8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065d4:	2337      	movs	r3, #55	; 0x37
 80065d6:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	6a3a      	ldr	r2, [r7, #32]
 80065dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	6a3a      	ldr	r2, [r7, #32]
 80065e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	2200      	movs	r2, #0
 80065e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	3304      	adds	r3, #4
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fa58 	bl	8005aa4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	3318      	adds	r3, #24
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff fa53 	bl	8005aa4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006602:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006612:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	2200      	movs	r2, #0
 8006618:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	6938      	ldr	r0, [r7, #16]
 800662c:	f001 f902 	bl	8007834 <pxPortInitialiseStack>
 8006630:	4602      	mov	r2, r0
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006642:	bf00      	nop
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006654:	f001 f892 	bl	800777c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006658:	4b2a      	ldr	r3, [pc, #168]	; (8006704 <prvAddNewTaskToReadyList+0xb8>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3301      	adds	r3, #1
 800665e:	4a29      	ldr	r2, [pc, #164]	; (8006704 <prvAddNewTaskToReadyList+0xb8>)
 8006660:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006662:	4b29      	ldr	r3, [pc, #164]	; (8006708 <prvAddNewTaskToReadyList+0xbc>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d109      	bne.n	800667e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800666a:	4a27      	ldr	r2, [pc, #156]	; (8006708 <prvAddNewTaskToReadyList+0xbc>)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006670:	4b24      	ldr	r3, [pc, #144]	; (8006704 <prvAddNewTaskToReadyList+0xb8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d110      	bne.n	800669a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006678:	f000 fb9c 	bl	8006db4 <prvInitialiseTaskLists>
 800667c:	e00d      	b.n	800669a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800667e:	4b23      	ldr	r3, [pc, #140]	; (800670c <prvAddNewTaskToReadyList+0xc0>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006686:	4b20      	ldr	r3, [pc, #128]	; (8006708 <prvAddNewTaskToReadyList+0xbc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	429a      	cmp	r2, r3
 8006692:	d802      	bhi.n	800669a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006694:	4a1c      	ldr	r2, [pc, #112]	; (8006708 <prvAddNewTaskToReadyList+0xbc>)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800669a:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <prvAddNewTaskToReadyList+0xc4>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3301      	adds	r3, #1
 80066a0:	4a1b      	ldr	r2, [pc, #108]	; (8006710 <prvAddNewTaskToReadyList+0xc4>)
 80066a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066a4:	4b1a      	ldr	r3, [pc, #104]	; (8006710 <prvAddNewTaskToReadyList+0xc4>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b0:	4b18      	ldr	r3, [pc, #96]	; (8006714 <prvAddNewTaskToReadyList+0xc8>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d903      	bls.n	80066c0 <prvAddNewTaskToReadyList+0x74>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	4a15      	ldr	r2, [pc, #84]	; (8006714 <prvAddNewTaskToReadyList+0xc8>)
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4a12      	ldr	r2, [pc, #72]	; (8006718 <prvAddNewTaskToReadyList+0xcc>)
 80066ce:	441a      	add	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3304      	adds	r3, #4
 80066d4:	4619      	mov	r1, r3
 80066d6:	4610      	mov	r0, r2
 80066d8:	f7ff f9f1 	bl	8005abe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066dc:	f001 f860 	bl	80077a0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066e0:	4b0a      	ldr	r3, [pc, #40]	; (800670c <prvAddNewTaskToReadyList+0xc0>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d008      	beq.n	80066fa <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066e8:	4b07      	ldr	r3, [pc, #28]	; (8006708 <prvAddNewTaskToReadyList+0xbc>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d201      	bcs.n	80066fa <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066f6:	f001 f82f 	bl	8007758 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20001030 	.word	0x20001030
 8006708:	20000b5c 	.word	0x20000b5c
 800670c:	2000103c 	.word	0x2000103c
 8006710:	2000104c 	.word	0x2000104c
 8006714:	20001038 	.word	0x20001038
 8006718:	20000b60 	.word	0x20000b60

0800671c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00f      	beq.n	800674e <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800672e:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <vTaskDelay+0x44>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <vTaskDelay+0x20>
 8006736:	f001 f957 	bl	80079e8 <ulSetInterruptMask>
 800673a:	e7fe      	b.n	800673a <vTaskDelay+0x1e>
			vTaskSuspendAll();
 800673c:	f000 f868 	bl	8006810 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006740:	2100      	movs	r1, #0
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fc68 	bl	8007018 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006748:	f000 f870 	bl	800682c <xTaskResumeAll>
 800674c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 8006754:	f001 f800 	bl	8007758 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20001058 	.word	0x20001058

08006764 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800676a:	2300      	movs	r3, #0
 800676c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800676e:	2300      	movs	r3, #0
 8006770:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006772:	463a      	mov	r2, r7
 8006774:	1d39      	adds	r1, r7, #4
 8006776:	f107 0308 	add.w	r3, r7, #8
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff f93e 	bl	80059fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	9202      	str	r2, [sp, #8]
 8006788:	9301      	str	r3, [sp, #4]
 800678a:	2300      	movs	r3, #0
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	2300      	movs	r3, #0
 8006790:	460a      	mov	r2, r1
 8006792:	4919      	ldr	r1, [pc, #100]	; (80067f8 <vTaskStartScheduler+0x94>)
 8006794:	4819      	ldr	r0, [pc, #100]	; (80067fc <vTaskStartScheduler+0x98>)
 8006796:	f7ff fe45 	bl	8006424 <xTaskCreateStatic>
 800679a:	4603      	mov	r3, r0
 800679c:	4a18      	ldr	r2, [pc, #96]	; (8006800 <vTaskStartScheduler+0x9c>)
 800679e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067a0:	4b17      	ldr	r3, [pc, #92]	; (8006800 <vTaskStartScheduler+0x9c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067a8:	2301      	movs	r3, #1
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	e001      	b.n	80067b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d102      	bne.n	80067be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80067b8:	f000 fc82 	bl	80070c0 <xTimerCreateTimerTask>
 80067bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d10e      	bne.n	80067e2 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80067c4:	f001 f910 	bl	80079e8 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067c8:	4b0e      	ldr	r3, [pc, #56]	; (8006804 <vTaskStartScheduler+0xa0>)
 80067ca:	f04f 32ff 	mov.w	r2, #4294967295
 80067ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067d0:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <vTaskStartScheduler+0xa4>)
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067d6:	4b0d      	ldr	r3, [pc, #52]	; (800680c <vTaskStartScheduler+0xa8>)
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067dc:	f001 f8b4 	bl	8007948 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067e0:	e006      	b.n	80067f0 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d102      	bne.n	80067f0 <vTaskStartScheduler+0x8c>
 80067ea:	f001 f8fd 	bl	80079e8 <ulSetInterruptMask>
 80067ee:	e7fe      	b.n	80067ee <vTaskStartScheduler+0x8a>
}
 80067f0:	bf00      	nop
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	08007eb8 	.word	0x08007eb8
 80067fc:	08006d95 	.word	0x08006d95
 8006800:	20001054 	.word	0x20001054
 8006804:	20001050 	.word	0x20001050
 8006808:	2000103c 	.word	0x2000103c
 800680c:	20001034 	.word	0x20001034

08006810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006810:	b480      	push	{r7}
 8006812:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006814:	4b04      	ldr	r3, [pc, #16]	; (8006828 <vTaskSuspendAll+0x18>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3301      	adds	r3, #1
 800681a:	4a03      	ldr	r2, [pc, #12]	; (8006828 <vTaskSuspendAll+0x18>)
 800681c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800681e:	bf00      	nop
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	20001058 	.word	0x20001058

0800682c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006836:	2300      	movs	r3, #0
 8006838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800683a:	4b3b      	ldr	r3, [pc, #236]	; (8006928 <xTaskResumeAll+0xfc>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d102      	bne.n	8006848 <xTaskResumeAll+0x1c>
 8006842:	f001 f8d1 	bl	80079e8 <ulSetInterruptMask>
 8006846:	e7fe      	b.n	8006846 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006848:	f000 ff98 	bl	800777c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800684c:	4b36      	ldr	r3, [pc, #216]	; (8006928 <xTaskResumeAll+0xfc>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3b01      	subs	r3, #1
 8006852:	4a35      	ldr	r2, [pc, #212]	; (8006928 <xTaskResumeAll+0xfc>)
 8006854:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006856:	4b34      	ldr	r3, [pc, #208]	; (8006928 <xTaskResumeAll+0xfc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d15c      	bne.n	8006918 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800685e:	4b33      	ldr	r3, [pc, #204]	; (800692c <xTaskResumeAll+0x100>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d058      	beq.n	8006918 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006866:	e02f      	b.n	80068c8 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006868:	4b31      	ldr	r3, [pc, #196]	; (8006930 <xTaskResumeAll+0x104>)
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	3318      	adds	r3, #24
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff f97f 	bl	8005b78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3304      	adds	r3, #4
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff f97a 	bl	8005b78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006888:	4b2a      	ldr	r3, [pc, #168]	; (8006934 <xTaskResumeAll+0x108>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d903      	bls.n	8006898 <xTaskResumeAll+0x6c>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	4a27      	ldr	r2, [pc, #156]	; (8006934 <xTaskResumeAll+0x108>)
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4a24      	ldr	r2, [pc, #144]	; (8006938 <xTaskResumeAll+0x10c>)
 80068a6:	441a      	add	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7ff f905 	bl	8005abe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b8:	4b20      	ldr	r3, [pc, #128]	; (800693c <xTaskResumeAll+0x110>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068be:	429a      	cmp	r2, r3
 80068c0:	d302      	bcc.n	80068c8 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 80068c2:	4b1f      	ldr	r3, [pc, #124]	; (8006940 <xTaskResumeAll+0x114>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068c8:	4b19      	ldr	r3, [pc, #100]	; (8006930 <xTaskResumeAll+0x104>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1cb      	bne.n	8006868 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068d6:	f000 fb03 	bl	8006ee0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068da:	4b1a      	ldr	r3, [pc, #104]	; (8006944 <xTaskResumeAll+0x118>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d010      	beq.n	8006908 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068e6:	f000 f83f 	bl	8006968 <xTaskIncrementTick>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 80068f0:	4b13      	ldr	r3, [pc, #76]	; (8006940 <xTaskResumeAll+0x114>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1f1      	bne.n	80068e6 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8006902:	4b10      	ldr	r3, [pc, #64]	; (8006944 <xTaskResumeAll+0x118>)
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006908:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <xTaskResumeAll+0x114>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006910:	2301      	movs	r3, #1
 8006912:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006914:	f000 ff20 	bl	8007758 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006918:	f000 ff42 	bl	80077a0 <vPortExitCritical>

	return xAlreadyYielded;
 800691c:	68bb      	ldr	r3, [r7, #8]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20001058 	.word	0x20001058
 800692c:	20001030 	.word	0x20001030
 8006930:	20000ff0 	.word	0x20000ff0
 8006934:	20001038 	.word	0x20001038
 8006938:	20000b60 	.word	0x20000b60
 800693c:	20000b5c 	.word	0x20000b5c
 8006940:	20001044 	.word	0x20001044
 8006944:	20001040 	.word	0x20001040

08006948 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800694e:	4b05      	ldr	r3, [pc, #20]	; (8006964 <xTaskGetTickCount+0x1c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006954:	687b      	ldr	r3, [r7, #4]
}
 8006956:	4618      	mov	r0, r3
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20001034 	.word	0x20001034

08006968 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006972:	4b4b      	ldr	r3, [pc, #300]	; (8006aa0 <xTaskIncrementTick+0x138>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f040 8087 	bne.w	8006a8a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800697c:	4b49      	ldr	r3, [pc, #292]	; (8006aa4 <xTaskIncrementTick+0x13c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3301      	adds	r3, #1
 8006982:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006984:	4a47      	ldr	r2, [pc, #284]	; (8006aa4 <xTaskIncrementTick+0x13c>)
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d118      	bne.n	80069c2 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006990:	4b45      	ldr	r3, [pc, #276]	; (8006aa8 <xTaskIncrementTick+0x140>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <xTaskIncrementTick+0x38>
 800699a:	f001 f825 	bl	80079e8 <ulSetInterruptMask>
 800699e:	e7fe      	b.n	800699e <xTaskIncrementTick+0x36>
 80069a0:	4b41      	ldr	r3, [pc, #260]	; (8006aa8 <xTaskIncrementTick+0x140>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	4b41      	ldr	r3, [pc, #260]	; (8006aac <xTaskIncrementTick+0x144>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a3f      	ldr	r2, [pc, #252]	; (8006aa8 <xTaskIncrementTick+0x140>)
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	4a3f      	ldr	r2, [pc, #252]	; (8006aac <xTaskIncrementTick+0x144>)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	4b3e      	ldr	r3, [pc, #248]	; (8006ab0 <xTaskIncrementTick+0x148>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3301      	adds	r3, #1
 80069ba:	4a3d      	ldr	r2, [pc, #244]	; (8006ab0 <xTaskIncrementTick+0x148>)
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	f000 fa8f 	bl	8006ee0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069c2:	4b3c      	ldr	r3, [pc, #240]	; (8006ab4 <xTaskIncrementTick+0x14c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d349      	bcc.n	8006a60 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069cc:	4b36      	ldr	r3, [pc, #216]	; (8006aa8 <xTaskIncrementTick+0x140>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d104      	bne.n	80069e0 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d6:	4b37      	ldr	r3, [pc, #220]	; (8006ab4 <xTaskIncrementTick+0x14c>)
 80069d8:	f04f 32ff 	mov.w	r2, #4294967295
 80069dc:	601a      	str	r2, [r3, #0]
					break;
 80069de:	e03f      	b.n	8006a60 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e0:	4b31      	ldr	r3, [pc, #196]	; (8006aa8 <xTaskIncrementTick+0x140>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d203      	bcs.n	8006a00 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069f8:	4a2e      	ldr	r2, [pc, #184]	; (8006ab4 <xTaskIncrementTick+0x14c>)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069fe:	e02f      	b.n	8006a60 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff f8b7 	bl	8005b78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d004      	beq.n	8006a1c <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	3318      	adds	r3, #24
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff f8ae 	bl	8005b78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	4b25      	ldr	r3, [pc, #148]	; (8006ab8 <xTaskIncrementTick+0x150>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d903      	bls.n	8006a30 <xTaskIncrementTick+0xc8>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	4a22      	ldr	r2, [pc, #136]	; (8006ab8 <xTaskIncrementTick+0x150>)
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4a1f      	ldr	r2, [pc, #124]	; (8006abc <xTaskIncrementTick+0x154>)
 8006a3e:	441a      	add	r2, r3
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4619      	mov	r1, r3
 8006a46:	4610      	mov	r0, r2
 8006a48:	f7ff f839 	bl	8005abe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a50:	4b1b      	ldr	r3, [pc, #108]	; (8006ac0 <xTaskIncrementTick+0x158>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d3b8      	bcc.n	80069cc <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a5e:	e7b5      	b.n	80069cc <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a60:	4b17      	ldr	r3, [pc, #92]	; (8006ac0 <xTaskIncrementTick+0x158>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a66:	4915      	ldr	r1, [pc, #84]	; (8006abc <xTaskIncrementTick+0x154>)
 8006a68:	4613      	mov	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d901      	bls.n	8006a7c <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a7c:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <xTaskIncrementTick+0x15c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d007      	beq.n	8006a94 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006a84:	2301      	movs	r3, #1
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	e004      	b.n	8006a94 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <xTaskIncrementTick+0x160>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	4a0d      	ldr	r2, [pc, #52]	; (8006ac8 <xTaskIncrementTick+0x160>)
 8006a92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a94:	697b      	ldr	r3, [r7, #20]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20001058 	.word	0x20001058
 8006aa4:	20001034 	.word	0x20001034
 8006aa8:	20000fe8 	.word	0x20000fe8
 8006aac:	20000fec 	.word	0x20000fec
 8006ab0:	20001048 	.word	0x20001048
 8006ab4:	20001050 	.word	0x20001050
 8006ab8:	20001038 	.word	0x20001038
 8006abc:	20000b60 	.word	0x20000b60
 8006ac0:	20000b5c 	.word	0x20000b5c
 8006ac4:	20001044 	.word	0x20001044
 8006ac8:	20001040 	.word	0x20001040

08006acc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ad2:	4b23      	ldr	r3, [pc, #140]	; (8006b60 <vTaskSwitchContext+0x94>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ada:	4b22      	ldr	r3, [pc, #136]	; (8006b64 <vTaskSwitchContext+0x98>)
 8006adc:	2201      	movs	r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ae0:	e039      	b.n	8006b56 <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 8006ae2:	4b20      	ldr	r3, [pc, #128]	; (8006b64 <vTaskSwitchContext+0x98>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae8:	4b1f      	ldr	r3, [pc, #124]	; (8006b68 <vTaskSwitchContext+0x9c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	607b      	str	r3, [r7, #4]
 8006aee:	e008      	b.n	8006b02 <vTaskSwitchContext+0x36>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d102      	bne.n	8006afc <vTaskSwitchContext+0x30>
 8006af6:	f000 ff77 	bl	80079e8 <ulSetInterruptMask>
 8006afa:	e7fe      	b.n	8006afa <vTaskSwitchContext+0x2e>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	607b      	str	r3, [r7, #4]
 8006b02:	491a      	ldr	r1, [pc, #104]	; (8006b6c <vTaskSwitchContext+0xa0>)
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	440b      	add	r3, r1
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0ec      	beq.n	8006af0 <vTaskSwitchContext+0x24>
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4a12      	ldr	r2, [pc, #72]	; (8006b6c <vTaskSwitchContext+0xa0>)
 8006b22:	4413      	add	r3, r2
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	605a      	str	r2, [r3, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	3308      	adds	r3, #8
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d104      	bne.n	8006b46 <vTaskSwitchContext+0x7a>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	605a      	str	r2, [r3, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	4a08      	ldr	r2, [pc, #32]	; (8006b70 <vTaskSwitchContext+0xa4>)
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	4a05      	ldr	r2, [pc, #20]	; (8006b68 <vTaskSwitchContext+0x9c>)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6013      	str	r3, [r2, #0]
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20001058 	.word	0x20001058
 8006b64:	20001044 	.word	0x20001044
 8006b68:	20001038 	.word	0x20001038
 8006b6c:	20000b60 	.word	0x20000b60
 8006b70:	20000b5c 	.word	0x20000b5c

08006b74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d102      	bne.n	8006b8a <vTaskPlaceOnEventList+0x16>
 8006b84:	f000 ff30 	bl	80079e8 <ulSetInterruptMask>
 8006b88:	e7fe      	b.n	8006b88 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b8a:	4b07      	ldr	r3, [pc, #28]	; (8006ba8 <vTaskPlaceOnEventList+0x34>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3318      	adds	r3, #24
 8006b90:	4619      	mov	r1, r3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7fe ffb7 	bl	8005b06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b98:	2101      	movs	r1, #1
 8006b9a:	6838      	ldr	r0, [r7, #0]
 8006b9c:	f000 fa3c 	bl	8007018 <prvAddCurrentTaskToDelayedList>
}
 8006ba0:	bf00      	nop
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	20000b5c 	.word	0x20000b5c

08006bac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <vTaskPlaceOnEventListRestricted+0x18>
 8006bbe:	f000 ff13 	bl	80079e8 <ulSetInterruptMask>
 8006bc2:	e7fe      	b.n	8006bc2 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <vTaskPlaceOnEventListRestricted+0x44>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3318      	adds	r3, #24
 8006bca:	4619      	mov	r1, r3
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7fe ff76 	bl	8005abe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 8006bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	68b8      	ldr	r0, [r7, #8]
 8006be2:	f000 fa19 	bl	8007018 <prvAddCurrentTaskToDelayedList>
	}
 8006be6:	bf00      	nop
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000b5c 	.word	0x20000b5c

08006bf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d102      	bne.n	8006c10 <xTaskRemoveFromEventList+0x1c>
 8006c0a:	f000 feed 	bl	80079e8 <ulSetInterruptMask>
 8006c0e:	e7fe      	b.n	8006c0e <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	3318      	adds	r3, #24
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fe ffaf 	bl	8005b78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c1a:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <xTaskRemoveFromEventList+0xa0>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d11d      	bne.n	8006c5e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	3304      	adds	r3, #4
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe ffa6 	bl	8005b78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c30:	4b19      	ldr	r3, [pc, #100]	; (8006c98 <xTaskRemoveFromEventList+0xa4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d903      	bls.n	8006c40 <xTaskRemoveFromEventList+0x4c>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	4a16      	ldr	r2, [pc, #88]	; (8006c98 <xTaskRemoveFromEventList+0xa4>)
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c44:	4613      	mov	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4a13      	ldr	r2, [pc, #76]	; (8006c9c <xTaskRemoveFromEventList+0xa8>)
 8006c4e:	441a      	add	r2, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4619      	mov	r1, r3
 8006c56:	4610      	mov	r0, r2
 8006c58:	f7fe ff31 	bl	8005abe <vListInsertEnd>
 8006c5c:	e005      	b.n	8006c6a <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	3318      	adds	r3, #24
 8006c62:	4619      	mov	r1, r3
 8006c64:	480e      	ldr	r0, [pc, #56]	; (8006ca0 <xTaskRemoveFromEventList+0xac>)
 8006c66:	f7fe ff2a 	bl	8005abe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ca4 <xTaskRemoveFromEventList+0xb0>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d905      	bls.n	8006c84 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ca8 <xTaskRemoveFromEventList+0xb4>)
 8006c7e:	2201      	movs	r2, #1
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	e001      	b.n	8006c88 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8006c88:	68fb      	ldr	r3, [r7, #12]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20001058 	.word	0x20001058
 8006c98:	20001038 	.word	0x20001038
 8006c9c:	20000b60 	.word	0x20000b60
 8006ca0:	20000ff0 	.word	0x20000ff0
 8006ca4:	20000b5c 	.word	0x20000b5c
 8006ca8:	20001044 	.word	0x20001044

08006cac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cb4:	4b06      	ldr	r3, [pc, #24]	; (8006cd0 <vTaskInternalSetTimeOutState+0x24>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006cbc:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <vTaskInternalSetTimeOutState+0x28>)
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	605a      	str	r2, [r3, #4]
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	20001048 	.word	0x20001048
 8006cd4:	20001034 	.word	0x20001034

08006cd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d102      	bne.n	8006cee <xTaskCheckForTimeOut+0x16>
 8006ce8:	f000 fe7e 	bl	80079e8 <ulSetInterruptMask>
 8006cec:	e7fe      	b.n	8006cec <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d102      	bne.n	8006cfa <xTaskCheckForTimeOut+0x22>
 8006cf4:	f000 fe78 	bl	80079e8 <ulSetInterruptMask>
 8006cf8:	e7fe      	b.n	8006cf8 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8006cfa:	f000 fd3f 	bl	800777c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cfe:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <xTaskCheckForTimeOut+0x9c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d16:	d102      	bne.n	8006d1e <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	e023      	b.n	8006d66 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <xTaskCheckForTimeOut+0xa0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d007      	beq.n	8006d3a <xTaskCheckForTimeOut+0x62>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d302      	bcc.n	8006d3a <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d34:	2301      	movs	r3, #1
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	e015      	b.n	8006d66 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d20b      	bcs.n	8006d5c <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	1ad2      	subs	r2, r2, r3
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff ffab 	bl	8006cac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	e004      	b.n	8006d66 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d62:	2301      	movs	r3, #1
 8006d64:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006d66:	f000 fd1b 	bl	80077a0 <vPortExitCritical>

	return xReturn;
 8006d6a:	697b      	ldr	r3, [r7, #20]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20001034 	.word	0x20001034
 8006d78:	20001048 	.word	0x20001048

08006d7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d80:	4b03      	ldr	r3, [pc, #12]	; (8006d90 <vTaskMissedYield+0x14>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	601a      	str	r2, [r3, #0]
}
 8006d86:	bf00      	nop
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	20001044 	.word	0x20001044

08006d94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d9c:	f000 f84a 	bl	8006e34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006da0:	4b03      	ldr	r3, [pc, #12]	; (8006db0 <prvIdleTask+0x1c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d9f9      	bls.n	8006d9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006da8:	f000 fcd6 	bl	8007758 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006dac:	e7f6      	b.n	8006d9c <prvIdleTask+0x8>
 8006dae:	bf00      	nop
 8006db0:	20000b60 	.word	0x20000b60

08006db4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dba:	2300      	movs	r3, #0
 8006dbc:	607b      	str	r3, [r7, #4]
 8006dbe:	e00c      	b.n	8006dda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4a12      	ldr	r2, [pc, #72]	; (8006e14 <prvInitialiseTaskLists+0x60>)
 8006dcc:	4413      	add	r3, r2
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fe fe48 	bl	8005a64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	607b      	str	r3, [r7, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b37      	cmp	r3, #55	; 0x37
 8006dde:	d9ef      	bls.n	8006dc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006de0:	480d      	ldr	r0, [pc, #52]	; (8006e18 <prvInitialiseTaskLists+0x64>)
 8006de2:	f7fe fe3f 	bl	8005a64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006de6:	480d      	ldr	r0, [pc, #52]	; (8006e1c <prvInitialiseTaskLists+0x68>)
 8006de8:	f7fe fe3c 	bl	8005a64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006dec:	480c      	ldr	r0, [pc, #48]	; (8006e20 <prvInitialiseTaskLists+0x6c>)
 8006dee:	f7fe fe39 	bl	8005a64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006df2:	480c      	ldr	r0, [pc, #48]	; (8006e24 <prvInitialiseTaskLists+0x70>)
 8006df4:	f7fe fe36 	bl	8005a64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006df8:	480b      	ldr	r0, [pc, #44]	; (8006e28 <prvInitialiseTaskLists+0x74>)
 8006dfa:	f7fe fe33 	bl	8005a64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <prvInitialiseTaskLists+0x78>)
 8006e00:	4a05      	ldr	r2, [pc, #20]	; (8006e18 <prvInitialiseTaskLists+0x64>)
 8006e02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e04:	4b0a      	ldr	r3, [pc, #40]	; (8006e30 <prvInitialiseTaskLists+0x7c>)
 8006e06:	4a05      	ldr	r2, [pc, #20]	; (8006e1c <prvInitialiseTaskLists+0x68>)
 8006e08:	601a      	str	r2, [r3, #0]
}
 8006e0a:	bf00      	nop
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000b60 	.word	0x20000b60
 8006e18:	20000fc0 	.word	0x20000fc0
 8006e1c:	20000fd4 	.word	0x20000fd4
 8006e20:	20000ff0 	.word	0x20000ff0
 8006e24:	20001004 	.word	0x20001004
 8006e28:	2000101c 	.word	0x2000101c
 8006e2c:	20000fe8 	.word	0x20000fe8
 8006e30:	20000fec 	.word	0x20000fec

08006e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e3a:	e019      	b.n	8006e70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e3c:	f000 fc9e 	bl	800777c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e40:	4b10      	ldr	r3, [pc, #64]	; (8006e84 <prvCheckTasksWaitingTermination+0x50>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fe fe93 	bl	8005b78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e52:	4b0d      	ldr	r3, [pc, #52]	; (8006e88 <prvCheckTasksWaitingTermination+0x54>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	4a0b      	ldr	r2, [pc, #44]	; (8006e88 <prvCheckTasksWaitingTermination+0x54>)
 8006e5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <prvCheckTasksWaitingTermination+0x58>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	4a0a      	ldr	r2, [pc, #40]	; (8006e8c <prvCheckTasksWaitingTermination+0x58>)
 8006e64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e66:	f000 fc9b 	bl	80077a0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f810 	bl	8006e90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e70:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <prvCheckTasksWaitingTermination+0x58>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e1      	bne.n	8006e3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20001004 	.word	0x20001004
 8006e88:	20001030 	.word	0x20001030
 8006e8c:	20001018 	.word	0x20001018

08006e90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d108      	bne.n	8006eb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 feb2 	bl	8007c10 <vPortFree>
				vPortFree( pxTCB );
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 feaf 	bl	8007c10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006eb2:	e010      	b.n	8006ed6 <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d103      	bne.n	8006ec6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fea6 	bl	8007c10 <vPortFree>
	}
 8006ec4:	e007      	b.n	8006ed6 <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d002      	beq.n	8006ed6 <prvDeleteTCB+0x46>
 8006ed0:	f000 fd8a 	bl	80079e8 <ulSetInterruptMask>
 8006ed4:	e7fe      	b.n	8006ed4 <prvDeleteTCB+0x44>
	}
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <prvResetNextTaskUnblockTime+0x38>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d104      	bne.n	8006efa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <prvResetNextTaskUnblockTime+0x3c>)
 8006ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ef8:	e008      	b.n	8006f0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006efa:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <prvResetNextTaskUnblockTime+0x38>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	4a04      	ldr	r2, [pc, #16]	; (8006f1c <prvResetNextTaskUnblockTime+0x3c>)
 8006f0a:	6013      	str	r3, [r2, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	20000fe8 	.word	0x20000fe8
 8006f1c:	20001050 	.word	0x20001050

08006f20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <xTaskGetSchedulerState+0x34>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	607b      	str	r3, [r7, #4]
 8006f32:	e008      	b.n	8006f46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f34:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <xTaskGetSchedulerState+0x38>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	e001      	b.n	8006f46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f42:	2300      	movs	r3, #0
 8006f44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f46:	687b      	ldr	r3, [r7, #4]
	}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	2000103c 	.word	0x2000103c
 8006f58:	20001058 	.word	0x20001058

08006f5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d046      	beq.n	8007000 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f72:	4b26      	ldr	r3, [pc, #152]	; (800700c <xTaskPriorityDisinherit+0xb0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d002      	beq.n	8006f82 <xTaskPriorityDisinherit+0x26>
 8006f7c:	f000 fd34 	bl	80079e8 <ulSetInterruptMask>
 8006f80:	e7fe      	b.n	8006f80 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d102      	bne.n	8006f90 <xTaskPriorityDisinherit+0x34>
 8006f8a:	f000 fd2d 	bl	80079e8 <ulSetInterruptMask>
 8006f8e:	e7fe      	b.n	8006f8e <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f94:	1e5a      	subs	r2, r3, #1
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d02c      	beq.n	8007000 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d128      	bne.n	8007000 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe fde0 	bl	8005b78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd0:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <xTaskPriorityDisinherit+0xb4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d903      	bls.n	8006fe0 <xTaskPriorityDisinherit+0x84>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	4a0c      	ldr	r2, [pc, #48]	; (8007010 <xTaskPriorityDisinherit+0xb4>)
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4a09      	ldr	r2, [pc, #36]	; (8007014 <xTaskPriorityDisinherit+0xb8>)
 8006fee:	441a      	add	r2, r3
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f7fe fd61 	bl	8005abe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007000:	68fb      	ldr	r3, [r7, #12]
	}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20000b5c 	.word	0x20000b5c
 8007010:	20001038 	.word	0x20001038
 8007014:	20000b60 	.word	0x20000b60

08007018 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007022:	4b21      	ldr	r3, [pc, #132]	; (80070a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007028:	4b20      	ldr	r3, [pc, #128]	; (80070ac <prvAddCurrentTaskToDelayedList+0x94>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3304      	adds	r3, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe fda2 	bl	8005b78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703a:	d10a      	bne.n	8007052 <prvAddCurrentTaskToDelayedList+0x3a>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007042:	4b1a      	ldr	r3, [pc, #104]	; (80070ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4819      	ldr	r0, [pc, #100]	; (80070b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800704c:	f7fe fd37 	bl	8005abe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007050:	e026      	b.n	80070a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4413      	add	r3, r2
 8007058:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800705a:	4b14      	ldr	r3, [pc, #80]	; (80070ac <prvAddCurrentTaskToDelayedList+0x94>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	429a      	cmp	r2, r3
 8007068:	d209      	bcs.n	800707e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800706a:	4b12      	ldr	r3, [pc, #72]	; (80070b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3304      	adds	r3, #4
 8007074:	4619      	mov	r1, r3
 8007076:	4610      	mov	r0, r2
 8007078:	f7fe fd45 	bl	8005b06 <vListInsert>
}
 800707c:	e010      	b.n	80070a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800707e:	4b0e      	ldr	r3, [pc, #56]	; (80070b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3304      	adds	r3, #4
 8007088:	4619      	mov	r1, r3
 800708a:	4610      	mov	r0, r2
 800708c:	f7fe fd3b 	bl	8005b06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007090:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	429a      	cmp	r2, r3
 8007098:	d202      	bcs.n	80070a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800709a:	4a08      	ldr	r2, [pc, #32]	; (80070bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	6013      	str	r3, [r2, #0]
}
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	20001034 	.word	0x20001034
 80070ac:	20000b5c 	.word	0x20000b5c
 80070b0:	2000101c 	.word	0x2000101c
 80070b4:	20000fec 	.word	0x20000fec
 80070b8:	20000fe8 	.word	0x20000fe8
 80070bc:	20001050 	.word	0x20001050

080070c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070ca:	f000 fac7 	bl	800765c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070ce:	4b18      	ldr	r3, [pc, #96]	; (8007130 <xTimerCreateTimerTask+0x70>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d020      	beq.n	8007118 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070da:	2300      	movs	r3, #0
 80070dc:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070de:	463a      	mov	r2, r7
 80070e0:	1d39      	adds	r1, r7, #4
 80070e2:	f107 0308 	add.w	r3, r7, #8
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fca2 	bl	8005a30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	9202      	str	r2, [sp, #8]
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	2302      	movs	r3, #2
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	2300      	movs	r3, #0
 80070fc:	460a      	mov	r2, r1
 80070fe:	490d      	ldr	r1, [pc, #52]	; (8007134 <xTimerCreateTimerTask+0x74>)
 8007100:	480d      	ldr	r0, [pc, #52]	; (8007138 <xTimerCreateTimerTask+0x78>)
 8007102:	f7ff f98f 	bl	8006424 <xTaskCreateStatic>
 8007106:	4603      	mov	r3, r0
 8007108:	4a0c      	ldr	r2, [pc, #48]	; (800713c <xTimerCreateTimerTask+0x7c>)
 800710a:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800710c:	4b0b      	ldr	r3, [pc, #44]	; (800713c <xTimerCreateTimerTask+0x7c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8007114:	2301      	movs	r3, #1
 8007116:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d102      	bne.n	8007124 <xTimerCreateTimerTask+0x64>
 800711e:	f000 fc63 	bl	80079e8 <ulSetInterruptMask>
 8007122:	e7fe      	b.n	8007122 <xTimerCreateTimerTask+0x62>
	return xReturn;
 8007124:	68fb      	ldr	r3, [r7, #12]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	2000108c 	.word	0x2000108c
 8007134:	08007ec0 	.word	0x08007ec0
 8007138:	08007255 	.word	0x08007255
 800713c:	20001090 	.word	0x20001090

08007140 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08a      	sub	sp, #40	; 0x28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800714e:	2300      	movs	r3, #0
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d102      	bne.n	800715e <xTimerGenericCommand+0x1e>
 8007158:	f000 fc46 	bl	80079e8 <ulSetInterruptMask>
 800715c:	e7fe      	b.n	800715c <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800715e:	4b1a      	ldr	r3, [pc, #104]	; (80071c8 <xTimerGenericCommand+0x88>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d02a      	beq.n	80071bc <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b05      	cmp	r3, #5
 8007176:	dc18      	bgt.n	80071aa <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007178:	f7ff fed2 	bl	8006f20 <xTaskGetSchedulerState>
 800717c:	4603      	mov	r3, r0
 800717e:	2b02      	cmp	r3, #2
 8007180:	d109      	bne.n	8007196 <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007182:	4b11      	ldr	r3, [pc, #68]	; (80071c8 <xTimerGenericCommand+0x88>)
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	f107 0114 	add.w	r1, r7, #20
 800718a:	2300      	movs	r3, #0
 800718c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800718e:	f7fe fde8 	bl	8005d62 <xQueueGenericSend>
 8007192:	6278      	str	r0, [r7, #36]	; 0x24
 8007194:	e012      	b.n	80071bc <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007196:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <xTimerGenericCommand+0x88>)
 8007198:	6818      	ldr	r0, [r3, #0]
 800719a:	f107 0114 	add.w	r1, r7, #20
 800719e:	2300      	movs	r3, #0
 80071a0:	2200      	movs	r2, #0
 80071a2:	f7fe fdde 	bl	8005d62 <xQueueGenericSend>
 80071a6:	6278      	str	r0, [r7, #36]	; 0x24
 80071a8:	e008      	b.n	80071bc <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071aa:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <xTimerGenericCommand+0x88>)
 80071ac:	6818      	ldr	r0, [r3, #0]
 80071ae:	f107 0114 	add.w	r1, r7, #20
 80071b2:	2300      	movs	r3, #0
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	f7fe fe9d 	bl	8005ef4 <xQueueGenericSendFromISR>
 80071ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3728      	adds	r7, #40	; 0x28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	2000108c 	.word	0x2000108c

080071cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af02      	add	r7, sp, #8
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d6:	4b1e      	ldr	r3, [pc, #120]	; (8007250 <prvProcessExpiredTimer+0x84>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fe fcc7 	bl	8005b78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01a      	beq.n	800722e <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	699a      	ldr	r2, [r3, #24]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	18d1      	adds	r1, r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f8c1 	bl	800738c <prvInsertTimerInActiveList>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d017      	beq.n	8007240 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007210:	2300      	movs	r3, #0
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	2300      	movs	r3, #0
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	2100      	movs	r1, #0
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f7ff ff90 	bl	8007140 <xTimerGenericCommand>
 8007220:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10b      	bne.n	8007240 <prvProcessExpiredTimer+0x74>
 8007228:	f000 fbde 	bl	80079e8 <ulSetInterruptMask>
 800722c:	e7fe      	b.n	800722c <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	b2da      	uxtb	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	4798      	blx	r3
}
 8007248:	bf00      	nop
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20001084 	.word	0x20001084

08007254 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800725c:	f107 0308 	add.w	r3, r7, #8
 8007260:	4618      	mov	r0, r3
 8007262:	f000 f84f 	bl	8007304 <prvGetNextExpireTime>
 8007266:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4619      	mov	r1, r3
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 f803 	bl	8007278 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007272:	f000 f8cd 	bl	8007410 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007276:	e7f1      	b.n	800725c <prvTimerTask+0x8>

08007278 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007282:	f7ff fac5 	bl	8006810 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007286:	f107 0308 	add.w	r3, r7, #8
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f85e 	bl	800734c <prvSampleTimeNow>
 8007290:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d12a      	bne.n	80072ee <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10a      	bne.n	80072b4 <prvProcessTimerOrBlockTask+0x3c>
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d806      	bhi.n	80072b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072a6:	f7ff fac1 	bl	800682c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072aa:	68f9      	ldr	r1, [r7, #12]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff ff8d 	bl	80071cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072b2:	e01e      	b.n	80072f2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d008      	beq.n	80072cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072ba:	4b10      	ldr	r3, [pc, #64]	; (80072fc <prvProcessTimerOrBlockTask+0x84>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <prvProcessTimerOrBlockTask+0x50>
 80072c4:	2301      	movs	r3, #1
 80072c6:	e000      	b.n	80072ca <prvProcessTimerOrBlockTask+0x52>
 80072c8:	2300      	movs	r3, #0
 80072ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072cc:	4b0c      	ldr	r3, [pc, #48]	; (8007300 <prvProcessTimerOrBlockTask+0x88>)
 80072ce:	6818      	ldr	r0, [r3, #0]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	4619      	mov	r1, r3
 80072da:	f7ff f86f 	bl	80063bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072de:	f7ff faa5 	bl	800682c <xTaskResumeAll>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80072e8:	f000 fa36 	bl	8007758 <vPortYield>
}
 80072ec:	e001      	b.n	80072f2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80072ee:	f7ff fa9d 	bl	800682c <xTaskResumeAll>
}
 80072f2:	bf00      	nop
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20001088 	.word	0x20001088
 8007300:	2000108c 	.word	0x2000108c

08007304 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800730c:	4b0e      	ldr	r3, [pc, #56]	; (8007348 <prvGetNextExpireTime+0x44>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <prvGetNextExpireTime+0x16>
 8007316:	2201      	movs	r2, #1
 8007318:	e000      	b.n	800731c <prvGetNextExpireTime+0x18>
 800731a:	2200      	movs	r2, #0
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d105      	bne.n	8007334 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007328:	4b07      	ldr	r3, [pc, #28]	; (8007348 <prvGetNextExpireTime+0x44>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	e001      	b.n	8007338 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007338:	68fb      	ldr	r3, [r7, #12]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	20001084 	.word	0x20001084

0800734c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007354:	f7ff faf8 	bl	8006948 <xTaskGetTickCount>
 8007358:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800735a:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <prvSampleTimeNow+0x3c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	429a      	cmp	r2, r3
 8007362:	d205      	bcs.n	8007370 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007364:	f000 f91e 	bl	80075a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	e002      	b.n	8007376 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007376:	4a04      	ldr	r2, [pc, #16]	; (8007388 <prvSampleTimeNow+0x3c>)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800737c:	68fb      	ldr	r3, [r7, #12]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20001094 	.word	0x20001094

0800738c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d812      	bhi.n	80073d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	1ad2      	subs	r2, r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d302      	bcc.n	80073c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073c0:	2301      	movs	r3, #1
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	e01b      	b.n	80073fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073c6:	4b10      	ldr	r3, [pc, #64]	; (8007408 <prvInsertTimerInActiveList+0x7c>)
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3304      	adds	r3, #4
 80073ce:	4619      	mov	r1, r3
 80073d0:	4610      	mov	r0, r2
 80073d2:	f7fe fb98 	bl	8005b06 <vListInsert>
 80073d6:	e012      	b.n	80073fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d206      	bcs.n	80073ee <prvInsertTimerInActiveList+0x62>
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d302      	bcc.n	80073ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073e8:	2301      	movs	r3, #1
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	e007      	b.n	80073fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073ee:	4b07      	ldr	r3, [pc, #28]	; (800740c <prvInsertTimerInActiveList+0x80>)
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f7fe fb84 	bl	8005b06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073fe:	697b      	ldr	r3, [r7, #20]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20001088 	.word	0x20001088
 800740c:	20001084 	.word	0x20001084

08007410 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08c      	sub	sp, #48	; 0x30
 8007414:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007416:	e0b2      	b.n	800757e <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	da11      	bge.n	8007442 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800741e:	f107 0308 	add.w	r3, r7, #8
 8007422:	3304      	adds	r3, #4
 8007424:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	2b00      	cmp	r3, #0
 800742a:	d102      	bne.n	8007432 <prvProcessReceivedCommands+0x22>
 800742c:	f000 fadc 	bl	80079e8 <ulSetInterruptMask>
 8007430:	e7fe      	b.n	8007430 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007438:	6850      	ldr	r0, [r2, #4]
 800743a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743c:	6892      	ldr	r2, [r2, #8]
 800743e:	4611      	mov	r1, r2
 8007440:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	f2c0 8099 	blt.w	800757c <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	3304      	adds	r3, #4
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fb8c 	bl	8005b78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007460:	1d3b      	adds	r3, r7, #4
 8007462:	4618      	mov	r0, r3
 8007464:	f7ff ff72 	bl	800734c <prvSampleTimeNow>
 8007468:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b09      	cmp	r3, #9
 800746e:	f200 8086 	bhi.w	800757e <prvProcessReceivedCommands+0x16e>
 8007472:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <prvProcessReceivedCommands+0x68>)
 8007474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007478:	080074a1 	.word	0x080074a1
 800747c:	080074a1 	.word	0x080074a1
 8007480:	080074a1 	.word	0x080074a1
 8007484:	08007505 	.word	0x08007505
 8007488:	08007519 	.word	0x08007519
 800748c:	08007553 	.word	0x08007553
 8007490:	080074a1 	.word	0x080074a1
 8007494:	080074a1 	.word	0x080074a1
 8007498:	08007505 	.word	0x08007505
 800749c:	08007519 	.word	0x08007519
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074a6:	f043 0301 	orr.w	r3, r3, #1
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	18d1      	adds	r1, r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	69fa      	ldr	r2, [r7, #28]
 80074be:	6a38      	ldr	r0, [r7, #32]
 80074c0:	f7ff ff64 	bl	800738c <prvInsertTimerInActiveList>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d059      	beq.n	800757e <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	6a38      	ldr	r0, [r7, #32]
 80074d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d04e      	beq.n	800757e <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	441a      	add	r2, r3
 80074e8:	2300      	movs	r3, #0
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	2300      	movs	r3, #0
 80074ee:	2100      	movs	r1, #0
 80074f0:	6a38      	ldr	r0, [r7, #32]
 80074f2:	f7ff fe25 	bl	8007140 <xTimerGenericCommand>
 80074f6:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d13f      	bne.n	800757e <prvProcessReceivedCommands+0x16e>
 80074fe:	f000 fa73 	bl	80079e8 <ulSetInterruptMask>
 8007502:	e7fe      	b.n	8007502 <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800750a:	f023 0301 	bic.w	r3, r3, #1
 800750e:	b2da      	uxtb	r2, r3
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007516:	e032      	b.n	800757e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800751e:	f043 0301 	orr.w	r3, r3, #1
 8007522:	b2da      	uxtb	r2, r3
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d102      	bne.n	800753e <prvProcessReceivedCommands+0x12e>
 8007538:	f000 fa56 	bl	80079e8 <ulSetInterruptMask>
 800753c:	e7fe      	b.n	800753c <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	699a      	ldr	r2, [r3, #24]
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	18d1      	adds	r1, r2, r3
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	69fa      	ldr	r2, [r7, #28]
 800754a:	6a38      	ldr	r0, [r7, #32]
 800754c:	f7ff ff1e 	bl	800738c <prvInsertTimerInActiveList>
					break;
 8007550:	e015      	b.n	800757e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d103      	bne.n	8007568 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8007560:	6a38      	ldr	r0, [r7, #32]
 8007562:	f000 fb55 	bl	8007c10 <vPortFree>
 8007566:	e00a      	b.n	800757e <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800756e:	f023 0301 	bic.w	r3, r3, #1
 8007572:	b2da      	uxtb	r2, r3
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800757a:	e000      	b.n	800757e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800757c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800757e:	4b08      	ldr	r3, [pc, #32]	; (80075a0 <prvProcessReceivedCommands+0x190>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f107 0108 	add.w	r1, r7, #8
 8007586:	2200      	movs	r2, #0
 8007588:	4618      	mov	r0, r3
 800758a:	f7fe fd24 	bl	8005fd6 <xQueueReceive>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	f47f af41 	bne.w	8007418 <prvProcessReceivedCommands+0x8>
	}
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	3728      	adds	r7, #40	; 0x28
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	2000108c 	.word	0x2000108c

080075a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075aa:	e040      	b.n	800762e <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075ac:	4b29      	ldr	r3, [pc, #164]	; (8007654 <prvSwitchTimerLists+0xb0>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075b6:	4b27      	ldr	r3, [pc, #156]	; (8007654 <prvSwitchTimerLists+0xb0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fe fad7 	bl	8005b78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d026      	beq.n	800762e <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	4413      	add	r3, r2
 80075e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d90e      	bls.n	8007610 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075fe:	4b15      	ldr	r3, [pc, #84]	; (8007654 <prvSwitchTimerLists+0xb0>)
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3304      	adds	r3, #4
 8007606:	4619      	mov	r1, r3
 8007608:	4610      	mov	r0, r2
 800760a:	f7fe fa7c 	bl	8005b06 <vListInsert>
 800760e:	e00e      	b.n	800762e <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007610:	2300      	movs	r3, #0
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	2300      	movs	r3, #0
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	2100      	movs	r1, #0
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f7ff fd90 	bl	8007140 <xTimerGenericCommand>
 8007620:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d102      	bne.n	800762e <prvSwitchTimerLists+0x8a>
 8007628:	f000 f9de 	bl	80079e8 <ulSetInterruptMask>
 800762c:	e7fe      	b.n	800762c <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800762e:	4b09      	ldr	r3, [pc, #36]	; (8007654 <prvSwitchTimerLists+0xb0>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1b9      	bne.n	80075ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007638:	4b06      	ldr	r3, [pc, #24]	; (8007654 <prvSwitchTimerLists+0xb0>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800763e:	4b06      	ldr	r3, [pc, #24]	; (8007658 <prvSwitchTimerLists+0xb4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a04      	ldr	r2, [pc, #16]	; (8007654 <prvSwitchTimerLists+0xb0>)
 8007644:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007646:	4a04      	ldr	r2, [pc, #16]	; (8007658 <prvSwitchTimerLists+0xb4>)
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	6013      	str	r3, [r2, #0]
}
 800764c:	bf00      	nop
 800764e:	3718      	adds	r7, #24
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	20001084 	.word	0x20001084
 8007658:	20001088 	.word	0x20001088

0800765c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007662:	f000 f88b 	bl	800777c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007666:	4b15      	ldr	r3, [pc, #84]	; (80076bc <prvCheckForValidListAndQueue+0x60>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d120      	bne.n	80076b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800766e:	4814      	ldr	r0, [pc, #80]	; (80076c0 <prvCheckForValidListAndQueue+0x64>)
 8007670:	f7fe f9f8 	bl	8005a64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007674:	4813      	ldr	r0, [pc, #76]	; (80076c4 <prvCheckForValidListAndQueue+0x68>)
 8007676:	f7fe f9f5 	bl	8005a64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800767a:	4b13      	ldr	r3, [pc, #76]	; (80076c8 <prvCheckForValidListAndQueue+0x6c>)
 800767c:	4a10      	ldr	r2, [pc, #64]	; (80076c0 <prvCheckForValidListAndQueue+0x64>)
 800767e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007680:	4b12      	ldr	r3, [pc, #72]	; (80076cc <prvCheckForValidListAndQueue+0x70>)
 8007682:	4a10      	ldr	r2, [pc, #64]	; (80076c4 <prvCheckForValidListAndQueue+0x68>)
 8007684:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007686:	2300      	movs	r3, #0
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	4b11      	ldr	r3, [pc, #68]	; (80076d0 <prvCheckForValidListAndQueue+0x74>)
 800768c:	4a11      	ldr	r2, [pc, #68]	; (80076d4 <prvCheckForValidListAndQueue+0x78>)
 800768e:	2110      	movs	r1, #16
 8007690:	200a      	movs	r0, #10
 8007692:	f7fe faf3 	bl	8005c7c <xQueueGenericCreateStatic>
 8007696:	4603      	mov	r3, r0
 8007698:	4a08      	ldr	r2, [pc, #32]	; (80076bc <prvCheckForValidListAndQueue+0x60>)
 800769a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800769c:	4b07      	ldr	r3, [pc, #28]	; (80076bc <prvCheckForValidListAndQueue+0x60>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076a4:	4b05      	ldr	r3, [pc, #20]	; (80076bc <prvCheckForValidListAndQueue+0x60>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	490b      	ldr	r1, [pc, #44]	; (80076d8 <prvCheckForValidListAndQueue+0x7c>)
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fe5c 	bl	8006368 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076b0:	f000 f876 	bl	80077a0 <vPortExitCritical>
}
 80076b4:	bf00      	nop
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	2000108c 	.word	0x2000108c
 80076c0:	2000105c 	.word	0x2000105c
 80076c4:	20001070 	.word	0x20001070
 80076c8:	20001084 	.word	0x20001084
 80076cc:	20001088 	.word	0x20001088
 80076d0:	20001138 	.word	0x20001138
 80076d4:	20001098 	.word	0x20001098
 80076d8:	08007ec8 	.word	0x08007ec8

080076dc <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076e0:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <vPortSetupTimerInterrupt+0x34>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076e6:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <vPortSetupTimerInterrupt+0x38>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076ec:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <vPortSetupTimerInterrupt+0x3c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a0a      	ldr	r2, [pc, #40]	; (800771c <vPortSetupTimerInterrupt+0x40>)
 80076f2:	fba2 2303 	umull	r2, r3, r2, r3
 80076f6:	099b      	lsrs	r3, r3, #6
 80076f8:	4a09      	ldr	r2, [pc, #36]	; (8007720 <vPortSetupTimerInterrupt+0x44>)
 80076fa:	3b01      	subs	r3, #1
 80076fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80076fe:	4b04      	ldr	r3, [pc, #16]	; (8007710 <vPortSetupTimerInterrupt+0x34>)
 8007700:	2207      	movs	r2, #7
 8007702:	601a      	str	r2, [r3, #0]
}
 8007704:	bf00      	nop
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	e000e010 	.word	0xe000e010
 8007714:	e000e018 	.word	0xe000e018
 8007718:	20000000 	.word	0x20000000
 800771c:	10624dd3 	.word	0x10624dd3
 8007720:	e000e014 	.word	0xe000e014

08007724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800772a:	2300      	movs	r3, #0
 800772c:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 800772e:	4b09      	ldr	r3, [pc, #36]	; (8007754 <prvTaskExitError+0x30>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007736:	d002      	beq.n	800773e <prvTaskExitError+0x1a>
 8007738:	f000 f956 	bl	80079e8 <ulSetInterruptMask>
 800773c:	e7fe      	b.n	800773c <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 800773e:	f000 f953 	bl	80079e8 <ulSetInterruptMask>

	while( ulDummy == 0 )
 8007742:	bf00      	nop
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0fc      	beq.n	8007744 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 800774a:	bf00      	nop
 800774c:	bf00      	nop
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	2000000c 	.word	0x2000000c

08007758 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800775c:	4b06      	ldr	r3, [pc, #24]	; (8007778 <vPortYield+0x20>)
 800775e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007762:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8007764:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007768:	f3bf 8f6f 	isb	sy
}
 800776c:	bf00      	nop
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8007780:	f000 f932 	bl	80079e8 <ulSetInterruptMask>
	ulCriticalNesting++;
 8007784:	4b05      	ldr	r3, [pc, #20]	; (800779c <vPortEnterCritical+0x20>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3301      	adds	r3, #1
 800778a:	4a04      	ldr	r2, [pc, #16]	; (800779c <vPortEnterCritical+0x20>)
 800778c:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800778e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007792:	f3bf 8f6f 	isb	sy
}
 8007796:	bf00      	nop
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	2000000c 	.word	0x2000000c

080077a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 80077a4:	4b0a      	ldr	r3, [pc, #40]	; (80077d0 <vPortExitCritical+0x30>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d102      	bne.n	80077b2 <vPortExitCritical+0x12>
 80077ac:	f000 f91c 	bl	80079e8 <ulSetInterruptMask>
 80077b0:	e7fe      	b.n	80077b0 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 80077b2:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <vPortExitCritical+0x30>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	4a05      	ldr	r2, [pc, #20]	; (80077d0 <vPortExitCritical+0x30>)
 80077ba:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 80077bc:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <vPortExitCritical+0x30>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d102      	bne.n	80077ca <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 80077c4:	2000      	movs	r0, #0
 80077c6:	f000 f91c 	bl	8007a02 <vClearInterruptMask>
	}
}
 80077ca:	bf00      	nop
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	2000000c 	.word	0x2000000c

080077d4 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80077da:	f000 f905 	bl	80079e8 <ulSetInterruptMask>
 80077de:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077e0:	f7ff f8c2 	bl	8006968 <xTaskIncrementTick>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077ea:	4b05      	ldr	r3, [pc, #20]	; (8007800 <xPortSysTickHandler+0x2c>)
 80077ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f0:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f905 	bl	8007a02 <vClearInterruptMask>
}
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	e000ed04 	.word	0xe000ed04

08007804 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3b02      	subs	r3, #2
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 800781a:	7afb      	ldrb	r3, [r7, #11]
 800781c:	2b02      	cmp	r3, #2
 800781e:	d102      	bne.n	8007826 <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8007820:	f000 f8b6 	bl	8007990 <vRestoreContextOfFirstTask>
		}
		break;
 8007824:	e002      	b.n	800782c <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8007826:	f000 f8df 	bl	80079e8 <ulSetInterruptMask>
 800782a:	e7fe      	b.n	800782a <vPortSVCHandler_C+0x26>
		}
	}
}
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
 8007840:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3b04      	subs	r3, #4
 8007846:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800784e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3b04      	subs	r3, #4
 8007854:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3b04      	subs	r3, #4
 8007860:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007862:	4a38      	ldr	r2, [pc, #224]	; (8007944 <pxPortInitialiseStack+0x110>)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3b04      	subs	r3, #4
 800786c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8007874:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3b04      	subs	r3, #4
 800787a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8007882:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3b04      	subs	r3, #4
 8007888:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8007890:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3b04      	subs	r3, #4
 8007896:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800789e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3b04      	subs	r3, #4
 80078a4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3b04      	subs	r3, #4
 80078b0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80078b8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3b04      	subs	r3, #4
 80078be:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 80078c6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3b04      	subs	r3, #4
 80078cc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 80078d4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	3b04      	subs	r3, #4
 80078da:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 80078e2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3b04      	subs	r3, #4
 80078e8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 80078f0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3b04      	subs	r3, #4
 80078f6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 80078fe:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3b04      	subs	r3, #4
 8007904:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800790c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3b04      	subs	r3, #4
 8007912:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800791a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3b04      	subs	r3, #4
 8007920:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8007928:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3b04      	subs	r3, #4
 800792e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 8007936:	68fb      	ldr	r3, [r7, #12]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	08007725 	.word	0x08007725

08007948 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8007948:	b580      	push	{r7, lr}
 800794a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800794c:	4b0c      	ldr	r3, [pc, #48]	; (8007980 <xPortStartScheduler+0x38>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a0b      	ldr	r2, [pc, #44]	; (8007980 <xPortStartScheduler+0x38>)
 8007952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007956:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007958:	4b09      	ldr	r3, [pc, #36]	; (8007980 <xPortStartScheduler+0x38>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a08      	ldr	r2, [pc, #32]	; (8007980 <xPortStartScheduler+0x38>)
 800795e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007962:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 8007964:	f7ff feba 	bl	80076dc <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8007968:	4b06      	ldr	r3, [pc, #24]	; (8007984 <xPortStartScheduler+0x3c>)
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 800796e:	f000 f827 	bl	80079c0 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 8007972:	f7ff f8ab 	bl	8006acc <vTaskSwitchContext>
	prvTaskExitError();
 8007976:	f7ff fed5 	bl	8007724 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	bd80      	pop	{r7, pc}
 8007980:	e000ed20 	.word	0xe000ed20
 8007984:	2000000c 	.word	0x2000000c
	...

08007990 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8007990:	4a07      	ldr	r2, [pc, #28]	; (80079b0 <pxCurrentTCBConst2>)
 8007992:	6811      	ldr	r1, [r2, #0]
 8007994:	6808      	ldr	r0, [r1, #0]
 8007996:	c806      	ldmia	r0!, {r1, r2}
 8007998:	f381 880b 	msr	PSPLIM, r1
 800799c:	2102      	movs	r1, #2
 800799e:	f381 8814 	msr	CONTROL, r1
 80079a2:	3020      	adds	r0, #32
 80079a4:	f380 8809 	msr	PSP, r0
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	4710      	bx	r2
 80079ae:	bf00      	nop

080079b0 <pxCurrentTCBConst2>:
 80079b0:	20000b5c 	.word	0x20000b5c
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop
	...

080079c0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80079c0:	4807      	ldr	r0, [pc, #28]	; (80079e0 <xVTORConst>)
 80079c2:	6800      	ldr	r0, [r0, #0]
 80079c4:	6800      	ldr	r0, [r0, #0]
 80079c6:	f380 8808 	msr	MSP, r0
 80079ca:	b662      	cpsie	i
 80079cc:	b661      	cpsie	f
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	df02      	svc	2
 80079d8:	bf00      	nop
 80079da:	bf00      	nop
 80079dc:	f3af 8000 	nop.w

080079e0 <xVTORConst>:
 80079e0:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop

080079e8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80079e8:	f3ef 8011 	mrs	r0, BASEPRI
 80079ec:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 80079f0:	f381 8811 	msr	BASEPRI, r1
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80079fe:	bf00      	nop
 8007a00:	4618      	mov	r0, r3

08007a02 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8007a02:	f380 8811 	msr	BASEPRI, r0
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 8007a10:	bf00      	nop
	...

08007a20 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8007a20:	f3ef 8009 	mrs	r0, PSP
 8007a24:	f3ef 820b 	mrs	r2, PSPLIM
 8007a28:	4673      	mov	r3, lr
 8007a2a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8007a2e:	4a10      	ldr	r2, [pc, #64]	; (8007a70 <pxCurrentTCBConst>)
 8007a30:	6811      	ldr	r1, [r2, #0]
 8007a32:	6008      	str	r0, [r1, #0]
 8007a34:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8007a38:	f380 8811 	msr	BASEPRI, r0
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f7ff f842 	bl	8006acc <vTaskSwitchContext>
 8007a48:	f04f 0000 	mov.w	r0, #0
 8007a4c:	f380 8811 	msr	BASEPRI, r0
 8007a50:	4a07      	ldr	r2, [pc, #28]	; (8007a70 <pxCurrentTCBConst>)
 8007a52:	6811      	ldr	r1, [r2, #0]
 8007a54:	6808      	ldr	r0, [r1, #0]
 8007a56:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8007a5a:	f382 880b 	msr	PSPLIM, r2
 8007a5e:	f380 8809 	msr	PSP, r0
 8007a62:	4718      	bx	r3
 8007a64:	f3af 8000 	nop.w
 8007a68:	f3af 8000 	nop.w
 8007a6c:	f3af 8000 	nop.w

08007a70 <pxCurrentTCBConst>:
 8007a70:	20000b5c 	.word	0x20000b5c
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
	...

08007a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8007a80:	f01e 0f04 	tst.w	lr, #4
 8007a84:	bf0c      	ite	eq
 8007a86:	f3ef 8008 	mrseq	r0, MSP
 8007a8a:	f3ef 8009 	mrsne	r0, PSP
 8007a8e:	4904      	ldr	r1, [pc, #16]	; (8007aa0 <svchandler_address_const>)
 8007a90:	4708      	bx	r1
 8007a92:	bf00      	nop
 8007a94:	f3af 8000 	nop.w
 8007a98:	f3af 8000 	nop.w
 8007a9c:	f3af 8000 	nop.w

08007aa0 <svchandler_address_const>:
 8007aa0:	08007805 	.word	0x08007805
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop

08007aa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8007ab4:	f7fe feac 	bl	8006810 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ab8:	4b4f      	ldr	r3, [pc, #316]	; (8007bf8 <pvPortMalloc+0x150>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ac0:	f000 f8f8 	bl	8007cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ac4:	4b4d      	ldr	r3, [pc, #308]	; (8007bfc <pvPortMalloc+0x154>)
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f040 8083 	bne.w	8007bd8 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d015      	beq.n	8007b04 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8007ad8:	2208      	movs	r2, #8
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4413      	add	r3, r2
 8007ade:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f003 0307 	and.w	r3, r3, #7
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00c      	beq.n	8007b04 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f023 0307 	bic.w	r3, r3, #7
 8007af0:	3308      	adds	r3, #8
 8007af2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <pvPortMalloc+0x5c>
 8007afe:	f7ff ff73 	bl	80079e8 <ulSetInterruptMask>
 8007b02:	e7fe      	b.n	8007b02 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d066      	beq.n	8007bd8 <pvPortMalloc+0x130>
 8007b0a:	4b3d      	ldr	r3, [pc, #244]	; (8007c00 <pvPortMalloc+0x158>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d861      	bhi.n	8007bd8 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b14:	4b3b      	ldr	r3, [pc, #236]	; (8007c04 <pvPortMalloc+0x15c>)
 8007b16:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007b18:	4b3a      	ldr	r3, [pc, #232]	; (8007c04 <pvPortMalloc+0x15c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b1e:	e004      	b.n	8007b2a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d903      	bls.n	8007b3c <pvPortMalloc+0x94>
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1f1      	bne.n	8007b20 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b3c:	4b2e      	ldr	r3, [pc, #184]	; (8007bf8 <pvPortMalloc+0x150>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d048      	beq.n	8007bd8 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2208      	movs	r2, #8
 8007b4c:	4413      	add	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	1ad2      	subs	r2, r2, r3
 8007b60:	2308      	movs	r3, #8
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d917      	bls.n	8007b98 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <pvPortMalloc+0xd8>
 8007b7a:	f7ff ff35 	bl	80079e8 <ulSetInterruptMask>
 8007b7e:	e7fe      	b.n	8007b7e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	1ad2      	subs	r2, r2, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b92:	68b8      	ldr	r0, [r7, #8]
 8007b94:	f000 f8f0 	bl	8007d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b98:	4b19      	ldr	r3, [pc, #100]	; (8007c00 <pvPortMalloc+0x158>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	4a17      	ldr	r2, [pc, #92]	; (8007c00 <pvPortMalloc+0x158>)
 8007ba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ba6:	4b16      	ldr	r3, [pc, #88]	; (8007c00 <pvPortMalloc+0x158>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	4b17      	ldr	r3, [pc, #92]	; (8007c08 <pvPortMalloc+0x160>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d203      	bcs.n	8007bba <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007bb2:	4b13      	ldr	r3, [pc, #76]	; (8007c00 <pvPortMalloc+0x158>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a14      	ldr	r2, [pc, #80]	; (8007c08 <pvPortMalloc+0x160>)
 8007bb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <pvPortMalloc+0x154>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bce:	4b0f      	ldr	r3, [pc, #60]	; (8007c0c <pvPortMalloc+0x164>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	4a0d      	ldr	r2, [pc, #52]	; (8007c0c <pvPortMalloc+0x164>)
 8007bd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bd8:	f7fe fe28 	bl	800682c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <pvPortMalloc+0x144>
 8007be6:	f7ff feff 	bl	80079e8 <ulSetInterruptMask>
 8007bea:	e7fe      	b.n	8007bea <pvPortMalloc+0x142>
	return pvReturn;
 8007bec:	68fb      	ldr	r3, [r7, #12]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20003190 	.word	0x20003190
 8007bfc:	200031a4 	.word	0x200031a4
 8007c00:	20003194 	.word	0x20003194
 8007c04:	20003188 	.word	0x20003188
 8007c08:	20003198 	.word	0x20003198
 8007c0c:	2000319c 	.word	0x2000319c

08007c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d03d      	beq.n	8007c9e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c22:	2308      	movs	r3, #8
 8007c24:	425b      	negs	r3, r3
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	4413      	add	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	4b1c      	ldr	r3, [pc, #112]	; (8007ca8 <vPortFree+0x98>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4013      	ands	r3, r2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d102      	bne.n	8007c44 <vPortFree+0x34>
 8007c3e:	f7ff fed3 	bl	80079e8 <ulSetInterruptMask>
 8007c42:	e7fe      	b.n	8007c42 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <vPortFree+0x42>
 8007c4c:	f7ff fecc 	bl	80079e8 <ulSetInterruptMask>
 8007c50:	e7fe      	b.n	8007c50 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <vPortFree+0x98>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01e      	beq.n	8007c9e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d11a      	bne.n	8007c9e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <vPortFree+0x98>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	43db      	mvns	r3, r3
 8007c72:	401a      	ands	r2, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c78:	f7fe fdca 	bl	8006810 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	4b0a      	ldr	r3, [pc, #40]	; (8007cac <vPortFree+0x9c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4413      	add	r3, r2
 8007c86:	4a09      	ldr	r2, [pc, #36]	; (8007cac <vPortFree+0x9c>)
 8007c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c8a:	68b8      	ldr	r0, [r7, #8]
 8007c8c:	f000 f874 	bl	8007d78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c90:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <vPortFree+0xa0>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3301      	adds	r3, #1
 8007c96:	4a06      	ldr	r2, [pc, #24]	; (8007cb0 <vPortFree+0xa0>)
 8007c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c9a:	f7fe fdc7 	bl	800682c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c9e:	bf00      	nop
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	200031a4 	.word	0x200031a4
 8007cac:	20003194 	.word	0x20003194
 8007cb0:	200031a0 	.word	0x200031a0

08007cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007cc0:	4b27      	ldr	r3, [pc, #156]	; (8007d60 <prvHeapInit+0xac>)
 8007cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00c      	beq.n	8007ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3307      	adds	r3, #7
 8007cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0307 	bic.w	r3, r3, #7
 8007cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	4a1f      	ldr	r2, [pc, #124]	; (8007d60 <prvHeapInit+0xac>)
 8007ce4:	4413      	add	r3, r2
 8007ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cec:	4a1d      	ldr	r2, [pc, #116]	; (8007d64 <prvHeapInit+0xb0>)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cf2:	4b1c      	ldr	r3, [pc, #112]	; (8007d64 <prvHeapInit+0xb0>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d00:	2208      	movs	r2, #8
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0307 	bic.w	r3, r3, #7
 8007d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4a15      	ldr	r2, [pc, #84]	; (8007d68 <prvHeapInit+0xb4>)
 8007d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d16:	4b14      	ldr	r3, [pc, #80]	; (8007d68 <prvHeapInit+0xb4>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d1e:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <prvHeapInit+0xb4>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	1ad2      	subs	r2, r2, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d34:	4b0c      	ldr	r3, [pc, #48]	; (8007d68 <prvHeapInit+0xb4>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	4a0a      	ldr	r2, [pc, #40]	; (8007d6c <prvHeapInit+0xb8>)
 8007d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <prvHeapInit+0xbc>)
 8007d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d4c:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <prvHeapInit+0xc0>)
 8007d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d52:	601a      	str	r2, [r3, #0]
}
 8007d54:	bf00      	nop
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	20001188 	.word	0x20001188
 8007d64:	20003188 	.word	0x20003188
 8007d68:	20003190 	.word	0x20003190
 8007d6c:	20003198 	.word	0x20003198
 8007d70:	20003194 	.word	0x20003194
 8007d74:	200031a4 	.word	0x200031a4

08007d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d80:	4b28      	ldr	r3, [pc, #160]	; (8007e24 <prvInsertBlockIntoFreeList+0xac>)
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	e002      	b.n	8007d8c <prvInsertBlockIntoFreeList+0x14>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d8f7      	bhi.n	8007d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	4413      	add	r3, r2
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d108      	bne.n	8007dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	441a      	add	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	441a      	add	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d118      	bne.n	8007e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	4b15      	ldr	r3, [pc, #84]	; (8007e28 <prvInsertBlockIntoFreeList+0xb0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d00d      	beq.n	8007df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	441a      	add	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	e008      	b.n	8007e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007df6:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <prvInsertBlockIntoFreeList+0xb0>)
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e003      	b.n	8007e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d002      	beq.n	8007e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e16:	bf00      	nop
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	20003188 	.word	0x20003188
 8007e28:	20003190 	.word	0x20003190

08007e2c <__libc_init_array>:
 8007e2c:	b570      	push	{r4, r5, r6, lr}
 8007e2e:	4d0d      	ldr	r5, [pc, #52]	; (8007e64 <__libc_init_array+0x38>)
 8007e30:	2600      	movs	r6, #0
 8007e32:	4c0d      	ldr	r4, [pc, #52]	; (8007e68 <__libc_init_array+0x3c>)
 8007e34:	1b64      	subs	r4, r4, r5
 8007e36:	10a4      	asrs	r4, r4, #2
 8007e38:	42a6      	cmp	r6, r4
 8007e3a:	d109      	bne.n	8007e50 <__libc_init_array+0x24>
 8007e3c:	4d0b      	ldr	r5, [pc, #44]	; (8007e6c <__libc_init_array+0x40>)
 8007e3e:	2600      	movs	r6, #0
 8007e40:	4c0b      	ldr	r4, [pc, #44]	; (8007e70 <__libc_init_array+0x44>)
 8007e42:	f000 f82d 	bl	8007ea0 <_init>
 8007e46:	1b64      	subs	r4, r4, r5
 8007e48:	10a4      	asrs	r4, r4, #2
 8007e4a:	42a6      	cmp	r6, r4
 8007e4c:	d105      	bne.n	8007e5a <__libc_init_array+0x2e>
 8007e4e:	bd70      	pop	{r4, r5, r6, pc}
 8007e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e54:	3601      	adds	r6, #1
 8007e56:	4798      	blx	r3
 8007e58:	e7ee      	b.n	8007e38 <__libc_init_array+0xc>
 8007e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e5e:	3601      	adds	r6, #1
 8007e60:	4798      	blx	r3
 8007e62:	e7f2      	b.n	8007e4a <__libc_init_array+0x1e>
 8007e64:	08007f58 	.word	0x08007f58
 8007e68:	08007f58 	.word	0x08007f58
 8007e6c:	08007f58 	.word	0x08007f58
 8007e70:	08007f60 	.word	0x08007f60

08007e74 <memcpy>:
 8007e74:	440a      	add	r2, r1
 8007e76:	1e43      	subs	r3, r0, #1
 8007e78:	4291      	cmp	r1, r2
 8007e7a:	d100      	bne.n	8007e7e <memcpy+0xa>
 8007e7c:	4770      	bx	lr
 8007e7e:	b510      	push	{r4, lr}
 8007e80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e84:	4291      	cmp	r1, r2
 8007e86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e8a:	d1f9      	bne.n	8007e80 <memcpy+0xc>
 8007e8c:	bd10      	pop	{r4, pc}

08007e8e <memset>:
 8007e8e:	4402      	add	r2, r0
 8007e90:	4603      	mov	r3, r0
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d100      	bne.n	8007e98 <memset+0xa>
 8007e96:	4770      	bx	lr
 8007e98:	f803 1b01 	strb.w	r1, [r3], #1
 8007e9c:	e7f9      	b.n	8007e92 <memset+0x4>
	...

08007ea0 <_init>:
 8007ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea2:	bf00      	nop
 8007ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ea6:	bc08      	pop	{r3}
 8007ea8:	469e      	mov	lr, r3
 8007eaa:	4770      	bx	lr

08007eac <_fini>:
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	bf00      	nop
 8007eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb2:	bc08      	pop	{r3}
 8007eb4:	469e      	mov	lr, r3
 8007eb6:	4770      	bx	lr
