
BLINKY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b78  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007d78  08007d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ea4  08007ea4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007ea4  08007ea4  00017ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007eac  08007eac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eac  08007eac  00017eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007eb0  08007eb0  00017eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003174  20000010  08007ec4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003184  08007ec4  00023184  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024997  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044f8  00000000  00000000  000449dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  00048ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bc8  00000000  00000000  0004ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e0b  00000000  00000000  0004c810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f7ba  00000000  00000000  0005361b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00135c2e  00000000  00000000  00072dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a8a03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cf4  00000000  00000000  001a8a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08007d60 	.word	0x08007d60

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08007d60 	.word	0x08007d60

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b982 	b.w	800055c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000274:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000276:	4604      	mov	r4, r0
 8000278:	460f      	mov	r7, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d148      	bne.n	8000310 <__udivmoddi4+0xa0>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d961      	bls.n	8000348 <__udivmoddi4+0xd8>
 8000284:	fab2 f382 	clz	r3, r2
 8000288:	b143      	cbz	r3, 800029c <__udivmoddi4+0x2c>
 800028a:	f1c3 0120 	rsb	r1, r3, #32
 800028e:	409f      	lsls	r7, r3
 8000290:	fa02 fc03 	lsl.w	ip, r2, r3
 8000294:	409c      	lsls	r4, r3
 8000296:	fa20 f101 	lsr.w	r1, r0, r1
 800029a:	430f      	orrs	r7, r1
 800029c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002a0:	fa1f fe8c 	uxth.w	lr, ip
 80002a4:	0c22      	lsrs	r2, r4, #16
 80002a6:	fbb7 f6f1 	udiv	r6, r7, r1
 80002aa:	fb01 7716 	mls	r7, r1, r6, r7
 80002ae:	fb06 f00e 	mul.w	r0, r6, lr
 80002b2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b6:	4290      	cmp	r0, r2
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0x5c>
 80002ba:	eb1c 0202 	adds.w	r2, ip, r2
 80002be:	f106 37ff 	add.w	r7, r6, #4294967295
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x5a>
 80002c4:	4290      	cmp	r0, r2
 80002c6:	f200 8137 	bhi.w	8000538 <__udivmoddi4+0x2c8>
 80002ca:	463e      	mov	r6, r7
 80002cc:	1a12      	subs	r2, r2, r0
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb2 f0f1 	udiv	r0, r2, r1
 80002d4:	fb01 2210 	mls	r2, r1, r0, r2
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	d908      	bls.n	80002f6 <__udivmoddi4+0x86>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ec:	d202      	bcs.n	80002f4 <__udivmoddi4+0x84>
 80002ee:	45a6      	cmp	lr, r4
 80002f0:	f200 811c 	bhi.w	800052c <__udivmoddi4+0x2bc>
 80002f4:	4610      	mov	r0, r2
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	2600      	movs	r6, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0x9a>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c5 4300 	strd	r4, r3, [r5]
 800030a:	4631      	mov	r1, r6
 800030c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000310:	428b      	cmp	r3, r1
 8000312:	d909      	bls.n	8000328 <__udivmoddi4+0xb8>
 8000314:	2d00      	cmp	r5, #0
 8000316:	f000 80fd 	beq.w	8000514 <__udivmoddi4+0x2a4>
 800031a:	2600      	movs	r6, #0
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	4630      	mov	r0, r6
 8000322:	4631      	mov	r1, r6
 8000324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000328:	fab3 f683 	clz	r6, r3
 800032c:	2e00      	cmp	r6, #0
 800032e:	d14b      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000330:	428b      	cmp	r3, r1
 8000332:	f0c0 80f2 	bcc.w	800051a <__udivmoddi4+0x2aa>
 8000336:	4282      	cmp	r2, r0
 8000338:	f240 80ef 	bls.w	800051a <__udivmoddi4+0x2aa>
 800033c:	4630      	mov	r0, r6
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e3      	beq.n	800030a <__udivmoddi4+0x9a>
 8000342:	e9c5 4700 	strd	r4, r7, [r5]
 8000346:	e7e0      	b.n	800030a <__udivmoddi4+0x9a>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xdc>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f382 	clz	r3, r2
 8000350:	2b00      	cmp	r3, #0
 8000352:	f040 809d 	bne.w	8000490 <__udivmoddi4+0x220>
 8000356:	1a89      	subs	r1, r1, r2
 8000358:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800035c:	b297      	uxth	r7, r2
 800035e:	2601      	movs	r6, #1
 8000360:	0c20      	lsrs	r0, r4, #16
 8000362:	fbb1 f2fe 	udiv	r2, r1, lr
 8000366:	fb0e 1112 	mls	r1, lr, r2, r1
 800036a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800036e:	fb07 f002 	mul.w	r0, r7, r2
 8000372:	4288      	cmp	r0, r1
 8000374:	d90f      	bls.n	8000396 <__udivmoddi4+0x126>
 8000376:	eb1c 0101 	adds.w	r1, ip, r1
 800037a:	f102 38ff 	add.w	r8, r2, #4294967295
 800037e:	bf2c      	ite	cs
 8000380:	f04f 0901 	movcs.w	r9, #1
 8000384:	f04f 0900 	movcc.w	r9, #0
 8000388:	4288      	cmp	r0, r1
 800038a:	d903      	bls.n	8000394 <__udivmoddi4+0x124>
 800038c:	f1b9 0f00 	cmp.w	r9, #0
 8000390:	f000 80cf 	beq.w	8000532 <__udivmoddi4+0x2c2>
 8000394:	4642      	mov	r2, r8
 8000396:	1a09      	subs	r1, r1, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	fbb1 f0fe 	udiv	r0, r1, lr
 800039e:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a2:	fb00 f707 	mul.w	r7, r0, r7
 80003a6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x150>
 80003ae:	eb1c 0404 	adds.w	r4, ip, r4
 80003b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x14e>
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	f200 80b4 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003be:	4608      	mov	r0, r1
 80003c0:	1be4      	subs	r4, r4, r7
 80003c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003c6:	e79b      	b.n	8000300 <__udivmoddi4+0x90>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa01 f406 	lsl.w	r4, r1, r6
 80003d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d6:	40f9      	lsrs	r1, r7
 80003d8:	40b2      	lsls	r2, r6
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f307 	lsr.w	r3, r0, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	431c      	orrs	r4, r3
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fa00 f306 	lsl.w	r3, r0, r6
 80003f0:	0c20      	lsrs	r0, r4, #16
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	fb09 1118 	mls	r1, r9, r8, r1
 80003fa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fe:	fb08 f00e 	mul.w	r0, r8, lr
 8000402:	4288      	cmp	r0, r1
 8000404:	d90f      	bls.n	8000426 <__udivmoddi4+0x1b6>
 8000406:	eb1c 0101 	adds.w	r1, ip, r1
 800040a:	f108 3aff 	add.w	sl, r8, #4294967295
 800040e:	bf2c      	ite	cs
 8000410:	f04f 0b01 	movcs.w	fp, #1
 8000414:	f04f 0b00 	movcc.w	fp, #0
 8000418:	4288      	cmp	r0, r1
 800041a:	d903      	bls.n	8000424 <__udivmoddi4+0x1b4>
 800041c:	f1bb 0f00 	cmp.w	fp, #0
 8000420:	f000 808d 	beq.w	800053e <__udivmoddi4+0x2ce>
 8000424:	46d0      	mov	r8, sl
 8000426:	1a09      	subs	r1, r1, r0
 8000428:	b2a4      	uxth	r4, r4
 800042a:	fbb1 f0f9 	udiv	r0, r1, r9
 800042e:	fb09 1110 	mls	r1, r9, r0, r1
 8000432:	fb00 fe0e 	mul.w	lr, r0, lr
 8000436:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800043a:	458e      	cmp	lr, r1
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1de>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d201      	bcs.n	800044c <__udivmoddi4+0x1dc>
 8000448:	458e      	cmp	lr, r1
 800044a:	d87f      	bhi.n	800054c <__udivmoddi4+0x2dc>
 800044c:	4620      	mov	r0, r4
 800044e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	fba0 9802 	umull	r9, r8, r0, r2
 800045a:	4541      	cmp	r1, r8
 800045c:	464c      	mov	r4, r9
 800045e:	46c6      	mov	lr, r8
 8000460:	d302      	bcc.n	8000468 <__udivmoddi4+0x1f8>
 8000462:	d106      	bne.n	8000472 <__udivmoddi4+0x202>
 8000464:	454b      	cmp	r3, r9
 8000466:	d204      	bcs.n	8000472 <__udivmoddi4+0x202>
 8000468:	3801      	subs	r0, #1
 800046a:	ebb9 0402 	subs.w	r4, r9, r2
 800046e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000472:	2d00      	cmp	r5, #0
 8000474:	d070      	beq.n	8000558 <__udivmoddi4+0x2e8>
 8000476:	1b1a      	subs	r2, r3, r4
 8000478:	eb61 010e 	sbc.w	r1, r1, lr
 800047c:	fa22 f306 	lsr.w	r3, r2, r6
 8000480:	fa01 f707 	lsl.w	r7, r1, r7
 8000484:	40f1      	lsrs	r1, r6
 8000486:	2600      	movs	r6, #0
 8000488:	431f      	orrs	r7, r3
 800048a:	e9c5 7100 	strd	r7, r1, [r5]
 800048e:	e73c      	b.n	800030a <__udivmoddi4+0x9a>
 8000490:	fa02 fc03 	lsl.w	ip, r2, r3
 8000494:	f1c3 0020 	rsb	r0, r3, #32
 8000498:	fa01 f203 	lsl.w	r2, r1, r3
 800049c:	fa21 f600 	lsr.w	r6, r1, r0
 80004a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004a4:	fa24 f100 	lsr.w	r1, r4, r0
 80004a8:	fa1f f78c 	uxth.w	r7, ip
 80004ac:	409c      	lsls	r4, r3
 80004ae:	4311      	orrs	r1, r2
 80004b0:	fbb6 f0fe 	udiv	r0, r6, lr
 80004b4:	0c0a      	lsrs	r2, r1, #16
 80004b6:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ba:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004be:	fb00 f607 	mul.w	r6, r0, r7
 80004c2:	4296      	cmp	r6, r2
 80004c4:	d90e      	bls.n	80004e4 <__udivmoddi4+0x274>
 80004c6:	eb1c 0202 	adds.w	r2, ip, r2
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	bf2c      	ite	cs
 80004d0:	f04f 0901 	movcs.w	r9, #1
 80004d4:	f04f 0900 	movcc.w	r9, #0
 80004d8:	4296      	cmp	r6, r2
 80004da:	d902      	bls.n	80004e2 <__udivmoddi4+0x272>
 80004dc:	f1b9 0f00 	cmp.w	r9, #0
 80004e0:	d031      	beq.n	8000546 <__udivmoddi4+0x2d6>
 80004e2:	4640      	mov	r0, r8
 80004e4:	1b92      	subs	r2, r2, r6
 80004e6:	b289      	uxth	r1, r1
 80004e8:	fbb2 f6fe 	udiv	r6, r2, lr
 80004ec:	fb0e 2216 	mls	r2, lr, r6, r2
 80004f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004f4:	fb06 f207 	mul.w	r2, r6, r7
 80004f8:	428a      	cmp	r2, r1
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x29c>
 80004fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000500:	f106 38ff 	add.w	r8, r6, #4294967295
 8000504:	d201      	bcs.n	800050a <__udivmoddi4+0x29a>
 8000506:	428a      	cmp	r2, r1
 8000508:	d823      	bhi.n	8000552 <__udivmoddi4+0x2e2>
 800050a:	4646      	mov	r6, r8
 800050c:	1a89      	subs	r1, r1, r2
 800050e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000512:	e725      	b.n	8000360 <__udivmoddi4+0xf0>
 8000514:	462e      	mov	r6, r5
 8000516:	4628      	mov	r0, r5
 8000518:	e6f7      	b.n	800030a <__udivmoddi4+0x9a>
 800051a:	1a84      	subs	r4, r0, r2
 800051c:	eb61 0303 	sbc.w	r3, r1, r3
 8000520:	2001      	movs	r0, #1
 8000522:	461f      	mov	r7, r3
 8000524:	e70b      	b.n	800033e <__udivmoddi4+0xce>
 8000526:	4464      	add	r4, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e749      	b.n	80003c0 <__udivmoddi4+0x150>
 800052c:	4464      	add	r4, ip
 800052e:	3802      	subs	r0, #2
 8000530:	e6e1      	b.n	80002f6 <__udivmoddi4+0x86>
 8000532:	3a02      	subs	r2, #2
 8000534:	4461      	add	r1, ip
 8000536:	e72e      	b.n	8000396 <__udivmoddi4+0x126>
 8000538:	3e02      	subs	r6, #2
 800053a:	4462      	add	r2, ip
 800053c:	e6c6      	b.n	80002cc <__udivmoddi4+0x5c>
 800053e:	f1a8 0802 	sub.w	r8, r8, #2
 8000542:	4461      	add	r1, ip
 8000544:	e76f      	b.n	8000426 <__udivmoddi4+0x1b6>
 8000546:	3802      	subs	r0, #2
 8000548:	4462      	add	r2, ip
 800054a:	e7cb      	b.n	80004e4 <__udivmoddi4+0x274>
 800054c:	3802      	subs	r0, #2
 800054e:	4461      	add	r1, ip
 8000550:	e77d      	b.n	800044e <__udivmoddi4+0x1de>
 8000552:	3e02      	subs	r6, #2
 8000554:	4461      	add	r1, ip
 8000556:	e7d9      	b.n	800050c <__udivmoddi4+0x29c>
 8000558:	462e      	mov	r6, r5
 800055a:	e6d6      	b.n	800030a <__udivmoddi4+0x9a>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	4907      	ldr	r1, [pc, #28]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4013      	ands	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000

08000590 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	4907      	ldr	r1, [pc, #28]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 80005a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fd95 	bl	80010f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f83c 	bl	8000644 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 fa4a 	bl	8000a64 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80005d0:	f000 f8a8 	bl	8000724 <_ZL12MX_ADC1_Initv>
  MX_LPUART1_UART_Init();
 80005d4:	f000 f92c 	bl	8000830 <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 80005d8:	f000 f98c 	bl	80008f4 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 80005dc:	f000 f9de 	bl	800099c <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 80005e0:	f000 fa12 	bl	8000a08 <_ZL15MX_USB_PCD_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e4:	f005 f876 	bl	80056d4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  // Create the green LED blinky task
     greenLedTaskHandle = osThreadNew(StartGreenLedTask, NULL, &greenLedTask_attributes);
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <main+0x60>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <main+0x64>)
 80005ee:	f005 f8bb 	bl	8005768 <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <main+0x68>)
 80005f6:	6013      	str	r3, [r2, #0]

     // Create the red LED blinky task
     redLedTaskHandle = osThreadNew(StartRedLedTask, NULL, &redLedTask_attributes);
 80005f8:	4a0c      	ldr	r2, [pc, #48]	; (800062c <main+0x6c>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <main+0x70>)
 80005fe:	f005 f8b3 	bl	8005768 <osThreadNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <main+0x74>)
 8000606:	6013      	str	r3, [r2, #0]

     // Create the blue LED blinky task
     blueLedTaskHandle = osThreadNew(StartBlueLedTask, NULL, &blueLedTask_attributes);
 8000608:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <main+0x78>)
 800060a:	2100      	movs	r1, #0
 800060c:	480b      	ldr	r0, [pc, #44]	; (800063c <main+0x7c>)
 800060e:	f005 f8ab 	bl	8005768 <osThreadNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <main+0x80>)
 8000616:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000618:	f005 f880 	bl	800571c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	e7fe      	b.n	800061c <main+0x5c>
 800061e:	bf00      	nop
 8000620:	08007db8 	.word	0x08007db8
 8000624:	08000b89 	.word	0x08000b89
 8000628:	2000042c 	.word	0x2000042c
 800062c:	08007ddc 	.word	0x08007ddc
 8000630:	08000ba9 	.word	0x08000ba9
 8000634:	20000430 	.word	0x20000430
 8000638:	08007e00 	.word	0x08007e00
 800063c:	08000bc9 	.word	0x08000bc9
 8000640:	20000434 	.word	0x20000434

08000644 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b098      	sub	sp, #96	; 0x60
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0318 	add.w	r3, r7, #24
 800064e:	2248      	movs	r2, #72	; 0x48
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f007 fb7b 	bl	8007d4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000666:	2000      	movs	r0, #0
 8000668:	f002 f8f2 	bl	8002850 <HAL_PWREx_ControlVoltageScaling>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	bf14      	ite	ne
 8000672:	2301      	movne	r3, #1
 8000674:	2300      	moveq	r3, #0
 8000676:	b2db      	uxtb	r3, r3
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 800067c:	f000 fab4 	bl	8000be8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000680:	f002 f8c8 	bl	8002814 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <_Z18SystemClock_Configv+0xdc>)
 8000686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800068a:	4a25      	ldr	r2, [pc, #148]	; (8000720 <_Z18SystemClock_Configv+0xdc>)
 800068c:	f023 0318 	bic.w	r3, r3, #24
 8000690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000694:	2334      	movs	r3, #52	; 0x34
 8000696:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000698:	2381      	movs	r3, #129	; 0x81
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a8:	2360      	movs	r3, #96	; 0x60
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b0:	2301      	movs	r3, #1
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80006b8:	2337      	movs	r3, #55	; 0x37
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006bc:	2307      	movs	r3, #7
 80006be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0318 	add.w	r3, r7, #24
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 f94f 	bl	8002970 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80006e2:	f000 fa81 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2303      	movs	r3, #3
 80006ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2105      	movs	r1, #5
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fe0c 	bl	800331c <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000714:	f000 fa68 	bl	8000be8 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3760      	adds	r7, #96	; 0x60
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000

08000724 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
 8000744:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000746:	4b37      	ldr	r3, [pc, #220]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000748:	4a37      	ldr	r2, [pc, #220]	; (8000828 <_ZL12MX_ADC1_Initv+0x104>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800074c:	4b35      	ldr	r3, [pc, #212]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000752:	4b34      	ldr	r3, [pc, #208]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b32      	ldr	r3, [pc, #200]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075e:	4b31      	ldr	r3, [pc, #196]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000764:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000766:	2204      	movs	r2, #4
 8000768:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800076a:	4b2e      	ldr	r3, [pc, #184]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 800076c:	2200      	movs	r2, #0
 800076e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000770:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000772:	2200      	movs	r2, #0
 8000774:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000776:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000778:	2201      	movs	r2, #1
 800077a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077c:	4b29      	ldr	r3, [pc, #164]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000784:	4b27      	ldr	r3, [pc, #156]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000790:	4b24      	ldr	r3, [pc, #144]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 800079a:	2200      	movs	r2, #0
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a6:	481f      	ldr	r0, [pc, #124]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 80007a8:	f000 fea6 	bl	80014f8 <HAL_ADC_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf14      	ite	ne
 80007b2:	2301      	movne	r3, #1
 80007b4:	2300      	moveq	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80007bc:	f000 fa14 	bl	8000be8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4816      	ldr	r0, [pc, #88]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 80007cc:	f001 fbf0 	bl	8001fb0 <HAL_ADCEx_MultiModeConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bf14      	ite	ne
 80007d6:	2301      	movne	r3, #1
 80007d8:	2300      	moveq	r3, #0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80007e0:	f000 fa02 	bl	8000be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <_ZL12MX_ADC1_Initv+0x108>)
 80007e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e8:	2306      	movs	r3, #6
 80007ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f0:	237f      	movs	r3, #127	; 0x7f
 80007f2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007f4:	2304      	movs	r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000802:	f000 ffc5 	bl	8001790 <HAL_ADC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 8000816:	f000 f9e7 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000002c 	.word	0x2000002c
 8000828:	42028000 	.word	0x42028000
 800082c:	0c900008 	.word	0x0c900008

08000830 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000834:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000836:	4a2d      	ldr	r2, [pc, #180]	; (80008ec <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 8000838:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800083c:	4a2c      	ldr	r2, [pc, #176]	; (80008f0 <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 800083e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000854:	220c      	movs	r2, #12
 8000856:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000858:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086a:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000872:	2200      	movs	r2, #0
 8000874:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000876:	481c      	ldr	r0, [pc, #112]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000878:	f003 fe84 	bl	8004584 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	bf14      	ite	ne
 8000882:	2301      	movne	r3, #1
 8000884:	2300      	moveq	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 800088c:	f000 f9ac 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	4815      	ldr	r0, [pc, #84]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000894:	f004 fc1e 	bl	80050d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	bf14      	ite	ne
 800089e:	2301      	movne	r3, #1
 80008a0:	2300      	moveq	r3, #0
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 80008a8:	f000 f99e 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	480e      	ldr	r0, [pc, #56]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008b0:	f004 fc4e 	bl	8005150 <HAL_UARTEx_SetRxFifoThreshold>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 80008c4:	f000 f990 	bl	8000be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008c8:	4807      	ldr	r0, [pc, #28]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008ca:	f004 fbca 	bl	8005062 <HAL_UARTEx_DisableFifoMode>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	bf14      	ite	ne
 80008d4:	2301      	movne	r3, #1
 80008d6:	2300      	moveq	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 80008de:	f000 f983 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000094 	.word	0x20000094
 80008ec:	40008000 	.word	0x40008000
 80008f0:	00033324 	.word	0x00033324

080008f4 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800090a:	4b22      	ldr	r3, [pc, #136]	; (8000994 <_ZL11MX_RTC_Initv+0xa0>)
 800090c:	4a22      	ldr	r2, [pc, #136]	; (8000998 <_ZL11MX_RTC_Initv+0xa4>)
 800090e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <_ZL11MX_RTC_Initv+0xa0>)
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <_ZL11MX_RTC_Initv+0xa0>)
 8000918:	227f      	movs	r2, #127	; 0x7f
 800091a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <_ZL11MX_RTC_Initv+0xa0>)
 800091e:	22ff      	movs	r2, #255	; 0xff
 8000920:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <_ZL11MX_RTC_Initv+0xa0>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000928:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <_ZL11MX_RTC_Initv+0xa0>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <_ZL11MX_RTC_Initv+0xa0>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <_ZL11MX_RTC_Initv+0xa0>)
 8000936:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800093a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <_ZL11MX_RTC_Initv+0xa0>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000942:	4814      	ldr	r0, [pc, #80]	; (8000994 <_ZL11MX_RTC_Initv+0xa0>)
 8000944:	f003 fce4 	bl	8004310 <HAL_RTC_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	bf14      	ite	ne
 800094e:	2301      	movne	r3, #1
 8000950:	2300      	moveq	r3, #0
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 8000958:	f000 f946 	bl	8000be8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800095c:	2300      	movs	r3, #0
 800095e:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	4808      	ldr	r0, [pc, #32]	; (8000994 <_ZL11MX_RTC_Initv+0xa0>)
 8000972:	f003 fddb 	bl	800452c <HAL_RTCEx_PrivilegeModeSet>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	bf14      	ite	ne
 800097c:	2301      	movne	r3, #1
 800097e:	2300      	moveq	r3, #0
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8000986:	f000 f92f 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000128 	.word	0x20000128
 8000998:	40002800 	.word	0x40002800

0800099c <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
 80009b0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80009b2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80009b6:	f7ff fdeb 	bl	8000590 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80009ba:	2002      	movs	r0, #2
 80009bc:	f7ff fdd0 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff fdcd 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009cc:	2303      	movs	r3, #3
 80009ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	4809      	ldr	r0, [pc, #36]	; (8000a00 <_ZL13MX_UCPD1_Initv+0x64>)
 80009da:	f004 fd90 	bl	80054fe <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80009de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80009e4:	2303      	movs	r3, #3
 80009e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <_ZL13MX_UCPD1_Initv+0x68>)
 80009f2:	f004 fd84 	bl	80054fe <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	42020400 	.word	0x42020400
 8000a04:	42020000 	.word	0x42020000

08000a08 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000a0e:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <_ZL15MX_USB_PCD_Initv+0x58>)
 8000a10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000a14:	2208      	movs	r2, #8
 8000a16:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000a3e:	f001 fdf1 	bl	8002624 <HAL_PCD_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf14      	ite	ne
 8000a48:	2301      	movne	r3, #1
 8000a4a:	2300      	moveq	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8000a52:	f000 f8c9 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000150 	.word	0x20000150
 8000a60:	4000d400 	.word	0x4000d400

08000a64 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <_ZL12MX_GPIO_Initv+0x114>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a3e      	ldr	r2, [pc, #248]	; (8000b78 <_ZL12MX_GPIO_Initv+0x114>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <_ZL12MX_GPIO_Initv+0x114>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <_ZL12MX_GPIO_Initv+0x114>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <_ZL12MX_GPIO_Initv+0x114>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <_ZL12MX_GPIO_Initv+0x114>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aaa:	4b33      	ldr	r3, [pc, #204]	; (8000b78 <_ZL12MX_GPIO_Initv+0x114>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a32      	ldr	r2, [pc, #200]	; (8000b78 <_ZL12MX_GPIO_Initv+0x114>)
 8000ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <_ZL12MX_GPIO_Initv+0x114>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000ac2:	f001 ff21 	bl	8002908 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <_ZL12MX_GPIO_Initv+0x114>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	4a2b      	ldr	r2, [pc, #172]	; (8000b78 <_ZL12MX_GPIO_Initv+0x114>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad2:	4b29      	ldr	r3, [pc, #164]	; (8000b78 <_ZL12MX_GPIO_Initv+0x114>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	4826      	ldr	r0, [pc, #152]	; (8000b7c <_ZL12MX_GPIO_Initv+0x118>)
 8000ae4:	f001 fd6c 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aee:	4824      	ldr	r0, [pc, #144]	; (8000b80 <_ZL12MX_GPIO_Initv+0x11c>)
 8000af0:	f001 fd66 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	21a0      	movs	r1, #160	; 0xa0
 8000af8:	4822      	ldr	r0, [pc, #136]	; (8000b84 <_ZL12MX_GPIO_Initv+0x120>)
 8000afa:	f001 fd61 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000afe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	481b      	ldr	r0, [pc, #108]	; (8000b84 <_ZL12MX_GPIO_Initv+0x120>)
 8000b16:	f001 fbd3 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000b1a:	2380      	movs	r3, #128	; 0x80
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4812      	ldr	r0, [pc, #72]	; (8000b7c <_ZL12MX_GPIO_Initv+0x118>)
 8000b32:	f001 fbc5 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480c      	ldr	r0, [pc, #48]	; (8000b80 <_ZL12MX_GPIO_Initv+0x11c>)
 8000b50:	f001 fbb6 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000b54:	23a0      	movs	r3, #160	; 0xa0
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <_ZL12MX_GPIO_Initv+0x120>)
 8000b6c:	f001 fba8 	bl	80022c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	42020800 	.word	0x42020800
 8000b80:	42020000 	.word	0x42020000
 8000b84:	42020400 	.word	0x42020400

08000b88 <_Z17StartGreenLedTaskPv>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
/* Green LED Task */
void StartGreenLedTask(void *argument)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); // Toggle Green LED (PC7)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <_Z17StartGreenLedTaskPv+0x1c>)
 8000b94:	f001 fd2c 	bl	80025f0 <HAL_GPIO_TogglePin>
        osDelay(500);                          // Delay for 500 ms
 8000b98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b9c:	f004 fe76 	bl	800588c <osDelay>
        HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); // Toggle Green LED (PC7)
 8000ba0:	e7f6      	b.n	8000b90 <_Z17StartGreenLedTaskPv+0x8>
 8000ba2:	bf00      	nop
 8000ba4:	42020800 	.word	0x42020800

08000ba8 <_Z15StartRedLedTaskPv>:
    }
}

/* Red LED Task */
void StartRedLedTask(void *argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin); // Toggle Red LED (PB14)
 8000bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <_Z15StartRedLedTaskPv+0x1c>)
 8000bb6:	f001 fd1b 	bl	80025f0 <HAL_GPIO_TogglePin>
        osDelay(700);                           // Delay for 700 ms
 8000bba:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000bbe:	f004 fe65 	bl	800588c <osDelay>
        HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin); // Toggle Red LED (PB14)
 8000bc2:	e7f5      	b.n	8000bb0 <_Z15StartRedLedTaskPv+0x8>
 8000bc4:	42020000 	.word	0x42020000

08000bc8 <_Z16StartBlueLedTaskPv>:
    }
}

/* Blue LED Task */
void StartBlueLedTask(void *argument)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin); // Toggle Blue LED (PB7)
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	4804      	ldr	r0, [pc, #16]	; (8000be4 <_Z16StartBlueLedTaskPv+0x1c>)
 8000bd4:	f001 fd0c 	bl	80025f0 <HAL_GPIO_TogglePin>
        osDelay(1000);                         // Delay for 1 second
 8000bd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bdc:	f004 fe56 	bl	800588c <osDelay>
        HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin); // Toggle Blue LED (PB7)
 8000be0:	e7f6      	b.n	8000bd0 <_Z16StartBlueLedTaskPv+0x8>
 8000be2:	bf00      	nop
 8000be4:	42020400 	.word	0x42020400

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <Error_Handler+0x8>
	...

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_MspInit+0x4c>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfe:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6613      	str	r3, [r2, #96]	; 0x60
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2107      	movs	r1, #7
 8000c2e:	f06f 0001 	mvn.w	r0, #1
 8000c32:	f001 fb1e 	bl	8002272 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0ae      	sub	sp, #184	; 0xb8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	2294      	movs	r2, #148	; 0x94
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f007 f872 	bl	8007d4e <memset>
  if(hadc->Instance==ADC1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <HAL_ADC_MspInit+0xa8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d137      	bne.n	8000ce4 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000c7a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 fe2c 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000c92:	f7ff ffa9 	bl	8000be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_ADC_MspInit+0xac>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <HAL_ADC_MspInit+0xac>)
 8000c9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_ADC_MspInit+0xac>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_ADC_MspInit+0xac>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <HAL_ADC_MspInit+0xac>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_ADC_MspInit+0xac>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_ADC_MspInit+0xb0>)
 8000ce0:	f001 faee 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	37b8      	adds	r7, #184	; 0xb8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	42028000 	.word	0x42028000
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	42020800 	.word	0x42020800

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0ae      	sub	sp, #184	; 0xb8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2294      	movs	r2, #148	; 0x94
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f007 f818 	bl	8007d4e <memset>
  if(huart->Instance==LPUART1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a22      	ldr	r2, [pc, #136]	; (8000dac <HAL_UART_MspInit+0xb4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d13d      	bne.n	8000da4 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d28:	2320      	movs	r3, #32
 8000d2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4618      	mov	r0, r3
 8000d36:	f002 fdd5 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d40:	f7ff ff52 	bl	8000be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <HAL_UART_MspInit+0xb8>)
 8000d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d48:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <HAL_UART_MspInit+0xb8>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <HAL_UART_MspInit+0xb8>)
 8000d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <HAL_UART_MspInit+0xb8>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d60:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <HAL_UART_MspInit+0xb8>)
 8000d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_UART_MspInit+0xb8>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000d74:	f001 fdc8 	bl	8002908 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000d78:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d92:	2308      	movs	r3, #8
 8000d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <HAL_UART_MspInit+0xbc>)
 8000da0:	f001 fa8e 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000da4:	bf00      	nop
 8000da6:	37b8      	adds	r7, #184	; 0xb8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40008000 	.word	0x40008000
 8000db0:	40021000 	.word	0x40021000
 8000db4:	42021800 	.word	0x42021800

08000db8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b0a8      	sub	sp, #160	; 0xa0
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2294      	movs	r2, #148	; 0x94
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f006 ffc0 	bl	8007d4e <memset>
  if(hrtc->Instance==RTC)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <HAL_RTC_MspInit+0x74>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d124      	bne.n	8000e22 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ddc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 fd7a 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000df6:	f7ff fef7 	bl	8000be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_RTC_MspInit+0x78>)
 8000dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e00:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <HAL_RTC_MspInit+0x78>)
 8000e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_RTC_MspInit+0x78>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <HAL_RTC_MspInit+0x78>)
 8000e10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e14:	6593      	str	r3, [r2, #88]	; 0x58
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_RTC_MspInit+0x78>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	37a0      	adds	r7, #160	; 0xa0
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40002800 	.word	0x40002800
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b0ae      	sub	sp, #184	; 0xb8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	2294      	movs	r2, #148	; 0x94
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f006 ff7a 	bl	8007d4e <memset>
  if(hpcd->Instance==USB)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <HAL_PCD_MspInit+0xb4>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d13d      	bne.n	8000ee0 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e68:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 fd35 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e80:	f7ff feb2 	bl	8000be8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_PCD_MspInit+0xb8>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	4a18      	ldr	r2, [pc, #96]	; (8000eec <HAL_PCD_MspInit+0xb8>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_PCD_MspInit+0xb8>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000eb6:	230a      	movs	r3, #10
 8000eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <HAL_PCD_MspInit+0xbc>)
 8000ec4:	f001 f9fc 	bl	80022c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_PCD_MspInit+0xb8>)
 8000eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_PCD_MspInit+0xb8>)
 8000ece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_PCD_MspInit+0xb8>)
 8000ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	37b8      	adds	r7, #184	; 0xb8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	4000d400 	.word	0x4000d400
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	42020000 	.word	0x42020000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <NMI_Handler+0x4>

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000f4a:	4b4f      	ldr	r3, [pc, #316]	; (8001088 <SystemCoreClockUpdate+0x144>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d107      	bne.n	8000f66 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000f56:	4b4c      	ldr	r3, [pc, #304]	; (8001088 <SystemCoreClockUpdate+0x144>)
 8000f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	e005      	b.n	8000f72 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000f66:	4b48      	ldr	r3, [pc, #288]	; (8001088 <SystemCoreClockUpdate+0x144>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	091b      	lsrs	r3, r3, #4
 8000f6c:	f003 030f 	and.w	r3, r3, #15
 8000f70:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000f72:	4a46      	ldr	r2, [pc, #280]	; (800108c <SystemCoreClockUpdate+0x148>)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f7c:	4b42      	ldr	r3, [pc, #264]	; (8001088 <SystemCoreClockUpdate+0x144>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b0c      	cmp	r3, #12
 8000f86:	d866      	bhi.n	8001056 <SystemCoreClockUpdate+0x112>
 8000f88:	a201      	add	r2, pc, #4	; (adr r2, 8000f90 <SystemCoreClockUpdate+0x4c>)
 8000f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8e:	bf00      	nop
 8000f90:	08000fc5 	.word	0x08000fc5
 8000f94:	08001057 	.word	0x08001057
 8000f98:	08001057 	.word	0x08001057
 8000f9c:	08001057 	.word	0x08001057
 8000fa0:	08000fcd 	.word	0x08000fcd
 8000fa4:	08001057 	.word	0x08001057
 8000fa8:	08001057 	.word	0x08001057
 8000fac:	08001057 	.word	0x08001057
 8000fb0:	08000fd5 	.word	0x08000fd5
 8000fb4:	08001057 	.word	0x08001057
 8000fb8:	08001057 	.word	0x08001057
 8000fbc:	08001057 	.word	0x08001057
 8000fc0:	08000fdd 	.word	0x08000fdd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000fc4:	4a32      	ldr	r2, [pc, #200]	; (8001090 <SystemCoreClockUpdate+0x14c>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	6013      	str	r3, [r2, #0]
      break;
 8000fca:	e048      	b.n	800105e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000fcc:	4b30      	ldr	r3, [pc, #192]	; (8001090 <SystemCoreClockUpdate+0x14c>)
 8000fce:	4a31      	ldr	r2, [pc, #196]	; (8001094 <SystemCoreClockUpdate+0x150>)
 8000fd0:	601a      	str	r2, [r3, #0]
      break;
 8000fd2:	e044      	b.n	800105e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000fd4:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <SystemCoreClockUpdate+0x14c>)
 8000fd6:	4a30      	ldr	r2, [pc, #192]	; (8001098 <SystemCoreClockUpdate+0x154>)
 8000fd8:	601a      	str	r2, [r3, #0]
      break;
 8000fda:	e040      	b.n	800105e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <SystemCoreClockUpdate+0x144>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <SystemCoreClockUpdate+0x144>)
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d003      	beq.n	8001002 <SystemCoreClockUpdate+0xbe>
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	d006      	beq.n	800100e <SystemCoreClockUpdate+0xca>
 8001000:	e00b      	b.n	800101a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001002:	4a24      	ldr	r2, [pc, #144]	; (8001094 <SystemCoreClockUpdate+0x150>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	613b      	str	r3, [r7, #16]
          break;
 800100c:	e00b      	b.n	8001026 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800100e:	4a22      	ldr	r2, [pc, #136]	; (8001098 <SystemCoreClockUpdate+0x154>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	613b      	str	r3, [r7, #16]
          break;
 8001018:	e005      	b.n	8001026 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	613b      	str	r3, [r7, #16]
          break;
 8001024:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <SystemCoreClockUpdate+0x144>)
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	fb02 f303 	mul.w	r3, r2, r3
 8001036:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <SystemCoreClockUpdate+0x144>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0e5b      	lsrs	r3, r3, #25
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	3301      	adds	r3, #1
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001050:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <SystemCoreClockUpdate+0x14c>)
 8001052:	6013      	str	r3, [r2, #0]
      break;
 8001054:	e003      	b.n	800105e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <SystemCoreClockUpdate+0x14c>)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	6013      	str	r3, [r2, #0]
      break;
 800105c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <SystemCoreClockUpdate+0x144>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	f003 030f 	and.w	r3, r3, #15
 8001068:	4a0c      	ldr	r2, [pc, #48]	; (800109c <SystemCoreClockUpdate+0x158>)
 800106a:	5cd3      	ldrb	r3, [r2, r3]
 800106c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <SystemCoreClockUpdate+0x14c>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	fa22 f303 	lsr.w	r3, r2, r3
 8001078:	4a05      	ldr	r2, [pc, #20]	; (8001090 <SystemCoreClockUpdate+0x14c>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	371c      	adds	r7, #28
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000
 800108c:	08007e3c 	.word	0x08007e3c
 8001090:	20000000 	.word	0x20000000
 8001094:	00f42400 	.word	0x00f42400
 8001098:	007a1200 	.word	0x007a1200
 800109c:	08007e24 	.word	0x08007e24

080010a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010a4:	f7ff ff3c 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010aa:	e003      	b.n	80010b4 <LoopCopyDataInit>

080010ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010b2:	3104      	adds	r1, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010bc:	d3f6      	bcc.n	80010ac <CopyDataInit>
	ldr	r2, =_sbss
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010c0:	e002      	b.n	80010c8 <LoopFillZerobss>

080010c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010c4:	f842 3b04 	str.w	r3, [r2], #4

080010c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <LoopForever+0x16>)
	cmp	r2, r3
 80010ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010cc:	d3f9      	bcc.n	80010c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ce:	f006 fe0d 	bl	8007cec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010d2:	f7ff fa75 	bl	80005c0 <main>

080010d6 <LoopForever>:

LoopForever:
    b LoopForever
 80010d6:	e7fe      	b.n	80010d6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80010d8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80010dc:	08007eb4 	.word	0x08007eb4
	ldr	r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010e4:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80010e8:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80010ec:	20003184 	.word	0x20003184

080010f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC1_2_IRQHandler>

080010f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80010fc:	2004      	movs	r0, #4
 80010fe:	f001 f8ad 	bl	800225c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001102:	f7ff ff1f 	bl	8000f44 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001106:	2007      	movs	r0, #7
 8001108:	f000 f80e 	bl	8001128 <HAL_InitTick>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	e001      	b.n	800111c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001118:	f7ff fd6c 	bl	8000bf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800111c:	79fb      	ldrb	r3, [r7, #7]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_InitTick+0x6c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d023      	beq.n	8001184 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_InitTick+0x70>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_InitTick+0x6c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	fbb3 f3f1 	udiv	r3, r3, r1
 800114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f001 f8a7 	bl	80022a6 <HAL_SYSTICK_Config>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10f      	bne.n	800117e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b07      	cmp	r3, #7
 8001162:	d809      	bhi.n	8001178 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f001 f881 	bl	8002272 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <HAL_InitTick+0x74>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e007      	b.n	8001188 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e004      	b.n	8001188 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e001      	b.n	8001188 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008
 8001198:	20000000 	.word	0x20000000
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000438 	.word	0x20000438

080011b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	609a      	str	r2, [r3, #8]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	609a      	str	r2, [r3, #8]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3360      	adds	r3, #96	; 0x60
 8001232:	461a      	mov	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <LL_ADC_SetOffset+0x44>)
 8001242:	4013      	ands	r3, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	4313      	orrs	r3, r2
 8001250:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001258:	bf00      	nop
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	03fff000 	.word	0x03fff000

08001268 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3360      	adds	r3, #96	; 0x60
 8001276:	461a      	mov	r2, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3360      	adds	r3, #96	; 0x60
 80012a4:	461a      	mov	r2, r3
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	431a      	orrs	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012be:	bf00      	nop
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	615a      	str	r2, [r3, #20]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3330      	adds	r3, #48	; 0x30
 8001300:	461a      	mov	r2, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	4413      	add	r3, r2
 800130e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	211f      	movs	r1, #31
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	401a      	ands	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	0e9b      	lsrs	r3, r3, #26
 8001328:	f003 011f 	and.w	r1, r3, #31
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	431a      	orrs	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800133c:	bf00      	nop
 800133e:	371c      	adds	r7, #28
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3314      	adds	r3, #20
 8001358:	461a      	mov	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	0e5b      	lsrs	r3, r3, #25
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	4413      	add	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	0d1b      	lsrs	r3, r3, #20
 8001370:	f003 031f 	and.w	r3, r3, #31
 8001374:	2107      	movs	r1, #7
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	401a      	ands	r2, r3
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	0d1b      	lsrs	r3, r3, #20
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	431a      	orrs	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001392:	bf00      	nop
 8001394:	371c      	adds	r7, #28
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013b8:	43db      	mvns	r3, r3
 80013ba:	401a      	ands	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0318 	and.w	r3, r3, #24
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013c4:	40d9      	lsrs	r1, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	400b      	ands	r3, r1
 80013ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ce:	431a      	orrs	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	0007ffff 	.word	0x0007ffff

080013e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6093      	str	r3, [r2, #8]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800141c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001420:	d101      	bne.n	8001426 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001444:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001448:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001470:	d101      	bne.n	8001476 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <LL_ADC_IsEnabled+0x18>
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <LL_ADC_IsEnabled+0x1a>
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d101      	bne.n	80014c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d101      	bne.n	80014e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e12e      	b.n	8001770 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151c:	2b00      	cmp	r3, #0
 800151e:	d109      	bne.n	8001534 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fb8f 	bl	8000c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff67 	bl	800140c <LL_ADC_IsDeepPowerDownEnabled>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d004      	beq.n	800154e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff4d 	bl	80013e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff82 	bl	800145c <LL_ADC_IsInternalRegulatorEnabled>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d115      	bne.n	800158a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff66 	bl	8001434 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001568:	4b83      	ldr	r3, [pc, #524]	; (8001778 <HAL_ADC_Init+0x280>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	099b      	lsrs	r3, r3, #6
 800156e:	4a83      	ldr	r2, [pc, #524]	; (800177c <HAL_ADC_Init+0x284>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	3301      	adds	r3, #1
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800157c:	e002      	b.n	8001584 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	3b01      	subs	r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f9      	bne.n	800157e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff64 	bl	800145c <LL_ADC_IsInternalRegulatorEnabled>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10d      	bne.n	80015b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	f043 0210 	orr.w	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff75 	bl	80014aa <LL_ADC_REG_IsConversionOngoing>
 80015c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 80c7 	bne.w	800175e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f040 80c3 	bne.w	800175e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015e0:	f043 0202 	orr.w	r2, r3, #2
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff49 	bl	8001484 <LL_ADC_IsEnabled>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d110      	bne.n	800161a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015f8:	4861      	ldr	r0, [pc, #388]	; (8001780 <HAL_ADC_Init+0x288>)
 80015fa:	f7ff ff43 	bl	8001484 <LL_ADC_IsEnabled>
 80015fe:	4604      	mov	r4, r0
 8001600:	4860      	ldr	r0, [pc, #384]	; (8001784 <HAL_ADC_Init+0x28c>)
 8001602:	f7ff ff3f 	bl	8001484 <LL_ADC_IsEnabled>
 8001606:	4603      	mov	r3, r0
 8001608:	4323      	orrs	r3, r4
 800160a:	2b00      	cmp	r3, #0
 800160c:	d105      	bne.n	800161a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4619      	mov	r1, r3
 8001614:	485c      	ldr	r0, [pc, #368]	; (8001788 <HAL_ADC_Init+0x290>)
 8001616:	f7ff fdcf 	bl	80011b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7e5b      	ldrb	r3, [r3, #25]
 800161e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001624:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800162a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001630:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001638:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d106      	bne.n	8001656 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	3b01      	subs	r3, #1
 800164e:	045b      	lsls	r3, r3, #17
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	4b44      	ldr	r3, [pc, #272]	; (800178c <HAL_ADC_Init+0x294>)
 800167a:	4013      	ands	r3, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	69b9      	ldr	r1, [r7, #24]
 8001682:	430b      	orrs	r3, r1
 8001684:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff20 	bl	80014d0 <LL_ADC_INJ_IsConversionOngoing>
 8001690:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d140      	bne.n	800171a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d13d      	bne.n	800171a <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7e1b      	ldrb	r3, [r3, #24]
 80016a6:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016a8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016b0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016c0:	f023 0306 	bic.w	r3, r3, #6
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	69b9      	ldr	r1, [r7, #24]
 80016ca:	430b      	orrs	r3, r1
 80016cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d118      	bne.n	800170a <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016e2:	f023 0304 	bic.w	r3, r3, #4
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016ee:	4311      	orrs	r1, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016f4:	4311      	orrs	r1, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016fa:	430a      	orrs	r2, r1
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	611a      	str	r2, [r3, #16]
 8001708:	e007      	b.n	800171a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0201 	bic.w	r2, r2, #1
 8001718:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d10c      	bne.n	800173c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f023 010f 	bic.w	r1, r3, #15
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	1e5a      	subs	r2, r3, #1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	631a      	str	r2, [r3, #48]	; 0x30
 800173a:	e007      	b.n	800174c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 020f 	bic.w	r2, r2, #15
 800174a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	f023 0303 	bic.w	r3, r3, #3
 8001754:	f043 0201 	orr.w	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	659a      	str	r2, [r3, #88]	; 0x58
 800175c:	e007      	b.n	800176e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	f043 0210 	orr.w	r2, r3, #16
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800176e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3724      	adds	r7, #36	; 0x24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd90      	pop	{r4, r7, pc}
 8001778:	20000000 	.word	0x20000000
 800177c:	053e2d63 	.word	0x053e2d63
 8001780:	42028000 	.word	0x42028000
 8001784:	42028100 	.word	0x42028100
 8001788:	42028300 	.word	0x42028300
 800178c:	fff0c007 	.word	0xfff0c007

08001790 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b0b7      	sub	sp, #220	; 0xdc
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x22>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e3c1      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x7a6>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fe73 	bl	80014aa <LL_ADC_REG_IsConversionOngoing>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 83a6 	bne.w	8001f18 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	f7ff fd89 	bl	80012f0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fe61 	bl	80014aa <LL_ADC_REG_IsConversionOngoing>
 80017e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe6d 	bl	80014d0 <LL_ADC_INJ_IsConversionOngoing>
 80017f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 81c1 	bne.w	8001b86 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001804:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001808:	2b00      	cmp	r3, #0
 800180a:	f040 81bc 	bne.w	8001b86 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001816:	d10f      	bne.n	8001838 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2200      	movs	r2, #0
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff fd90 	bl	8001348 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fd4a 	bl	80012ca <LL_ADC_SetSamplingTimeCommonConfig>
 8001836:	e00e      	b.n	8001856 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	6819      	ldr	r1, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	461a      	mov	r2, r3
 8001846:	f7ff fd7f 	bl	8001348 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fd3a 	bl	80012ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	08db      	lsrs	r3, r3, #3
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	2b04      	cmp	r3, #4
 8001876:	d00a      	beq.n	800188e <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6919      	ldr	r1, [r3, #16]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001888:	f7ff fcca 	bl	8001220 <LL_ADC_SetOffset>
 800188c:	e17b      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fce7 	bl	8001268 <LL_ADC_GetOffsetChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10a      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x12a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fcdc 	bl	8001268 <LL_ADC_GetOffsetChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	0e9b      	lsrs	r3, r3, #26
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	e01e      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x168>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fcd1 	bl	8001268 <LL_ADC_GetOffsetChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80018e8:	2320      	movs	r3, #32
 80018ea:	e004      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80018ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001900:	2b00      	cmp	r3, #0
 8001902:	d105      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x180>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0e9b      	lsrs	r3, r3, #26
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	e018      	b.n	8001942 <HAL_ADC_ConfigChannel+0x1b2>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800192c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001934:	2320      	movs	r3, #32
 8001936:	e004      	b.n	8001942 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001938:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001942:	429a      	cmp	r2, r3
 8001944:	d106      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fca0 	bl	8001294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fc84 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10a      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1f0>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2101      	movs	r1, #1
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fc79 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	0e9b      	lsrs	r3, r3, #26
 800197a:	f003 021f 	and.w	r2, r3, #31
 800197e:	e01e      	b.n	80019be <HAL_ADC_ConfigChannel+0x22e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2101      	movs	r1, #1
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fc6e 	bl	8001268 <LL_ADC_GetOffsetChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800199e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80019a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80019ae:	2320      	movs	r3, #32
 80019b0:	e004      	b.n	80019bc <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80019b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d105      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x246>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	0e9b      	lsrs	r3, r3, #26
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	e018      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x278>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80019ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80019f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80019fa:	2320      	movs	r3, #32
 80019fc:	e004      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80019fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d106      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2200      	movs	r2, #0
 8001a12:	2101      	movs	r1, #1
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fc3d 	bl	8001294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2102      	movs	r1, #2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fc21 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x2b6>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2102      	movs	r1, #2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fc16 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	0e9b      	lsrs	r3, r3, #26
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	e01e      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x2f4>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fc0b 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001a74:	2320      	movs	r3, #32
 8001a76:	e004      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x30c>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0e9b      	lsrs	r3, r3, #26
 8001a96:	f003 031f 	and.w	r3, r3, #31
 8001a9a:	e016      	b.n	8001aca <HAL_ADC_ConfigChannel+0x33a>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001abc:	2320      	movs	r3, #32
 8001abe:	e004      	b.n	8001aca <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d106      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fbdc 	bl	8001294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fbc0 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10a      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x378>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2103      	movs	r1, #3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fbb5 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	0e9b      	lsrs	r3, r3, #26
 8001b02:	f003 021f 	and.w	r2, r3, #31
 8001b06:	e017      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x3a8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2103      	movs	r1, #3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fbaa 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b22:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	e003      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d105      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x3c0>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	0e9b      	lsrs	r3, r3, #26
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	e011      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x3e4>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b60:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001b68:	2320      	movs	r3, #32
 8001b6a:	e003      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d106      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2103      	movs	r1, #3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fb87 	bl	8001294 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fc7a 	bl	8001484 <LL_ADC_IsEnabled>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 81c9 	bne.w	8001f2a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6819      	ldr	r1, [r3, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	f7ff fbfb 	bl	80013a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	4a8f      	ldr	r2, [pc, #572]	; (8001dec <HAL_ADC_ConfigChannel+0x65c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	f040 8131 	bne.w	8001e18 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10b      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x44e>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	0e9b      	lsrs	r3, r3, #26
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	2b09      	cmp	r3, #9
 8001bd4:	bf94      	ite	ls
 8001bd6:	2301      	movls	r3, #1
 8001bd8:	2300      	movhi	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	e019      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x482>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bee:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	e003      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	3301      	adds	r3, #1
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	2b09      	cmp	r3, #9
 8001c0a:	bf94      	ite	ls
 8001c0c:	2301      	movls	r3, #1
 8001c0e:	2300      	movhi	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d079      	beq.n	8001d0a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d107      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x4a2>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	0e9b      	lsrs	r3, r3, #26
 8001c28:	3301      	adds	r3, #1
 8001c2a:	069b      	lsls	r3, r3, #26
 8001c2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c30:	e015      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x4ce>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c42:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	e003      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	3301      	adds	r3, #1
 8001c58:	069b      	lsls	r3, r3, #26
 8001c5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x4ee>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	0e9b      	lsrs	r3, r3, #26
 8001c70:	3301      	adds	r3, #1
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	2101      	movs	r1, #1
 8001c78:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7c:	e017      	b.n	8001cae <HAL_ADC_ConfigChannel+0x51e>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001c96:	2320      	movs	r3, #32
 8001c98:	e003      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	2101      	movs	r1, #1
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	ea42 0103 	orr.w	r1, r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10a      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x544>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	0e9b      	lsrs	r3, r3, #26
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f003 021f 	and.w	r2, r3, #31
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	051b      	lsls	r3, r3, #20
 8001cd2:	e018      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x576>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001cec:	2320      	movs	r3, #32
 8001cee:	e003      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f003 021f 	and.w	r2, r3, #31
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d06:	430b      	orrs	r3, r1
 8001d08:	e081      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x596>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0e9b      	lsrs	r3, r3, #26
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	069b      	lsls	r3, r3, #26
 8001d20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d24:	e015      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x5c2>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	e003      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	069b      	lsls	r3, r3, #26
 8001d4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x5e2>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	0e9b      	lsrs	r3, r3, #26
 8001d64:	3301      	adds	r3, #1
 8001d66:	f003 031f 	and.w	r3, r3, #31
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d70:	e017      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x612>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	61fb      	str	r3, [r7, #28]
  return result;
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	e003      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	ea42 0103 	orr.w	r1, r2, r3
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10d      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x63e>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	0e9b      	lsrs	r3, r3, #26
 8001db8:	3301      	adds	r3, #1
 8001dba:	f003 021f 	and.w	r2, r3, #31
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b1e      	subs	r3, #30
 8001dc6:	051b      	lsls	r3, r3, #20
 8001dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	e01e      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x67c>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	613b      	str	r3, [r7, #16]
  return result;
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d104      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8001de6:	2320      	movs	r3, #32
 8001de8:	e006      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x668>
 8001dea:	bf00      	nop
 8001dec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f003 021f 	and.w	r2, r3, #31
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	3b1e      	subs	r3, #30
 8001e06:	051b      	lsls	r3, r3, #20
 8001e08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	6892      	ldr	r2, [r2, #8]
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7ff fa98 	bl	8001348 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 8082 	beq.w	8001f2a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e26:	4847      	ldr	r0, [pc, #284]	; (8001f44 <HAL_ADC_ConfigChannel+0x7b4>)
 8001e28:	f7ff f9ec 	bl	8001204 <LL_ADC_GetCommonPathInternalCh>
 8001e2c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e30:	4845      	ldr	r0, [pc, #276]	; (8001f48 <HAL_ADC_ConfigChannel+0x7b8>)
 8001e32:	f7ff fb27 	bl	8001484 <LL_ADC_IsEnabled>
 8001e36:	4604      	mov	r4, r0
 8001e38:	4844      	ldr	r0, [pc, #272]	; (8001f4c <HAL_ADC_ConfigChannel+0x7bc>)
 8001e3a:	f7ff fb23 	bl	8001484 <LL_ADC_IsEnabled>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4323      	orrs	r3, r4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d15e      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a41      	ldr	r2, [pc, #260]	; (8001f50 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d127      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d121      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a39      	ldr	r2, [pc, #228]	; (8001f48 <HAL_ADC_ConfigChannel+0x7b8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d161      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4834      	ldr	r0, [pc, #208]	; (8001f44 <HAL_ADC_ConfigChannel+0x7b4>)
 8001e72:	f7ff f9b4 	bl	80011de <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e76:	4b37      	ldr	r3, [pc, #220]	; (8001f54 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	099b      	lsrs	r3, r3, #6
 8001e7c:	4a36      	ldr	r2, [pc, #216]	; (8001f58 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	099b      	lsrs	r3, r3, #6
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8001e8e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001e90:	e002      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f9      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e9e:	e044      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2d      	ldr	r2, [pc, #180]	; (8001f5c <HAL_ADC_ConfigChannel+0x7cc>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d113      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a23      	ldr	r2, [pc, #140]	; (8001f48 <HAL_ADC_ConfigChannel+0x7b8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d134      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ec0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ec4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec8:	4619      	mov	r1, r3
 8001eca:	481e      	ldr	r0, [pc, #120]	; (8001f44 <HAL_ADC_ConfigChannel+0x7b4>)
 8001ecc:	f7ff f987 	bl	80011de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ed0:	e02b      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a22      	ldr	r2, [pc, #136]	; (8001f60 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d126      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001edc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d120      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a16      	ldr	r2, [pc, #88]	; (8001f48 <HAL_ADC_ConfigChannel+0x7b8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d11b      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ef6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001efa:	4619      	mov	r1, r3
 8001efc:	4811      	ldr	r0, [pc, #68]	; (8001f44 <HAL_ADC_ConfigChannel+0x7b4>)
 8001efe:	f7ff f96e 	bl	80011de <LL_ADC_SetCommonPathInternalCh>
 8001f02:	e012      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	f043 0220 	orr.w	r2, r3, #32
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001f16:	e008      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	f043 0220 	orr.w	r2, r3, #32
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f32:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	37dc      	adds	r7, #220	; 0xdc
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	80080000 	.word	0x80080000
 8001f44:	42028300 	.word	0x42028300
 8001f48:	42028000 	.word	0x42028000
 8001f4c:	42028100 	.word	0x42028100
 8001f50:	c7520000 	.word	0xc7520000
 8001f54:	20000000 	.word	0x20000000
 8001f58:	053e2d63 	.word	0x053e2d63
 8001f5c:	cb840000 	.word	0xcb840000
 8001f60:	80000001 	.word	0x80000001

08001f64 <LL_ADC_IsEnabled>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <LL_ADC_IsEnabled+0x18>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <LL_ADC_IsEnabled+0x1a>
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <LL_ADC_REG_IsConversionOngoing>:
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d101      	bne.n	8001fa2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b0a1      	sub	sp, #132	; 0x84
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e089      	b.n	80020e2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001fda:	2300      	movs	r3, #0
 8001fdc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a42      	ldr	r2, [pc, #264]	; (80020ec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d102      	bne.n	8001fee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001fe8:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	e001      	b.n	8001ff2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10b      	bne.n	8002010 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e068      	b.n	80020e2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ffb9 	bl	8001f8a <LL_ADC_REG_IsConversionOngoing>
 8002018:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ffb3 	bl	8001f8a <LL_ADC_REG_IsConversionOngoing>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d14a      	bne.n	80020c0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800202a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800202c:	2b00      	cmp	r3, #0
 800202e:	d147      	bne.n	80020c0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002030:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002032:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d027      	beq.n	800208c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800203c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800204e:	035b      	lsls	r3, r3, #13
 8002050:	430b      	orrs	r3, r1
 8002052:	431a      	orrs	r2, r3
 8002054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002056:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002058:	4824      	ldr	r0, [pc, #144]	; (80020ec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800205a:	f7ff ff83 	bl	8001f64 <LL_ADC_IsEnabled>
 800205e:	4604      	mov	r4, r0
 8002060:	4823      	ldr	r0, [pc, #140]	; (80020f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002062:	f7ff ff7f 	bl	8001f64 <LL_ADC_IsEnabled>
 8002066:	4603      	mov	r3, r0
 8002068:	4323      	orrs	r3, r4
 800206a:	2b00      	cmp	r3, #0
 800206c:	d132      	bne.n	80020d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800206e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002076:	f023 030f 	bic.w	r3, r3, #15
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	6811      	ldr	r1, [r2, #0]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	6892      	ldr	r2, [r2, #8]
 8002082:	430a      	orrs	r2, r1
 8002084:	431a      	orrs	r2, r3
 8002086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002088:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800208a:	e023      	b.n	80020d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800208c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002096:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002098:	4814      	ldr	r0, [pc, #80]	; (80020ec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800209a:	f7ff ff63 	bl	8001f64 <LL_ADC_IsEnabled>
 800209e:	4604      	mov	r4, r0
 80020a0:	4813      	ldr	r0, [pc, #76]	; (80020f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020a2:	f7ff ff5f 	bl	8001f64 <LL_ADC_IsEnabled>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4323      	orrs	r3, r4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d112      	bne.n	80020d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020b6:	f023 030f 	bic.w	r3, r3, #15
 80020ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020bc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020be:	e009      	b.n	80020d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	f043 0220 	orr.w	r2, r3, #32
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80020d2:	e000      	b.n	80020d6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80020de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3784      	adds	r7, #132	; 0x84
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd90      	pop	{r4, r7, pc}
 80020ea:	bf00      	nop
 80020ec:	42028000 	.word	0x42028000
 80020f0:	42028100 	.word	0x42028100
 80020f4:	42028300 	.word	0x42028300

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212a:	4a04      	ldr	r2, [pc, #16]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	60d3      	str	r3, [r2, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0152      	lsls	r2, r2, #5
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0152      	lsls	r2, r2, #5
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	bf28      	it	cs
 80021ce:	2303      	movcs	r3, #3
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3303      	adds	r3, #3
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b04      	subs	r3, #4
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002228:	d301      	bcc.n	800222e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222a:	2301      	movs	r3, #1
 800222c:	e00f      	b.n	800224e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <SysTick_Config+0x40>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002236:	2107      	movs	r1, #7
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f7ff ff8e 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <SysTick_Config+0x40>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <SysTick_Config+0x40>)
 8002248:	2207      	movs	r2, #7
 800224a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	e000e010 	.word	0xe000e010

0800225c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff47 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff5e 	bl	8002140 <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff90 	bl	80021b0 <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5f 	bl	800215c <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffb2 	bl	8002218 <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022ce:	e158      	b.n	8002582 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2101      	movs	r1, #1
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 814a 	beq.w	800257c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d005      	beq.n	8002300 <HAL_GPIO_Init+0x40>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d130      	bne.n	8002362 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002336:	2201      	movs	r2, #1
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	f003 0201 	and.w	r2, r3, #1
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b03      	cmp	r3, #3
 800236c:	d017      	beq.n	800239e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	2203      	movs	r2, #3
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d123      	bne.n	80023f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	08da      	lsrs	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3208      	adds	r2, #8
 80023b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	08da      	lsrs	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3208      	adds	r2, #8
 80023ec:	6939      	ldr	r1, [r7, #16]
 80023ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0203 	and.w	r2, r3, #3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80a4 	beq.w	800257c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002434:	4a5a      	ldr	r2, [pc, #360]	; (80025a0 <HAL_GPIO_Init+0x2e0>)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	3318      	adds	r3, #24
 800243c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <HAL_GPIO_Init+0x2e4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d025      	beq.n	80024ac <HAL_GPIO_Init+0x1ec>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <HAL_GPIO_Init+0x2e8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d01f      	beq.n	80024a8 <HAL_GPIO_Init+0x1e8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a50      	ldr	r2, [pc, #320]	; (80025ac <HAL_GPIO_Init+0x2ec>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d019      	beq.n	80024a4 <HAL_GPIO_Init+0x1e4>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a4f      	ldr	r2, [pc, #316]	; (80025b0 <HAL_GPIO_Init+0x2f0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d013      	beq.n	80024a0 <HAL_GPIO_Init+0x1e0>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a4e      	ldr	r2, [pc, #312]	; (80025b4 <HAL_GPIO_Init+0x2f4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d00d      	beq.n	800249c <HAL_GPIO_Init+0x1dc>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a4d      	ldr	r2, [pc, #308]	; (80025b8 <HAL_GPIO_Init+0x2f8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d007      	beq.n	8002498 <HAL_GPIO_Init+0x1d8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a4c      	ldr	r2, [pc, #304]	; (80025bc <HAL_GPIO_Init+0x2fc>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d101      	bne.n	8002494 <HAL_GPIO_Init+0x1d4>
 8002490:	2306      	movs	r3, #6
 8002492:	e00c      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 8002494:	2307      	movs	r3, #7
 8002496:	e00a      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 8002498:	2305      	movs	r3, #5
 800249a:	e008      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 800249c:	2304      	movs	r3, #4
 800249e:	e006      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a0:	2303      	movs	r3, #3
 80024a2:	e004      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e002      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024ac:	2300      	movs	r3, #0
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	f002 0203 	and.w	r2, r2, #3
 80024b4:	00d2      	lsls	r2, r2, #3
 80024b6:	4093      	lsls	r3, r2
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80024be:	4938      	ldr	r1, [pc, #224]	; (80025a0 <HAL_GPIO_Init+0x2e0>)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3318      	adds	r3, #24
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024cc:	4b34      	ldr	r3, [pc, #208]	; (80025a0 <HAL_GPIO_Init+0x2e0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024f0:	4a2b      	ldr	r2, [pc, #172]	; (80025a0 <HAL_GPIO_Init+0x2e0>)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024f6:	4b2a      	ldr	r3, [pc, #168]	; (80025a0 <HAL_GPIO_Init+0x2e0>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800251a:	4a21      	ldr	r2, [pc, #132]	; (80025a0 <HAL_GPIO_Init+0x2e0>)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002520:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <HAL_GPIO_Init+0x2e0>)
 8002522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002546:	4a16      	ldr	r2, [pc, #88]	; (80025a0 <HAL_GPIO_Init+0x2e0>)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800254e:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <HAL_GPIO_Init+0x2e0>)
 8002550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002574:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <HAL_GPIO_Init+0x2e0>)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3301      	adds	r3, #1
 8002580:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f ae9f 	bne.w	80022d0 <HAL_GPIO_Init+0x10>
  }
}
 8002592:	bf00      	nop
 8002594:	bf00      	nop
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	4002f400 	.word	0x4002f400
 80025a4:	42020000 	.word	0x42020000
 80025a8:	42020400 	.word	0x42020400
 80025ac:	42020800 	.word	0x42020800
 80025b0:	42020c00 	.word	0x42020c00
 80025b4:	42021000 	.word	0x42021000
 80025b8:	42021400 	.word	0x42021400
 80025bc:	42021800 	.word	0x42021800

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025dc:	e002      	b.n	80025e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4013      	ands	r3, r2
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	43d9      	mvns	r1, r3
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	400b      	ands	r3, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	619a      	str	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e0c0      	b.n	80027b8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe fbf2 	bl	8000e34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2203      	movs	r2, #3
 8002654:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f002 ffbb 	bl	80055d8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
 8002666:	e03e      	b.n	80026e6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	3311      	adds	r3, #17
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	3310      	adds	r3, #16
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	3313      	adds	r3, #19
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	440b      	add	r3, r1
 80026b2:	3320      	adds	r3, #32
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026b8:	7bfa      	ldrb	r2, [r7, #15]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	3324      	adds	r3, #36	; 0x24
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	3301      	adds	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	791b      	ldrb	r3, [r3, #4]
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d3bb      	bcc.n	8002668 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e044      	b.n	8002780 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	f203 1351 	addw	r3, r3, #337	; 0x151
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	440b      	add	r3, r1
 800271a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	f203 1353 	addw	r3, r3, #339	; 0x153
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	440b      	add	r3, r1
 8002772:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	3301      	adds	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	791b      	ldrb	r3, [r3, #4]
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	429a      	cmp	r2, r3
 8002788:	d3b5      	bcc.n	80026f6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3304      	adds	r3, #4
 8002792:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002796:	f002 ff3a 	bl	800560e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7a9b      	ldrb	r3, [r3, #10]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d102      	bne.n	80027b6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f805 	bl	80027c0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a04      	ldr	r2, [pc, #16]	; (8002830 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800281e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002822:	6013      	str	r3, [r2, #0]
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40007000 	.word	0x40007000

08002834 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <HAL_PWREx_GetVoltageRange+0x18>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40007000 	.word	0x40007000

08002850 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002858:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002860:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002862:	f000 f861 	bl	8002928 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002866:	4603      	mov	r3, r0
 8002868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800286c:	d101      	bne.n	8002872 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e03e      	b.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002872:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800287a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800287e:	d101      	bne.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e035      	b.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	429a      	cmp	r2, r3
 800288a:	d101      	bne.n	8002890 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	e02f      	b.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002898:	4917      	ldr	r1, [pc, #92]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_PWREx_ControlVoltageScaling+0xac>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	4a16      	ldr	r2, [pc, #88]	; (8002900 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	09db      	lsrs	r3, r3, #7
 80028ae:	2232      	movs	r2, #50	; 0x32
 80028b0:	fb02 f303 	mul.w	r3, r2, r3
 80028b4:	4a13      	ldr	r2, [pc, #76]	; (8002904 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	08db      	lsrs	r3, r3, #3
 80028bc:	3301      	adds	r3, #1
 80028be:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028c0:	e002      	b.n	80028c8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d4:	d102      	bne.n	80028dc <HAL_PWREx_ControlVoltageScaling+0x8c>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f2      	bne.n	80028c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e8:	d101      	bne.n	80028ee <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e000      	b.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40007000 	.word	0x40007000
 80028fc:	20000000 	.word	0x20000000
 8002900:	0a7c5ac5 	.word	0x0a7c5ac5
 8002904:	cccccccd 	.word	0xcccccccd

08002908 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_PWREx_EnableVddIO2+0x1c>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4a04      	ldr	r2, [pc, #16]	; (8002924 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002916:	6053      	str	r3, [r2, #4]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40007000 	.word	0x40007000

08002928 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800293e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002942:	607b      	str	r3, [r7, #4]
 8002944:	e00a      	b.n	800295c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d103      	bne.n	8002958 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	e001      	b.n	800295c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002958:	2300      	movs	r3, #0
 800295a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800295c:	687b      	ldr	r3, [r7, #4]
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40007000 	.word	0x40007000

08002970 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d102      	bne.n	8002984 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	f000 bcc2 	b.w	8003308 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002984:	4b99      	ldr	r3, [pc, #612]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800298e:	4b97      	ldr	r3, [pc, #604]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80e9 	beq.w	8002b78 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d006      	beq.n	80029ba <HAL_RCC_OscConfig+0x4a>
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	f040 8083 	bne.w	8002aba <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d17f      	bne.n	8002aba <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ba:	4b8c      	ldr	r3, [pc, #560]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <HAL_RCC_OscConfig+0x64>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f000 bc9a 	b.w	8003308 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d8:	4b84      	ldr	r3, [pc, #528]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d004      	beq.n	80029ee <HAL_RCC_OscConfig+0x7e>
 80029e4:	4b81      	ldr	r3, [pc, #516]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ec:	e005      	b.n	80029fa <HAL_RCC_OscConfig+0x8a>
 80029ee:	4b7f      	ldr	r3, [pc, #508]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 80029f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d224      	bcs.n	8002a48 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fe9c 	bl	8003740 <RCC_SetFlashLatencyFromMSIRange>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f000 bc7a 	b.w	8003308 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a14:	4b75      	ldr	r3, [pc, #468]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a74      	ldr	r2, [pc, #464]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002a1a:	f043 0308 	orr.w	r3, r3, #8
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b72      	ldr	r3, [pc, #456]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	496f      	ldr	r1, [pc, #444]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a32:	4b6e      	ldr	r3, [pc, #440]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	496a      	ldr	r1, [pc, #424]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
 8002a46:	e026      	b.n	8002a96 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a48:	4b68      	ldr	r3, [pc, #416]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a67      	ldr	r2, [pc, #412]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002a4e:	f043 0308 	orr.w	r3, r3, #8
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b65      	ldr	r3, [pc, #404]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	4962      	ldr	r1, [pc, #392]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a66:	4b61      	ldr	r3, [pc, #388]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	495d      	ldr	r1, [pc, #372]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10a      	bne.n	8002a96 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 fe5b 	bl	8003740 <RCC_SetFlashLatencyFromMSIRange>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f000 bc39 	b.w	8003308 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a96:	f000 fe17 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4a54      	ldr	r2, [pc, #336]	; (8002bf0 <HAL_RCC_OscConfig+0x280>)
 8002a9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002aa0:	4b54      	ldr	r3, [pc, #336]	; (8002bf4 <HAL_RCC_OscConfig+0x284>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe fb3f 	bl	8001128 <HAL_InitTick>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d060      	beq.n	8002b76 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	f000 bc27 	b.w	8003308 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d039      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ac2:	4b4a      	ldr	r3, [pc, #296]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a49      	ldr	r2, [pc, #292]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ace:	f7fe fb67 	bl	80011a0 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ad4:	e00f      	b.n	8002af6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ad6:	f7fe fb63 	bl	80011a0 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d908      	bls.n	8002af6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ae4:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	f000 bc09 	b.w	8003308 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002af6:	4b3d      	ldr	r3, [pc, #244]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0e9      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b02:	4b3a      	ldr	r3, [pc, #232]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a39      	ldr	r2, [pc, #228]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002b08:	f043 0308 	orr.w	r3, r3, #8
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b37      	ldr	r3, [pc, #220]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	4934      	ldr	r1, [pc, #208]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b20:	4b32      	ldr	r3, [pc, #200]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	492f      	ldr	r1, [pc, #188]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
 8002b34:	e020      	b.n	8002b78 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b36:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a2c      	ldr	r2, [pc, #176]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b42:	f7fe fb2d 	bl	80011a0 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b48:	e00e      	b.n	8002b68 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b4a:	f7fe fb29 	bl	80011a0 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d907      	bls.n	8002b68 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b58:	4b24      	ldr	r3, [pc, #144]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e3cf      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b68:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1ea      	bne.n	8002b4a <HAL_RCC_OscConfig+0x1da>
 8002b74:	e000      	b.n	8002b78 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d07e      	beq.n	8002c82 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d005      	beq.n	8002b96 <HAL_RCC_OscConfig+0x226>
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2b0c      	cmp	r3, #12
 8002b8e:	d10e      	bne.n	8002bae <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d10b      	bne.n	8002bae <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d06e      	beq.n	8002c80 <HAL_RCC_OscConfig+0x310>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d16a      	bne.n	8002c80 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e3ac      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x256>
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0b      	ldr	r2, [pc, #44]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	e024      	b.n	8002c10 <HAL_RCC_OscConfig+0x2a0>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bce:	d113      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x288>
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a05      	ldr	r2, [pc, #20]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002bd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a02      	ldr	r2, [pc, #8]	; (8002bec <HAL_RCC_OscConfig+0x27c>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	e012      	b.n	8002c10 <HAL_RCC_OscConfig+0x2a0>
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	20000000 	.word	0x20000000
 8002bf4:	20000004 	.word	0x20000004
 8002bf8:	4b8b      	ldr	r3, [pc, #556]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a8a      	ldr	r2, [pc, #552]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b88      	ldr	r3, [pc, #544]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a87      	ldr	r2, [pc, #540]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d019      	beq.n	8002c4c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe fac2 	bl	80011a0 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1e:	e00e      	b.n	8002c3e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c20:	f7fe fabe 	bl	80011a0 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d907      	bls.n	8002c3e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c2e:	4b7e      	ldr	r3, [pc, #504]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e364      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c3e:	4b7a      	ldr	r3, [pc, #488]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0ea      	beq.n	8002c20 <HAL_RCC_OscConfig+0x2b0>
 8002c4a:	e01a      	b.n	8002c82 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe faa8 	bl	80011a0 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c52:	e00e      	b.n	8002c72 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c54:	f7fe faa4 	bl	80011a0 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d907      	bls.n	8002c72 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c62:	4b71      	ldr	r3, [pc, #452]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e34a      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c72:	4b6d      	ldr	r3, [pc, #436]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1ea      	bne.n	8002c54 <HAL_RCC_OscConfig+0x2e4>
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d06c      	beq.n	8002d68 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x330>
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b0c      	cmp	r3, #12
 8002c98:	d119      	bne.n	8002cce <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d116      	bne.n	8002cce <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca0:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x348>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e327      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb8:	4b5b      	ldr	r3, [pc, #364]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	4958      	ldr	r1, [pc, #352]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ccc:	e04c      	b.n	8002d68 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d029      	beq.n	8002d2a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd6:	4b54      	ldr	r3, [pc, #336]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a53      	ldr	r2, [pc, #332]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7fe fa5d 	bl	80011a0 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce8:	e00e      	b.n	8002d08 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cea:	f7fe fa59 	bl	80011a0 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d907      	bls.n	8002d08 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf8:	4b4b      	ldr	r3, [pc, #300]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e2ff      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d08:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0ea      	beq.n	8002cea <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d14:	4b44      	ldr	r3, [pc, #272]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	061b      	lsls	r3, r3, #24
 8002d22:	4941      	ldr	r1, [pc, #260]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
 8002d28:	e01e      	b.n	8002d68 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a3e      	ldr	r2, [pc, #248]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fe fa33 	bl	80011a0 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d3c:	e00e      	b.n	8002d5c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3e:	f7fe fa2f 	bl	80011a0 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d907      	bls.n	8002d5c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d4c:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e2d5      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d5c:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ea      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d062      	beq.n	8002e3a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d038      	beq.n	8002dee <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d108      	bne.n	8002d96 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002d84:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d8a:	4a27      	ldr	r2, [pc, #156]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002d8c:	f023 0310 	bic.w	r3, r3, #16
 8002d90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002d94:	e007      	b.n	8002da6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9c:	4a22      	ldr	r2, [pc, #136]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002d9e:	f043 0310 	orr.w	r3, r3, #16
 8002da2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da6:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dac:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7fe f9f3 	bl	80011a0 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dbc:	e00f      	b.n	8002dde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbe:	f7fe f9ef 	bl	80011a0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b07      	cmp	r3, #7
 8002dca:	d908      	bls.n	8002dde <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dcc:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e294      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0e8      	beq.n	8002dbe <HAL_RCC_OscConfig+0x44e>
 8002dec:	e025      	b.n	8002e3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df4:	4a0c      	ldr	r2, [pc, #48]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe f9cf 	bl	80011a0 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e04:	e012      	b.n	8002e2c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e06:	f7fe f9cb 	bl	80011a0 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b07      	cmp	r3, #7
 8002e12:	d90b      	bls.n	8002e2c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <HAL_RCC_OscConfig+0x4b8>)
 8002e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e270      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e2c:	4ba8      	ldr	r3, [pc, #672]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1e5      	bne.n	8002e06 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 812d 	beq.w	80030a2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e4c:	4ba0      	ldr	r3, [pc, #640]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10d      	bne.n	8002e74 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e58:	4b9d      	ldr	r3, [pc, #628]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	4a9c      	ldr	r2, [pc, #624]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e62:	6593      	str	r3, [r2, #88]	; 0x58
 8002e64:	4b9a      	ldr	r3, [pc, #616]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e70:	2301      	movs	r3, #1
 8002e72:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e74:	4b97      	ldr	r3, [pc, #604]	; (80030d4 <HAL_RCC_OscConfig+0x764>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d11e      	bne.n	8002ebe <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e80:	4b94      	ldr	r3, [pc, #592]	; (80030d4 <HAL_RCC_OscConfig+0x764>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a93      	ldr	r2, [pc, #588]	; (80030d4 <HAL_RCC_OscConfig+0x764>)
 8002e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8c:	f7fe f988 	bl	80011a0 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e92:	e00e      	b.n	8002eb2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e94:	f7fe f984 	bl	80011a0 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d907      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea2:	4b8c      	ldr	r3, [pc, #560]	; (80030d4 <HAL_RCC_OscConfig+0x764>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e22a      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb2:	4b88      	ldr	r3, [pc, #544]	; (80030d4 <HAL_RCC_OscConfig+0x764>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0ea      	beq.n	8002e94 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d01f      	beq.n	8002f0a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d010      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ed6:	4b7e      	ldr	r3, [pc, #504]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	4a7c      	ldr	r2, [pc, #496]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ee6:	4b7a      	ldr	r3, [pc, #488]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eec:	4a78      	ldr	r2, [pc, #480]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef6:	e018      	b.n	8002f2a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ef8:	4b75      	ldr	r3, [pc, #468]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efe:	4a74      	ldr	r2, [pc, #464]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f08:	e00f      	b.n	8002f2a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f0a:	4b71      	ldr	r3, [pc, #452]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	4a6f      	ldr	r2, [pc, #444]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f1a:	4b6d      	ldr	r3, [pc, #436]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	4a6b      	ldr	r2, [pc, #428]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002f22:	f023 0304 	bic.w	r3, r3, #4
 8002f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d068      	beq.n	8003004 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f32:	f7fe f935 	bl	80011a0 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f38:	e011      	b.n	8002f5e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7fe f931 	bl	80011a0 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d908      	bls.n	8002f5e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4c:	4b60      	ldr	r3, [pc, #384]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e1d4      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f5e:	4b5c      	ldr	r3, [pc, #368]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0e6      	beq.n	8002f3a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d022      	beq.n	8002fbe <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f78:	4b55      	ldr	r3, [pc, #340]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	4a54      	ldr	r2, [pc, #336]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f88:	e011      	b.n	8002fae <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe f909 	bl	80011a0 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d908      	bls.n	8002fae <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f9c:	4b4c      	ldr	r3, [pc, #304]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1ac      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fae:	4b48      	ldr	r3, [pc, #288]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0e6      	beq.n	8002f8a <HAL_RCC_OscConfig+0x61a>
 8002fbc:	e068      	b.n	8003090 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fbe:	4b44      	ldr	r3, [pc, #272]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc4:	4a42      	ldr	r2, [pc, #264]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fce:	e011      	b.n	8002ff4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe f8e6 	bl	80011a0 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d908      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fe2:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e189      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1e6      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x660>
 8003002:	e045      	b.n	8003090 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe f8cc 	bl	80011a0 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800300a:	e011      	b.n	8003030 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7fe f8c8 	bl	80011a0 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d908      	bls.n	8003030 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800301e:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e16b      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003030:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1e6      	bne.n	800300c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	2b00      	cmp	r3, #0
 800304a:	d021      	beq.n	8003090 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800304c:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	4a1f      	ldr	r2, [pc, #124]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8003054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800305c:	e011      	b.n	8003082 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305e:	f7fe f89f 	bl	80011a0 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f241 3288 	movw	r2, #5000	; 0x1388
 800306c:	4293      	cmp	r3, r2
 800306e:	d908      	bls.n	8003082 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003070:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e142      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e6      	bne.n	800305e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003090:	7ffb      	ldrb	r3, [r7, #31]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d105      	bne.n	80030a2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	4a0d      	ldr	r2, [pc, #52]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 800309c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d04f      	beq.n	800314e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d028      	beq.n	8003108 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 80030b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <HAL_RCC_OscConfig+0x760>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c6:	f7fe f86b 	bl	80011a0 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030cc:	e014      	b.n	80030f8 <HAL_RCC_OscConfig+0x788>
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030d8:	f7fe f862 	bl	80011a0 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d908      	bls.n	80030f8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030e6:	4b8a      	ldr	r3, [pc, #552]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 80030e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e107      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030f8:	4b85      	ldr	r3, [pc, #532]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 80030fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0e8      	beq.n	80030d8 <HAL_RCC_OscConfig+0x768>
 8003106:	e022      	b.n	800314e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003108:	4b81      	ldr	r3, [pc, #516]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 800310a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800310e:	4a80      	ldr	r2, [pc, #512]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003118:	f7fe f842 	bl	80011a0 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800311e:	e00f      	b.n	8003140 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003120:	f7fe f83e 	bl	80011a0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d908      	bls.n	8003140 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800312e:	4b78      	ldr	r3, [pc, #480]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 8003130:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e0e3      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003140:	4b73      	ldr	r3, [pc, #460]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 8003142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e8      	bne.n	8003120 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80d7 	beq.w	8003306 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003158:	4b6d      	ldr	r3, [pc, #436]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b0c      	cmp	r3, #12
 8003162:	f000 8091 	beq.w	8003288 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	2b02      	cmp	r3, #2
 800316c:	d166      	bne.n	800323c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b68      	ldr	r3, [pc, #416]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a67      	ldr	r2, [pc, #412]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 8003174:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fe f811 	bl	80011a0 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003180:	e00e      	b.n	80031a0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003182:	f7fe f80d 	bl	80011a0 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d907      	bls.n	80031a0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003190:	4b5f      	ldr	r3, [pc, #380]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e0b3      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a0:	4b5b      	ldr	r3, [pc, #364]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1ea      	bne.n	8003182 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ac:	4b58      	ldr	r3, [pc, #352]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	4b58      	ldr	r3, [pc, #352]	; (8003314 <HAL_RCC_OscConfig+0x9a4>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031bc:	3a01      	subs	r2, #1
 80031be:	0112      	lsls	r2, r2, #4
 80031c0:	4311      	orrs	r1, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031c6:	0212      	lsls	r2, r2, #8
 80031c8:	4311      	orrs	r1, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031ce:	0852      	lsrs	r2, r2, #1
 80031d0:	3a01      	subs	r2, #1
 80031d2:	0552      	lsls	r2, r2, #21
 80031d4:	4311      	orrs	r1, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031da:	0852      	lsrs	r2, r2, #1
 80031dc:	3a01      	subs	r2, #1
 80031de:	0652      	lsls	r2, r2, #25
 80031e0:	4311      	orrs	r1, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031e6:	06d2      	lsls	r2, r2, #27
 80031e8:	430a      	orrs	r2, r1
 80031ea:	4949      	ldr	r1, [pc, #292]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f0:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a46      	ldr	r2, [pc, #280]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 80031f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031fc:	4b44      	ldr	r3, [pc, #272]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a43      	ldr	r2, [pc, #268]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 8003202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003206:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fd ffca 	bl	80011a0 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320e:	e00e      	b.n	800322e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003210:	f7fd ffc6 	bl	80011a0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d907      	bls.n	800322e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800321e:	4b3c      	ldr	r3, [pc, #240]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e06c      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800322e:	4b38      	ldr	r3, [pc, #224]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0ea      	beq.n	8003210 <HAL_RCC_OscConfig+0x8a0>
 800323a:	e064      	b.n	8003306 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323c:	4b34      	ldr	r3, [pc, #208]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a33      	ldr	r2, [pc, #204]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 8003242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fd ffaa 	bl	80011a0 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800324e:	e00e      	b.n	800326e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003250:	f7fd ffa6 	bl	80011a0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d907      	bls.n	800326e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800325e:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e04c      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1ea      	bne.n	8003250 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800327a:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	4924      	ldr	r1, [pc, #144]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <HAL_RCC_OscConfig+0x9a8>)
 8003282:	4013      	ands	r3, r2
 8003284:	60cb      	str	r3, [r1, #12]
 8003286:	e03e      	b.n	8003306 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e039      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003294:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <HAL_RCC_OscConfig+0x9a0>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f003 0203 	and.w	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d12c      	bne.n	8003302 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b2:	3b01      	subs	r3, #1
 80032b4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d123      	bne.n	8003302 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d11b      	bne.n	8003302 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d113      	bne.n	8003302 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	3b01      	subs	r3, #1
 80032e8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d109      	bne.n	8003302 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	3b01      	subs	r3, #1
 80032fc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000
 8003314:	019f800c 	.word	0x019f800c
 8003318:	feeefffc 	.word	0xfeeefffc

0800331c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e11c      	b.n	800356e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003334:	4b90      	ldr	r3, [pc, #576]	; (8003578 <HAL_RCC_ClockConfig+0x25c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d910      	bls.n	8003364 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b8d      	ldr	r3, [pc, #564]	; (8003578 <HAL_RCC_ClockConfig+0x25c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 020f 	bic.w	r2, r3, #15
 800334a:	498b      	ldr	r1, [pc, #556]	; (8003578 <HAL_RCC_ClockConfig+0x25c>)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b89      	ldr	r3, [pc, #548]	; (8003578 <HAL_RCC_ClockConfig+0x25c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e104      	b.n	800356e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d010      	beq.n	8003392 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	4b81      	ldr	r3, [pc, #516]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800337c:	429a      	cmp	r2, r3
 800337e:	d908      	bls.n	8003392 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003380:	4b7e      	ldr	r3, [pc, #504]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	497b      	ldr	r1, [pc, #492]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 8085 	beq.w	80034aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d11f      	bne.n	80033e8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a8:	4b74      	ldr	r3, [pc, #464]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0da      	b.n	800356e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80033b8:	f000 fa26 	bl	8003808 <RCC_GetSysClockFreqFromPLLSource>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4a6f      	ldr	r2, [pc, #444]	; (8003580 <HAL_RCC_ClockConfig+0x264>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d947      	bls.n	8003456 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80033c6:	4b6d      	ldr	r3, [pc, #436]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d141      	bne.n	8003456 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033d2:	4b6a      	ldr	r3, [pc, #424]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033da:	4a68      	ldr	r2, [pc, #416]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 80033dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	e036      	b.n	8003456 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033f0:	4b62      	ldr	r3, [pc, #392]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d115      	bne.n	8003428 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0b6      	b.n	800356e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d107      	bne.n	8003418 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003408:	4b5c      	ldr	r3, [pc, #368]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0aa      	b.n	800356e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003418:	4b58      	ldr	r3, [pc, #352]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0a2      	b.n	800356e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003428:	f000 f8b0 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800342c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4a53      	ldr	r2, [pc, #332]	; (8003580 <HAL_RCC_ClockConfig+0x264>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d90f      	bls.n	8003456 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003436:	4b51      	ldr	r3, [pc, #324]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003442:	4b4e      	ldr	r3, [pc, #312]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800344a:	4a4c      	ldr	r2, [pc, #304]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 800344c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003450:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003452:	2380      	movs	r3, #128	; 0x80
 8003454:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003456:	4b49      	ldr	r3, [pc, #292]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f023 0203 	bic.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4946      	ldr	r1, [pc, #280]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 8003464:	4313      	orrs	r3, r2
 8003466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003468:	f7fd fe9a 	bl	80011a0 <HAL_GetTick>
 800346c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	e013      	b.n	8003498 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003470:	f7fd fe96 	bl	80011a0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d90a      	bls.n	8003498 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	4b3e      	ldr	r3, [pc, #248]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 020c 	and.w	r2, r3, #12
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e06a      	b.n	800356e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003498:	4b38      	ldr	r3, [pc, #224]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 020c 	and.w	r2, r3, #12
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d1e2      	bne.n	8003470 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b80      	cmp	r3, #128	; 0x80
 80034ae:	d105      	bne.n	80034bc <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034b0:	4b32      	ldr	r3, [pc, #200]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4a31      	ldr	r2, [pc, #196]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 80034b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ba:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d010      	beq.n	80034ea <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d208      	bcs.n	80034ea <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d8:	4b28      	ldr	r3, [pc, #160]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4925      	ldr	r1, [pc, #148]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ea:	4b23      	ldr	r3, [pc, #140]	; (8003578 <HAL_RCC_ClockConfig+0x25c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d210      	bcs.n	800351a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f8:	4b1f      	ldr	r3, [pc, #124]	; (8003578 <HAL_RCC_ClockConfig+0x25c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 020f 	bic.w	r2, r3, #15
 8003500:	491d      	ldr	r1, [pc, #116]	; (8003578 <HAL_RCC_ClockConfig+0x25c>)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	4313      	orrs	r3, r2
 8003506:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003508:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <HAL_RCC_ClockConfig+0x25c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d001      	beq.n	800351a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e029      	b.n	800356e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	4912      	ldr	r1, [pc, #72]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 8003534:	4313      	orrs	r3, r2
 8003536:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d009      	beq.n	8003558 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003544:	4b0d      	ldr	r3, [pc, #52]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	490a      	ldr	r1, [pc, #40]	; (800357c <HAL_RCC_ClockConfig+0x260>)
 8003554:	4313      	orrs	r3, r2
 8003556:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003558:	f000 f8b6 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 800355c:	4603      	mov	r3, r0
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x268>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_ClockConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd fdde 	bl	8001128 <HAL_InitTick>
 800356c:	4603      	mov	r3, r0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40022000 	.word	0x40022000
 800357c:	40021000 	.word	0x40021000
 8003580:	04c4b400 	.word	0x04c4b400
 8003584:	20000000 	.word	0x20000000
 8003588:	20000004 	.word	0x20000004

0800358c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	; 0x24
 8003590:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	2300      	movs	r3, #0
 8003598:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800359a:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a4:	4b44      	ldr	r3, [pc, #272]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0x34>
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d121      	bne.n	80035fe <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d11e      	bne.n	80035fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035c0:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035cc:	4b3a      	ldr	r3, [pc, #232]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80035ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	e005      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035dc:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80035e8:	4a34      	ldr	r2, [pc, #208]	; (80036bc <HAL_RCC_GetSysClockFreq+0x130>)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10d      	bne.n	8003614 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035fc:	e00a      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b04      	cmp	r3, #4
 8003602:	d102      	bne.n	800360a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003604:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	e004      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d101      	bne.n	8003614 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003610:	4b2c      	ldr	r3, [pc, #176]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003612:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b0c      	cmp	r3, #12
 8003618:	d146      	bne.n	80036a8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800361a:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003624:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	3301      	adds	r3, #1
 8003630:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d003      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0xb4>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d00d      	beq.n	800365a <HAL_RCC_GetSysClockFreq+0xce>
 800363e:	e019      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003640:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	4a1b      	ldr	r2, [pc, #108]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800364a:	68d2      	ldr	r2, [r2, #12]
 800364c:	0a12      	lsrs	r2, r2, #8
 800364e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	617b      	str	r3, [r7, #20]
        break;
 8003658:	e019      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800365a:	4a1a      	ldr	r2, [pc, #104]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003662:	4a15      	ldr	r2, [pc, #84]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003664:	68d2      	ldr	r2, [r2, #12]
 8003666:	0a12      	lsrs	r2, r2, #8
 8003668:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800366c:	fb02 f303 	mul.w	r3, r2, r3
 8003670:	617b      	str	r3, [r7, #20]
        break;
 8003672:	e00c      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800367e:	68d2      	ldr	r2, [r2, #12]
 8003680:	0a12      	lsrs	r2, r2, #8
 8003682:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	617b      	str	r3, [r7, #20]
        break;
 800368c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800368e:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	0e5b      	lsrs	r3, r3, #25
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	3301      	adds	r3, #1
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036a8:	69bb      	ldr	r3, [r7, #24]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3724      	adds	r7, #36	; 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
 80036bc:	08007e3c 	.word	0x08007e3c
 80036c0:	00f42400 	.word	0x00f42400
 80036c4:	007a1200 	.word	0x007a1200

080036c8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80036cc:	f7ff ff5e 	bl	800358c <HAL_RCC_GetSysClockFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x20>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	4903      	ldr	r1, [pc, #12]	; (80036ec <HAL_RCC_GetHCLKFreq+0x24>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000
 80036ec:	08007e24 	.word	0x08007e24

080036f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036f4:	f7ff ffe8 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 80036f8:	4602      	mov	r2, r0
 80036fa:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	4903      	ldr	r1, [pc, #12]	; (8003714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003706:	5ccb      	ldrb	r3, [r1, r3]
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800370c:	4618      	mov	r0, r3
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000
 8003714:	08007e34 	.word	0x08007e34

08003718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800371c:	f7ff ffd4 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	0adb      	lsrs	r3, r3, #11
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4903      	ldr	r1, [pc, #12]	; (800373c <HAL_RCC_GetPCLK2Freq+0x24>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003734:	4618      	mov	r0, r3
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40021000 	.word	0x40021000
 800373c:	08007e34 	.word	0x08007e34

08003740 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800374c:	4b2c      	ldr	r3, [pc, #176]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003758:	f7ff f86c 	bl	8002834 <HAL_PWREx_GetVoltageRange>
 800375c:	6138      	str	r0, [r7, #16]
 800375e:	e014      	b.n	800378a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003760:	4b27      	ldr	r3, [pc, #156]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003764:	4a26      	ldr	r2, [pc, #152]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376a:	6593      	str	r3, [r2, #88]	; 0x58
 800376c:	4b24      	ldr	r3, [pc, #144]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003778:	f7ff f85c 	bl	8002834 <HAL_PWREx_GetVoltageRange>
 800377c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800377e:	4b20      	ldr	r3, [pc, #128]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003788:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003796:	d10b      	bne.n	80037b0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d919      	bls.n	80037d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2ba0      	cmp	r3, #160	; 0xa0
 80037a2:	d902      	bls.n	80037aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037a4:	2302      	movs	r3, #2
 80037a6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80037a8:	e013      	b.n	80037d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037aa:	2301      	movs	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80037ae:	e010      	b.n	80037d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b80      	cmp	r3, #128	; 0x80
 80037b4:	d902      	bls.n	80037bc <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037b6:	2303      	movs	r3, #3
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e00a      	b.n	80037d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b80      	cmp	r3, #128	; 0x80
 80037c0:	d102      	bne.n	80037c8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037c2:	2302      	movs	r3, #2
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e004      	b.n	80037d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b70      	cmp	r3, #112	; 0x70
 80037cc:	d101      	bne.n	80037d2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037ce:	2301      	movs	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037d2:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 020f 	bic.w	r2, r3, #15
 80037da:	490a      	ldr	r1, [pc, #40]	; (8003804 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80037e2:	4b08      	ldr	r3, [pc, #32]	; (8003804 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	40022000 	.word	0x40022000

08003808 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800380e:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003818:	4b2e      	ldr	r3, [pc, #184]	; (80038d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	3301      	adds	r3, #1
 8003824:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b03      	cmp	r3, #3
 800382a:	d015      	beq.n	8003858 <RCC_GetSysClockFreqFromPLLSource+0x50>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d839      	bhi.n	80038a6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d01c      	beq.n	8003872 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d133      	bne.n	80038a6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800383e:	4a26      	ldr	r2, [pc, #152]	; (80038d8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	4a23      	ldr	r2, [pc, #140]	; (80038d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003848:	68d2      	ldr	r2, [r2, #12]
 800384a:	0a12      	lsrs	r2, r2, #8
 800384c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003850:	fb02 f303 	mul.w	r3, r2, r3
 8003854:	613b      	str	r3, [r7, #16]
      break;
 8003856:	e029      	b.n	80038ac <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003858:	4a20      	ldr	r2, [pc, #128]	; (80038dc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003860:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003862:	68d2      	ldr	r2, [r2, #12]
 8003864:	0a12      	lsrs	r2, r2, #8
 8003866:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	613b      	str	r3, [r7, #16]
      break;
 8003870:	e01c      	b.n	80038ac <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003872:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d107      	bne.n	800388e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800387e:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003884:	0a1b      	lsrs	r3, r3, #8
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e005      	b.n	800389a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800388e:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800389a:	4a11      	ldr	r2, [pc, #68]	; (80038e0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a2:	613b      	str	r3, [r7, #16]
        break;
 80038a4:	e002      	b.n	80038ac <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
      break;
 80038aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80038ac:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	0e5b      	lsrs	r3, r3, #25
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	3301      	adds	r3, #1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80038c6:	683b      	ldr	r3, [r7, #0]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40021000 	.word	0x40021000
 80038d8:	00f42400 	.word	0x00f42400
 80038dc:	007a1200 	.word	0x007a1200
 80038e0:	08007e3c 	.word	0x08007e3c

080038e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038ec:	2300      	movs	r3, #0
 80038ee:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038f0:	2300      	movs	r3, #0
 80038f2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d040      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d02a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003908:	2b80      	cmp	r3, #128	; 0x80
 800390a:	d825      	bhi.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800390c:	2b60      	cmp	r3, #96	; 0x60
 800390e:	d026      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003910:	2b60      	cmp	r3, #96	; 0x60
 8003912:	d821      	bhi.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d006      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d81d      	bhi.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003920:	2b20      	cmp	r3, #32
 8003922:	d010      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003924:	e018      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003926:	4b8f      	ldr	r3, [pc, #572]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	4a8e      	ldr	r2, [pc, #568]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003930:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003932:	e015      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fb56 	bl	8003fec <RCCEx_PLLSAI1_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003944:	e00c      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3320      	adds	r3, #32
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fc33 	bl	80041b8 <RCCEx_PLLSAI2_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003956:	e003      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	77fb      	strb	r3, [r7, #31]
        break;
 800395c:	e000      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800395e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003960:	7ffb      	ldrb	r3, [r7, #31]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10b      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003966:	4b7f      	ldr	r3, [pc, #508]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003968:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800396c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003974:	497b      	ldr	r1, [pc, #492]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800397c:	e001      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397e:	7ffb      	ldrb	r3, [r7, #31]
 8003980:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d047      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003996:	d030      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399c:	d82a      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800399e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a2:	d02a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a8:	d824      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ae:	d008      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80039b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b4:	d81e      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80039ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039be:	d010      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80039c0:	e018      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039c2:	4b68      	ldr	r3, [pc, #416]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	4a67      	ldr	r2, [pc, #412]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80039ce:	e015      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fb08 	bl	8003fec <RCCEx_PLLSAI1_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80039e0:	e00c      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3320      	adds	r3, #32
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fbe5 	bl	80041b8 <RCCEx_PLLSAI2_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80039f2:	e003      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	77fb      	strb	r3, [r7, #31]
        break;
 80039f8:	e000      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80039fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fc:	7ffb      	ldrb	r3, [r7, #31]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10b      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a02:	4b58      	ldr	r3, [pc, #352]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a10:	4954      	ldr	r1, [pc, #336]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a18:	e001      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1a:	7ffb      	ldrb	r3, [r7, #31]
 8003a1c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80ab 	beq.w	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a30:	4b4c      	ldr	r3, [pc, #304]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10d      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3c:	4b49      	ldr	r3, [pc, #292]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	4a48      	ldr	r2, [pc, #288]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a46:	6593      	str	r3, [r2, #88]	; 0x58
 8003a48:	4b46      	ldr	r3, [pc, #280]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a58:	4b43      	ldr	r3, [pc, #268]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a42      	ldr	r2, [pc, #264]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a64:	f7fd fb9c 	bl	80011a0 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a6a:	e00f      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a6c:	f7fd fb98 	bl	80011a0 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d908      	bls.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a7a:	4b3b      	ldr	r3, [pc, #236]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003a8a:	e006      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a8c:	4b36      	ldr	r3, [pc, #216]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0e9      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003a98:	e000      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003a9a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003a9c:	7ffb      	ldrb	r3, [r7, #31]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d164      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003aa2:	4b30      	ldr	r3, [pc, #192]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aac:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01f      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d019      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ac0:	4b28      	ldr	r3, [pc, #160]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aca:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003acc:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	4a24      	ldr	r2, [pc, #144]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003adc:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	4a20      	ldr	r2, [pc, #128]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003aec:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01f      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fd fb4f 	bl	80011a0 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b04:	e012      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7fd fb4b 	bl	80011a0 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d909      	bls.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003b2a:	e007      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0e5      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003b3a:	e000      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003b3c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003b3e:	7ffb      	ldrb	r3, [r7, #31]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10c      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b54:	4903      	ldr	r1, [pc, #12]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b5c:	e008      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b5e:	7ffb      	ldrb	r3, [r7, #31]
 8003b60:	77bb      	strb	r3, [r7, #30]
 8003b62:	e005      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	7ffb      	ldrb	r3, [r7, #31]
 8003b6e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b76:	4b9c      	ldr	r3, [pc, #624]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7a:	4a9b      	ldr	r2, [pc, #620]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b8e:	4b96      	ldr	r3, [pc, #600]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f023 0203 	bic.w	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9c:	4992      	ldr	r1, [pc, #584]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bb0:	4b8d      	ldr	r3, [pc, #564]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f023 020c 	bic.w	r2, r3, #12
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	498a      	ldr	r1, [pc, #552]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bd2:	4b85      	ldr	r3, [pc, #532]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	4981      	ldr	r1, [pc, #516]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bf4:	4b7c      	ldr	r3, [pc, #496]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	4979      	ldr	r1, [pc, #484]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c16:	4b74      	ldr	r3, [pc, #464]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	4970      	ldr	r1, [pc, #448]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c38:	4b6b      	ldr	r3, [pc, #428]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c46:	4968      	ldr	r1, [pc, #416]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c5a:	4b63      	ldr	r3, [pc, #396]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	495f      	ldr	r1, [pc, #380]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c7c:	4b5a      	ldr	r3, [pc, #360]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8a:	4957      	ldr	r1, [pc, #348]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003c9e:	4b52      	ldr	r3, [pc, #328]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cac:	494e      	ldr	r1, [pc, #312]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d031      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cc8:	d00e      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003cca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cce:	d814      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd8:	d10f      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cda:	4b43      	ldr	r3, [pc, #268]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	4a42      	ldr	r2, [pc, #264]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003ce6:	e00c      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	2100      	movs	r1, #0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f97c 	bl	8003fec <RCCEx_PLLSAI1_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003cf8:	e003      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	77fb      	strb	r3, [r7, #31]
        break;
 8003cfe:	e000      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d02:	7ffb      	ldrb	r3, [r7, #31]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d08:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d16:	4934      	ldr	r1, [pc, #208]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d1e:	e001      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d20:	7ffb      	ldrb	r3, [r7, #31]
 8003d22:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d30:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3e:	492a      	ldr	r1, [pc, #168]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d52:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d60:	4921      	ldr	r1, [pc, #132]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d74:	4b1c      	ldr	r3, [pc, #112]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d82:	4919      	ldr	r1, [pc, #100]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d96:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d9c:	f023 0203 	bic.w	r2, r3, #3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da4:	4910      	ldr	r1, [pc, #64]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02b      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc6:	4908      	ldr	r1, [pc, #32]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd6:	d109      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a02      	ldr	r2, [pc, #8]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de2:	60d3      	str	r3, [r2, #12]
 8003de4:	e014      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f8f5 	bl	8003fec <RCCEx_PLLSAI1_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003e06:	7ffb      	ldrb	r3, [r7, #31]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8003e0c:	7ffb      	ldrb	r3, [r7, #31]
 8003e0e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d04a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e24:	d108      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003e26:	4b70      	ldr	r3, [pc, #448]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e2c:	4a6e      	ldr	r2, [pc, #440]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e32:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003e36:	e012      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003e38:	4b6b      	ldr	r3, [pc, #428]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e46:	4968      	ldr	r1, [pc, #416]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e4e:	4b66      	ldr	r3, [pc, #408]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e54:	4a64      	ldr	r2, [pc, #400]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e5a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e66:	d10d      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f8bc 	bl	8003fec <RCCEx_PLLSAI1_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003e78:	7ffb      	ldrb	r3, [r7, #31]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d019      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003e7e:	7ffb      	ldrb	r3, [r7, #31]
 8003e80:	77bb      	strb	r3, [r7, #30]
 8003e82:	e016      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e8c:	d106      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8e:	4b56      	ldr	r3, [pc, #344]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	4a55      	ldr	r2, [pc, #340]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e98:	60d3      	str	r3, [r2, #12]
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ea4:	d105      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ea6:	4b50      	ldr	r3, [pc, #320]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	4a4f      	ldr	r2, [pc, #316]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d028      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ebe:	4b4a      	ldr	r3, [pc, #296]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ecc:	4946      	ldr	r1, [pc, #280]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003edc:	d106      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ede:	4b42      	ldr	r3, [pc, #264]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	4a41      	ldr	r2, [pc, #260]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ee8:	60d3      	str	r3, [r2, #12]
 8003eea:	e011      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	2101      	movs	r1, #1
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f875 	bl	8003fec <RCCEx_PLLSAI1_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f06:	7ffb      	ldrb	r3, [r7, #31]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8003f0c:	7ffb      	ldrb	r3, [r7, #31]
 8003f0e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01e      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f1c:	4b32      	ldr	r3, [pc, #200]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f2c:	492e      	ldr	r1, [pc, #184]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f3e:	d10c      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	2102      	movs	r1, #2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f850 	bl	8003fec <RCCEx_PLLSAI1_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f50:	7ffb      	ldrb	r3, [r7, #31]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8003f56:	7ffb      	ldrb	r3, [r7, #31]
 8003f58:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f66:	4b20      	ldr	r3, [pc, #128]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f6c:	f023 0204 	bic.w	r2, r3, #4
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f76:	491c      	ldr	r1, [pc, #112]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f8a:	4b17      	ldr	r3, [pc, #92]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f90:	f023 0218 	bic.w	r2, r3, #24
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	4913      	ldr	r1, [pc, #76]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d017      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003fae:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fbe:	490a      	ldr	r1, [pc, #40]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fd0:	d105      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd2:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	4a04      	ldr	r2, [pc, #16]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fdc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003fde:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3720      	adds	r7, #32
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000

08003fec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d018      	beq.n	8004034 <RCCEx_PLLSAI1_Config+0x48>
 8004002:	2b03      	cmp	r3, #3
 8004004:	d81f      	bhi.n	8004046 <RCCEx_PLLSAI1_Config+0x5a>
 8004006:	2b01      	cmp	r3, #1
 8004008:	d002      	beq.n	8004010 <RCCEx_PLLSAI1_Config+0x24>
 800400a:	2b02      	cmp	r3, #2
 800400c:	d009      	beq.n	8004022 <RCCEx_PLLSAI1_Config+0x36>
 800400e:	e01a      	b.n	8004046 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004010:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d117      	bne.n	800404c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004020:	e014      	b.n	800404c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004022:	4b61      	ldr	r3, [pc, #388]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402a:	2b00      	cmp	r3, #0
 800402c:	d110      	bne.n	8004050 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004032:	e00d      	b.n	8004050 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004034:	4b5c      	ldr	r3, [pc, #368]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d109      	bne.n	8004054 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004044:	e006      	b.n	8004054 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
      break;
 800404a:	e004      	b.n	8004056 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800404c:	bf00      	nop
 800404e:	e002      	b.n	8004056 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004050:	bf00      	nop
 8004052:	e000      	b.n	8004056 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004054:	bf00      	nop
  }

  if (status == HAL_OK)
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f040 809f 	bne.w	800419c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800405e:	4b52      	ldr	r3, [pc, #328]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a51      	ldr	r2, [pc, #324]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004064:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406a:	f7fd f899 	bl	80011a0 <HAL_GetTick>
 800406e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004070:	e00f      	b.n	8004092 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004072:	f7fd f895 	bl	80011a0 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d908      	bls.n	8004092 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004080:	4b49      	ldr	r3, [pc, #292]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d009      	beq.n	80040a0 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004090:	e006      	b.n	80040a0 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004092:	4b45      	ldr	r3, [pc, #276]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e9      	bne.n	8004072 <RCCEx_PLLSAI1_Config+0x86>
 800409e:	e000      	b.n	80040a2 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80040a0:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d179      	bne.n	800419c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d116      	bne.n	80040dc <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ae:	4b3e      	ldr	r3, [pc, #248]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	4b3e      	ldr	r3, [pc, #248]	; (80041ac <RCCEx_PLLSAI1_Config+0x1c0>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6892      	ldr	r2, [r2, #8]
 80040ba:	0211      	lsls	r1, r2, #8
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68d2      	ldr	r2, [r2, #12]
 80040c0:	06d2      	lsls	r2, r2, #27
 80040c2:	4311      	orrs	r1, r2
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6852      	ldr	r2, [r2, #4]
 80040c8:	3a01      	subs	r2, #1
 80040ca:	0112      	lsls	r2, r2, #4
 80040cc:	4311      	orrs	r1, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	4934      	ldr	r1, [pc, #208]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	610b      	str	r3, [r1, #16]
 80040da:	e033      	b.n	8004144 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d118      	bne.n	8004114 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040e2:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	4b32      	ldr	r3, [pc, #200]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1c4>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6892      	ldr	r2, [r2, #8]
 80040ee:	0211      	lsls	r1, r2, #8
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6912      	ldr	r2, [r2, #16]
 80040f4:	0852      	lsrs	r2, r2, #1
 80040f6:	3a01      	subs	r2, #1
 80040f8:	0552      	lsls	r2, r2, #21
 80040fa:	4311      	orrs	r1, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6852      	ldr	r2, [r2, #4]
 8004100:	3a01      	subs	r2, #1
 8004102:	0112      	lsls	r2, r2, #4
 8004104:	4311      	orrs	r1, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6812      	ldr	r2, [r2, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	4926      	ldr	r1, [pc, #152]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	610b      	str	r3, [r1, #16]
 8004112:	e017      	b.n	8004144 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004114:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	4b26      	ldr	r3, [pc, #152]	; (80041b4 <RCCEx_PLLSAI1_Config+0x1c8>)
 800411a:	4013      	ands	r3, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6892      	ldr	r2, [r2, #8]
 8004120:	0211      	lsls	r1, r2, #8
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6952      	ldr	r2, [r2, #20]
 8004126:	0852      	lsrs	r2, r2, #1
 8004128:	3a01      	subs	r2, #1
 800412a:	0652      	lsls	r2, r2, #25
 800412c:	4311      	orrs	r1, r2
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6852      	ldr	r2, [r2, #4]
 8004132:	3a01      	subs	r2, #1
 8004134:	0112      	lsls	r2, r2, #4
 8004136:	4311      	orrs	r1, r2
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	491a      	ldr	r1, [pc, #104]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004140:	4313      	orrs	r3, r2
 8004142:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004144:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a17      	ldr	r2, [pc, #92]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800414a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800414e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004150:	f7fd f826 	bl	80011a0 <HAL_GetTick>
 8004154:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004156:	e00f      	b.n	8004178 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004158:	f7fd f822 	bl	80011a0 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d908      	bls.n	8004178 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004166:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004176:	e006      	b.n	8004186 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0e9      	beq.n	8004158 <RCCEx_PLLSAI1_Config+0x16c>
 8004184:	e000      	b.n	8004188 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004186:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800418e:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	4904      	ldr	r1, [pc, #16]	; (80041a8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004198:	4313      	orrs	r3, r2
 800419a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000
 80041ac:	07ff800c 	.word	0x07ff800c
 80041b0:	ff9f800c 	.word	0xff9f800c
 80041b4:	f9ff800c 	.word	0xf9ff800c

080041b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d018      	beq.n	8004200 <RCCEx_PLLSAI2_Config+0x48>
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d81f      	bhi.n	8004212 <RCCEx_PLLSAI2_Config+0x5a>
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d002      	beq.n	80041dc <RCCEx_PLLSAI2_Config+0x24>
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d009      	beq.n	80041ee <RCCEx_PLLSAI2_Config+0x36>
 80041da:	e01a      	b.n	8004212 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041dc:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d117      	bne.n	8004218 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ec:	e014      	b.n	8004218 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041ee:	4b46      	ldr	r3, [pc, #280]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d110      	bne.n	800421c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041fe:	e00d      	b.n	800421c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004200:	4b41      	ldr	r3, [pc, #260]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d109      	bne.n	8004220 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004210:	e006      	b.n	8004220 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
      break;
 8004216:	e004      	b.n	8004222 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004218:	bf00      	nop
 800421a:	e002      	b.n	8004222 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800421c:	bf00      	nop
 800421e:	e000      	b.n	8004222 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004220:	bf00      	nop
  }

  if (status == HAL_OK)
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d169      	bne.n	80042fc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004228:	4b37      	ldr	r3, [pc, #220]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a36      	ldr	r2, [pc, #216]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 800422e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004232:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004234:	f7fc ffb4 	bl	80011a0 <HAL_GetTick>
 8004238:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800423a:	e00f      	b.n	800425c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800423c:	f7fc ffb0 	bl	80011a0 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d908      	bls.n	800425c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800424a:	4b2f      	ldr	r3, [pc, #188]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800425a:	e006      	b.n	800426a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800425c:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e9      	bne.n	800423c <RCCEx_PLLSAI2_Config+0x84>
 8004268:	e000      	b.n	800426c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800426a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d144      	bne.n	80042fc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d115      	bne.n	80042a4 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004278:	4b23      	ldr	r3, [pc, #140]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 800427a:	695a      	ldr	r2, [r3, #20]
 800427c:	4b23      	ldr	r3, [pc, #140]	; (800430c <RCCEx_PLLSAI2_Config+0x154>)
 800427e:	4013      	ands	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6892      	ldr	r2, [r2, #8]
 8004284:	0211      	lsls	r1, r2, #8
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68d2      	ldr	r2, [r2, #12]
 800428a:	06d2      	lsls	r2, r2, #27
 800428c:	4311      	orrs	r1, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6852      	ldr	r2, [r2, #4]
 8004292:	3a01      	subs	r2, #1
 8004294:	0112      	lsls	r2, r2, #4
 8004296:	4311      	orrs	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	491a      	ldr	r1, [pc, #104]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042a4:	4b18      	ldr	r3, [pc, #96]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a17      	ldr	r2, [pc, #92]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 80042aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fc ff76 	bl	80011a0 <HAL_GetTick>
 80042b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042b6:	e00f      	b.n	80042d8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042b8:	f7fc ff72 	bl	80011a0 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d908      	bls.n	80042d8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80042d6:	e006      	b.n	80042e6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0e9      	beq.n	80042b8 <RCCEx_PLLSAI2_Config+0x100>
 80042e4:	e000      	b.n	80042e8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80042e6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 80042f0:	695a      	ldr	r2, [r3, #20]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	4904      	ldr	r1, [pc, #16]	; (8004308 <RCCEx_PLLSAI2_Config+0x150>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
 800430c:	07ff800c 	.word	0x07ff800c

08004310 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d066      	beq.n	80043f0 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fc fd3e 	bl	8000db8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b10      	cmp	r3, #16
 8004350:	d045      	beq.n	80043de <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004352:	4b2a      	ldr	r3, [pc, #168]	; (80043fc <HAL_RTC_Init+0xec>)
 8004354:	22ca      	movs	r2, #202	; 0xca
 8004356:	625a      	str	r2, [r3, #36]	; 0x24
 8004358:	4b28      	ldr	r3, [pc, #160]	; (80043fc <HAL_RTC_Init+0xec>)
 800435a:	2253      	movs	r2, #83	; 0x53
 800435c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f872 	bl	8004448 <RTC_EnterInitMode>
 8004364:	4603      	mov	r3, r0
 8004366:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d121      	bne.n	80043b2 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800436e:	4b23      	ldr	r3, [pc, #140]	; (80043fc <HAL_RTC_Init+0xec>)
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	4a22      	ldr	r2, [pc, #136]	; (80043fc <HAL_RTC_Init+0xec>)
 8004374:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800437c:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800437e:	4b1f      	ldr	r3, [pc, #124]	; (80043fc <HAL_RTC_Init+0xec>)
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6859      	ldr	r1, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	4319      	orrs	r1, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	430b      	orrs	r3, r1
 8004392:	491a      	ldr	r1, [pc, #104]	; (80043fc <HAL_RTC_Init+0xec>)
 8004394:	4313      	orrs	r3, r2
 8004396:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	041b      	lsls	r3, r3, #16
 80043a2:	4916      	ldr	r1, [pc, #88]	; (80043fc <HAL_RTC_Init+0xec>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f881 	bl	80044b0 <RTC_ExitInitMode>
 80043ae:	4603      	mov	r3, r0
 80043b0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10e      	bne.n	80043d6 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 80043b8:	4b10      	ldr	r3, [pc, #64]	; (80043fc <HAL_RTC_Init+0xec>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a19      	ldr	r1, [r3, #32]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	4319      	orrs	r1, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	430b      	orrs	r3, r1
 80043d0:	490a      	ldr	r1, [pc, #40]	; (80043fc <HAL_RTC_Init+0xec>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_RTC_Init+0xec>)
 80043d8:	22ff      	movs	r2, #255	; 0xff
 80043da:	625a      	str	r2, [r3, #36]	; 0x24
 80043dc:	e001      	b.n	80043e2 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d103      	bne.n	80043f0 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40002800 	.word	0x40002800

08004400 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8004408:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <HAL_RTC_WaitForSynchro+0x40>)
 800440a:	4a0e      	ldr	r2, [pc, #56]	; (8004444 <HAL_RTC_WaitForSynchro+0x44>)
 800440c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800440e:	f7fc fec7 	bl	80011a0 <HAL_GetTick>
 8004412:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004414:	e009      	b.n	800442a <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004416:	f7fc fec3 	bl	80011a0 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004424:	d901      	bls.n	800442a <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e006      	b.n	8004438 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RTC_WaitForSynchro+0x40>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0ef      	beq.n	8004416 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40002800 	.word	0x40002800
 8004444:	0001005c 	.word	0x0001005c

08004448 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004454:	4b15      	ldr	r3, [pc, #84]	; (80044ac <RTC_EnterInitMode+0x64>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d120      	bne.n	80044a2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004460:	4b12      	ldr	r3, [pc, #72]	; (80044ac <RTC_EnterInitMode+0x64>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a11      	ldr	r2, [pc, #68]	; (80044ac <RTC_EnterInitMode+0x64>)
 8004466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800446c:	f7fc fe98 	bl	80011a0 <HAL_GetTick>
 8004470:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004472:	e00d      	b.n	8004490 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004474:	f7fc fe94 	bl	80011a0 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004482:	d905      	bls.n	8004490 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2203      	movs	r2, #3
 800448c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <RTC_EnterInitMode+0x64>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d102      	bne.n	80044a2 <RTC_EnterInitMode+0x5a>
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d1e8      	bne.n	8004474 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40002800 	.word	0x40002800

080044b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80044bc:	4b1a      	ldr	r3, [pc, #104]	; (8004528 <RTC_ExitInitMode+0x78>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a19      	ldr	r2, [pc, #100]	; (8004528 <RTC_ExitInitMode+0x78>)
 80044c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044c6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80044c8:	4b17      	ldr	r3, [pc, #92]	; (8004528 <RTC_ExitInitMode+0x78>)
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10c      	bne.n	80044ee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff ff93 	bl	8004400 <HAL_RTC_WaitForSynchro>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01e      	beq.n	800451e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2203      	movs	r2, #3
 80044e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	73fb      	strb	r3, [r7, #15]
 80044ec:	e017      	b.n	800451e <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80044ee:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <RTC_ExitInitMode+0x78>)
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	4a0d      	ldr	r2, [pc, #52]	; (8004528 <RTC_ExitInitMode+0x78>)
 80044f4:	f023 0320 	bic.w	r3, r3, #32
 80044f8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff ff80 	bl	8004400 <HAL_RTC_WaitForSynchro>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2203      	movs	r2, #3
 800450a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004512:	4b05      	ldr	r3, [pc, #20]	; (8004528 <RTC_ExitInitMode+0x78>)
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	4a04      	ldr	r2, [pc, #16]	; (8004528 <RTC_ExitInitMode+0x78>)
 8004518:	f043 0320 	orr.w	r3, r3, #32
 800451c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800451e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40002800 	.word	0x40002800

0800452c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	490f      	ldr	r1, [pc, #60]	; (800457c <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8004540:	4313      	orrs	r3, r2
 8004542:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	490c      	ldr	r1, [pc, #48]	; (8004580 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800454e:	4313      	orrs	r3, r2
 8004550:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8004552:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6919      	ldr	r1, [r3, #16]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	041b      	lsls	r3, r3, #16
 8004564:	430b      	orrs	r3, r1
 8004566:	4906      	ldr	r1, [pc, #24]	; (8004580 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004568:	4313      	orrs	r3, r2
 800456a:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40002800 	.word	0x40002800
 8004580:	40003400 	.word	0x40003400

08004584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e042      	b.n	800461c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	2b00      	cmp	r3, #0
 800459e:	d106      	bne.n	80045ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fc fba5 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2224      	movs	r2, #36	; 0x24
 80045b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0201 	bic.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fb28 	bl	8004c24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f825 	bl	8004624 <UART_SetConfig>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e01b      	b.n	800461c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004602:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fba7 	bl	8004d68 <UART_CheckIdleState>
 800461a:	4603      	mov	r3, r0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004628:	b08c      	sub	sp, #48	; 0x30
 800462a:	af00      	add	r7, sp, #0
 800462c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	431a      	orrs	r2, r3
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	431a      	orrs	r2, r3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	4313      	orrs	r3, r2
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4baa      	ldr	r3, [pc, #680]	; (80048fc <UART_SetConfig+0x2d8>)
 8004654:	4013      	ands	r3, r2
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800465c:	430b      	orrs	r3, r1
 800465e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a9f      	ldr	r2, [pc, #636]	; (8004900 <UART_SetConfig+0x2dc>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800468c:	4313      	orrs	r3, r2
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800469a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	6812      	ldr	r2, [r2, #0]
 80046a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	f023 010f 	bic.w	r1, r3, #15
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a90      	ldr	r2, [pc, #576]	; (8004904 <UART_SetConfig+0x2e0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d125      	bne.n	8004714 <UART_SetConfig+0xf0>
 80046c8:	4b8f      	ldr	r3, [pc, #572]	; (8004908 <UART_SetConfig+0x2e4>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d81a      	bhi.n	800470c <UART_SetConfig+0xe8>
 80046d6:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <UART_SetConfig+0xb8>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	080046ed 	.word	0x080046ed
 80046e0:	080046fd 	.word	0x080046fd
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	08004705 	.word	0x08004705
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f2:	e116      	b.n	8004922 <UART_SetConfig+0x2fe>
 80046f4:	2302      	movs	r3, #2
 80046f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046fa:	e112      	b.n	8004922 <UART_SetConfig+0x2fe>
 80046fc:	2304      	movs	r3, #4
 80046fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004702:	e10e      	b.n	8004922 <UART_SetConfig+0x2fe>
 8004704:	2308      	movs	r3, #8
 8004706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800470a:	e10a      	b.n	8004922 <UART_SetConfig+0x2fe>
 800470c:	2310      	movs	r3, #16
 800470e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004712:	e106      	b.n	8004922 <UART_SetConfig+0x2fe>
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a7c      	ldr	r2, [pc, #496]	; (800490c <UART_SetConfig+0x2e8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d138      	bne.n	8004790 <UART_SetConfig+0x16c>
 800471e:	4b7a      	ldr	r3, [pc, #488]	; (8004908 <UART_SetConfig+0x2e4>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004724:	f003 030c 	and.w	r3, r3, #12
 8004728:	2b0c      	cmp	r3, #12
 800472a:	d82d      	bhi.n	8004788 <UART_SetConfig+0x164>
 800472c:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <UART_SetConfig+0x110>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004769 	.word	0x08004769
 8004738:	08004789 	.word	0x08004789
 800473c:	08004789 	.word	0x08004789
 8004740:	08004789 	.word	0x08004789
 8004744:	08004779 	.word	0x08004779
 8004748:	08004789 	.word	0x08004789
 800474c:	08004789 	.word	0x08004789
 8004750:	08004789 	.word	0x08004789
 8004754:	08004771 	.word	0x08004771
 8004758:	08004789 	.word	0x08004789
 800475c:	08004789 	.word	0x08004789
 8004760:	08004789 	.word	0x08004789
 8004764:	08004781 	.word	0x08004781
 8004768:	2300      	movs	r3, #0
 800476a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800476e:	e0d8      	b.n	8004922 <UART_SetConfig+0x2fe>
 8004770:	2302      	movs	r3, #2
 8004772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004776:	e0d4      	b.n	8004922 <UART_SetConfig+0x2fe>
 8004778:	2304      	movs	r3, #4
 800477a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800477e:	e0d0      	b.n	8004922 <UART_SetConfig+0x2fe>
 8004780:	2308      	movs	r3, #8
 8004782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004786:	e0cc      	b.n	8004922 <UART_SetConfig+0x2fe>
 8004788:	2310      	movs	r3, #16
 800478a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800478e:	e0c8      	b.n	8004922 <UART_SetConfig+0x2fe>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a5e      	ldr	r2, [pc, #376]	; (8004910 <UART_SetConfig+0x2ec>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d125      	bne.n	80047e6 <UART_SetConfig+0x1c2>
 800479a:	4b5b      	ldr	r3, [pc, #364]	; (8004908 <UART_SetConfig+0x2e4>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047a4:	2b30      	cmp	r3, #48	; 0x30
 80047a6:	d016      	beq.n	80047d6 <UART_SetConfig+0x1b2>
 80047a8:	2b30      	cmp	r3, #48	; 0x30
 80047aa:	d818      	bhi.n	80047de <UART_SetConfig+0x1ba>
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d00a      	beq.n	80047c6 <UART_SetConfig+0x1a2>
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d814      	bhi.n	80047de <UART_SetConfig+0x1ba>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <UART_SetConfig+0x19a>
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d008      	beq.n	80047ce <UART_SetConfig+0x1aa>
 80047bc:	e00f      	b.n	80047de <UART_SetConfig+0x1ba>
 80047be:	2300      	movs	r3, #0
 80047c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047c4:	e0ad      	b.n	8004922 <UART_SetConfig+0x2fe>
 80047c6:	2302      	movs	r3, #2
 80047c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047cc:	e0a9      	b.n	8004922 <UART_SetConfig+0x2fe>
 80047ce:	2304      	movs	r3, #4
 80047d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047d4:	e0a5      	b.n	8004922 <UART_SetConfig+0x2fe>
 80047d6:	2308      	movs	r3, #8
 80047d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047dc:	e0a1      	b.n	8004922 <UART_SetConfig+0x2fe>
 80047de:	2310      	movs	r3, #16
 80047e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047e4:	e09d      	b.n	8004922 <UART_SetConfig+0x2fe>
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a4a      	ldr	r2, [pc, #296]	; (8004914 <UART_SetConfig+0x2f0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d125      	bne.n	800483c <UART_SetConfig+0x218>
 80047f0:	4b45      	ldr	r3, [pc, #276]	; (8004908 <UART_SetConfig+0x2e4>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047fa:	2bc0      	cmp	r3, #192	; 0xc0
 80047fc:	d016      	beq.n	800482c <UART_SetConfig+0x208>
 80047fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004800:	d818      	bhi.n	8004834 <UART_SetConfig+0x210>
 8004802:	2b80      	cmp	r3, #128	; 0x80
 8004804:	d00a      	beq.n	800481c <UART_SetConfig+0x1f8>
 8004806:	2b80      	cmp	r3, #128	; 0x80
 8004808:	d814      	bhi.n	8004834 <UART_SetConfig+0x210>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <UART_SetConfig+0x1f0>
 800480e:	2b40      	cmp	r3, #64	; 0x40
 8004810:	d008      	beq.n	8004824 <UART_SetConfig+0x200>
 8004812:	e00f      	b.n	8004834 <UART_SetConfig+0x210>
 8004814:	2300      	movs	r3, #0
 8004816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800481a:	e082      	b.n	8004922 <UART_SetConfig+0x2fe>
 800481c:	2302      	movs	r3, #2
 800481e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004822:	e07e      	b.n	8004922 <UART_SetConfig+0x2fe>
 8004824:	2304      	movs	r3, #4
 8004826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800482a:	e07a      	b.n	8004922 <UART_SetConfig+0x2fe>
 800482c:	2308      	movs	r3, #8
 800482e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004832:	e076      	b.n	8004922 <UART_SetConfig+0x2fe>
 8004834:	2310      	movs	r3, #16
 8004836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800483a:	e072      	b.n	8004922 <UART_SetConfig+0x2fe>
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a35      	ldr	r2, [pc, #212]	; (8004918 <UART_SetConfig+0x2f4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d12a      	bne.n	800489c <UART_SetConfig+0x278>
 8004846:	4b30      	ldr	r3, [pc, #192]	; (8004908 <UART_SetConfig+0x2e4>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004854:	d01a      	beq.n	800488c <UART_SetConfig+0x268>
 8004856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800485a:	d81b      	bhi.n	8004894 <UART_SetConfig+0x270>
 800485c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004860:	d00c      	beq.n	800487c <UART_SetConfig+0x258>
 8004862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004866:	d815      	bhi.n	8004894 <UART_SetConfig+0x270>
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <UART_SetConfig+0x250>
 800486c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004870:	d008      	beq.n	8004884 <UART_SetConfig+0x260>
 8004872:	e00f      	b.n	8004894 <UART_SetConfig+0x270>
 8004874:	2300      	movs	r3, #0
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487a:	e052      	b.n	8004922 <UART_SetConfig+0x2fe>
 800487c:	2302      	movs	r3, #2
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004882:	e04e      	b.n	8004922 <UART_SetConfig+0x2fe>
 8004884:	2304      	movs	r3, #4
 8004886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800488a:	e04a      	b.n	8004922 <UART_SetConfig+0x2fe>
 800488c:	2308      	movs	r3, #8
 800488e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004892:	e046      	b.n	8004922 <UART_SetConfig+0x2fe>
 8004894:	2310      	movs	r3, #16
 8004896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800489a:	e042      	b.n	8004922 <UART_SetConfig+0x2fe>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a17      	ldr	r2, [pc, #92]	; (8004900 <UART_SetConfig+0x2dc>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d13a      	bne.n	800491c <UART_SetConfig+0x2f8>
 80048a6:	4b18      	ldr	r3, [pc, #96]	; (8004908 <UART_SetConfig+0x2e4>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048b4:	d01a      	beq.n	80048ec <UART_SetConfig+0x2c8>
 80048b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048ba:	d81b      	bhi.n	80048f4 <UART_SetConfig+0x2d0>
 80048bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c0:	d00c      	beq.n	80048dc <UART_SetConfig+0x2b8>
 80048c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c6:	d815      	bhi.n	80048f4 <UART_SetConfig+0x2d0>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <UART_SetConfig+0x2b0>
 80048cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d0:	d008      	beq.n	80048e4 <UART_SetConfig+0x2c0>
 80048d2:	e00f      	b.n	80048f4 <UART_SetConfig+0x2d0>
 80048d4:	2300      	movs	r3, #0
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048da:	e022      	b.n	8004922 <UART_SetConfig+0x2fe>
 80048dc:	2302      	movs	r3, #2
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e2:	e01e      	b.n	8004922 <UART_SetConfig+0x2fe>
 80048e4:	2304      	movs	r3, #4
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ea:	e01a      	b.n	8004922 <UART_SetConfig+0x2fe>
 80048ec:	2308      	movs	r3, #8
 80048ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f2:	e016      	b.n	8004922 <UART_SetConfig+0x2fe>
 80048f4:	2310      	movs	r3, #16
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fa:	e012      	b.n	8004922 <UART_SetConfig+0x2fe>
 80048fc:	cfff69f3 	.word	0xcfff69f3
 8004900:	40008000 	.word	0x40008000
 8004904:	40013800 	.word	0x40013800
 8004908:	40021000 	.word	0x40021000
 800490c:	40004400 	.word	0x40004400
 8004910:	40004800 	.word	0x40004800
 8004914:	40004c00 	.word	0x40004c00
 8004918:	40005000 	.word	0x40005000
 800491c:	2310      	movs	r3, #16
 800491e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4ab0      	ldr	r2, [pc, #704]	; (8004be8 <UART_SetConfig+0x5c4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	f040 809b 	bne.w	8004a64 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800492e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004932:	2b08      	cmp	r3, #8
 8004934:	d827      	bhi.n	8004986 <UART_SetConfig+0x362>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <UART_SetConfig+0x318>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004961 	.word	0x08004961
 8004940:	08004969 	.word	0x08004969
 8004944:	08004971 	.word	0x08004971
 8004948:	08004987 	.word	0x08004987
 800494c:	08004977 	.word	0x08004977
 8004950:	08004987 	.word	0x08004987
 8004954:	08004987 	.word	0x08004987
 8004958:	08004987 	.word	0x08004987
 800495c:	0800497f 	.word	0x0800497f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004960:	f7fe fec6 	bl	80036f0 <HAL_RCC_GetPCLK1Freq>
 8004964:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004966:	e014      	b.n	8004992 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004968:	f7fe fed6 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 800496c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800496e:	e010      	b.n	8004992 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004970:	4b9e      	ldr	r3, [pc, #632]	; (8004bec <UART_SetConfig+0x5c8>)
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004974:	e00d      	b.n	8004992 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004976:	f7fe fe09 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800497a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800497c:	e009      	b.n	8004992 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004984:	e005      	b.n	8004992 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004990:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8130 	beq.w	8004bfa <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	4a94      	ldr	r2, [pc, #592]	; (8004bf0 <UART_SetConfig+0x5cc>)
 80049a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049a4:	461a      	mov	r2, r3
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d305      	bcc.n	80049ca <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d903      	bls.n	80049d2 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80049d0:	e113      	b.n	8004bfa <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	2200      	movs	r2, #0
 80049d6:	60bb      	str	r3, [r7, #8]
 80049d8:	60fa      	str	r2, [r7, #12]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	4a84      	ldr	r2, [pc, #528]	; (8004bf0 <UART_SetConfig+0x5cc>)
 80049e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2200      	movs	r2, #0
 80049e8:	603b      	str	r3, [r7, #0]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049f4:	f7fb fc24 	bl	8000240 <__aeabi_uldivmod>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4610      	mov	r0, r2
 80049fe:	4619      	mov	r1, r3
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	020b      	lsls	r3, r1, #8
 8004a0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a0e:	0202      	lsls	r2, r0, #8
 8004a10:	6979      	ldr	r1, [r7, #20]
 8004a12:	6849      	ldr	r1, [r1, #4]
 8004a14:	0849      	lsrs	r1, r1, #1
 8004a16:	2000      	movs	r0, #0
 8004a18:	460c      	mov	r4, r1
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	eb12 0804 	adds.w	r8, r2, r4
 8004a20:	eb43 0905 	adc.w	r9, r3, r5
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	469a      	mov	sl, r3
 8004a2c:	4693      	mov	fp, r2
 8004a2e:	4652      	mov	r2, sl
 8004a30:	465b      	mov	r3, fp
 8004a32:	4640      	mov	r0, r8
 8004a34:	4649      	mov	r1, r9
 8004a36:	f7fb fc03 	bl	8000240 <__aeabi_uldivmod>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4613      	mov	r3, r2
 8004a40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a48:	d308      	bcc.n	8004a5c <UART_SetConfig+0x438>
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a50:	d204      	bcs.n	8004a5c <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6a3a      	ldr	r2, [r7, #32]
 8004a58:	60da      	str	r2, [r3, #12]
 8004a5a:	e0ce      	b.n	8004bfa <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a62:	e0ca      	b.n	8004bfa <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a6c:	d166      	bne.n	8004b3c <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8004a6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d827      	bhi.n	8004ac6 <UART_SetConfig+0x4a2>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <UART_SetConfig+0x458>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004aa1 	.word	0x08004aa1
 8004a80:	08004aa9 	.word	0x08004aa9
 8004a84:	08004ab1 	.word	0x08004ab1
 8004a88:	08004ac7 	.word	0x08004ac7
 8004a8c:	08004ab7 	.word	0x08004ab7
 8004a90:	08004ac7 	.word	0x08004ac7
 8004a94:	08004ac7 	.word	0x08004ac7
 8004a98:	08004ac7 	.word	0x08004ac7
 8004a9c:	08004abf 	.word	0x08004abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aa0:	f7fe fe26 	bl	80036f0 <HAL_RCC_GetPCLK1Freq>
 8004aa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004aa6:	e014      	b.n	8004ad2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa8:	f7fe fe36 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 8004aac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004aae:	e010      	b.n	8004ad2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab0:	4b4e      	ldr	r3, [pc, #312]	; (8004bec <UART_SetConfig+0x5c8>)
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ab4:	e00d      	b.n	8004ad2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab6:	f7fe fd69 	bl	800358c <HAL_RCC_GetSysClockFreq>
 8004aba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004abc:	e009      	b.n	8004ad2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ac4:	e005      	b.n	8004ad2 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ad0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 8090 	beq.w	8004bfa <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	4a44      	ldr	r2, [pc, #272]	; (8004bf0 <UART_SetConfig+0x5cc>)
 8004ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aec:	005a      	lsls	r2, r3, #1
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	441a      	add	r2, r3
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	2b0f      	cmp	r3, #15
 8004b04:	d916      	bls.n	8004b34 <UART_SetConfig+0x510>
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0c:	d212      	bcs.n	8004b34 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f023 030f 	bic.w	r3, r3, #15
 8004b16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	085b      	lsrs	r3, r3, #1
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	8bfb      	ldrh	r3, [r7, #30]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	8bfa      	ldrh	r2, [r7, #30]
 8004b30:	60da      	str	r2, [r3, #12]
 8004b32:	e062      	b.n	8004bfa <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b3a:	e05e      	b.n	8004bfa <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d828      	bhi.n	8004b96 <UART_SetConfig+0x572>
 8004b44:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <UART_SetConfig+0x528>)
 8004b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4a:	bf00      	nop
 8004b4c:	08004b71 	.word	0x08004b71
 8004b50:	08004b79 	.word	0x08004b79
 8004b54:	08004b81 	.word	0x08004b81
 8004b58:	08004b97 	.word	0x08004b97
 8004b5c:	08004b87 	.word	0x08004b87
 8004b60:	08004b97 	.word	0x08004b97
 8004b64:	08004b97 	.word	0x08004b97
 8004b68:	08004b97 	.word	0x08004b97
 8004b6c:	08004b8f 	.word	0x08004b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b70:	f7fe fdbe 	bl	80036f0 <HAL_RCC_GetPCLK1Freq>
 8004b74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b76:	e014      	b.n	8004ba2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b78:	f7fe fdce 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 8004b7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b7e:	e010      	b.n	8004ba2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b80:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <UART_SetConfig+0x5c8>)
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b84:	e00d      	b.n	8004ba2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b86:	f7fe fd01 	bl	800358c <HAL_RCC_GetSysClockFreq>
 8004b8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b8c:	e009      	b.n	8004ba2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b94:	e005      	b.n	8004ba2 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ba0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d028      	beq.n	8004bfa <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	4a10      	ldr	r2, [pc, #64]	; (8004bf0 <UART_SetConfig+0x5cc>)
 8004bae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	441a      	add	r2, r3
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	2b0f      	cmp	r3, #15
 8004bd0:	d910      	bls.n	8004bf4 <UART_SetConfig+0x5d0>
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd8:	d20c      	bcs.n	8004bf4 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60da      	str	r2, [r3, #12]
 8004be4:	e009      	b.n	8004bfa <UART_SetConfig+0x5d6>
 8004be6:	bf00      	nop
 8004be8:	40008000 	.word	0x40008000
 8004bec:	00f42400 	.word	0x00f42400
 8004bf0:	08007e7c 	.word	0x08007e7c
      }
      else
      {
        ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2200      	movs	r2, #0
 8004c14:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3730      	adds	r7, #48	; 0x30
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01a      	beq.n	8004d3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d22:	d10a      	bne.n	8004d3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	605a      	str	r2, [r3, #4]
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b098      	sub	sp, #96	; 0x60
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d78:	f7fc fa12 	bl	80011a0 <HAL_GetTick>
 8004d7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d12f      	bne.n	8004dec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d94:	2200      	movs	r2, #0
 8004d96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f88e 	bl	8004ebc <UART_WaitOnFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d022      	beq.n	8004dec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dba:	653b      	str	r3, [r7, #80]	; 0x50
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e6      	bne.n	8004da6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e063      	b.n	8004eb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d149      	bne.n	8004e8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dfa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e02:	2200      	movs	r2, #0
 8004e04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f857 	bl	8004ebc <UART_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d03c      	beq.n	8004e8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	623b      	str	r3, [r7, #32]
   return(result);
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e32:	633b      	str	r3, [r7, #48]	; 0x30
 8004e34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e6      	bne.n	8004e14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3308      	adds	r3, #8
 8004e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e66:	61fa      	str	r2, [r7, #28]
 8004e68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	69b9      	ldr	r1, [r7, #24]
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	617b      	str	r3, [r7, #20]
   return(result);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e5      	bne.n	8004e46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e012      	b.n	8004eb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3758      	adds	r7, #88	; 0x58
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ecc:	e04f      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d04b      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed6:	f7fc f963 	bl	80011a0 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d302      	bcc.n	8004eec <UART_WaitOnFlagUntilTimeout+0x30>
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e04e      	b.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d037      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b80      	cmp	r3, #128	; 0x80
 8004f02:	d034      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b40      	cmp	r3, #64	; 0x40
 8004f08:	d031      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d110      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f838 	bl	8004f96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2208      	movs	r2, #8
 8004f2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e029      	b.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f48:	d111      	bne.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 f81e 	bl	8004f96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e00f      	b.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4013      	ands	r3, r2
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	bf0c      	ite	eq
 8004f7e:	2301      	moveq	r3, #1
 8004f80:	2300      	movne	r3, #0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d0a0      	beq.n	8004ece <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b095      	sub	sp, #84	; 0x54
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8004fbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e6      	bne.n	8004f9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	f023 0301 	bic.w	r3, r3, #1
 8004fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ff4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e3      	bne.n	8004fd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d118      	bne.n	8005042 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	e853 3f00 	ldrex	r3, [r3]
 800501c:	60bb      	str	r3, [r7, #8]
   return(result);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f023 0310 	bic.w	r3, r3, #16
 8005024:	647b      	str	r3, [r7, #68]	; 0x44
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	6979      	ldr	r1, [r7, #20]
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	613b      	str	r3, [r7, #16]
   return(result);
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e6      	bne.n	8005010 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005056:	bf00      	nop
 8005058:	3754      	adds	r7, #84	; 0x54
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_UARTEx_DisableFifoMode+0x16>
 8005074:	2302      	movs	r3, #2
 8005076:	e027      	b.n	80050c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2224      	movs	r2, #36	; 0x24
 8005084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0201 	bic.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e02d      	b.n	8005148 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2224      	movs	r2, #36	; 0x24
 80050f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0201 	bic.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f84f 	bl	80051cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005164:	2302      	movs	r3, #2
 8005166:	e02d      	b.n	80051c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2224      	movs	r2, #36	; 0x24
 8005174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f811 	bl	80051cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d108      	bne.n	80051ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80051ec:	e031      	b.n	8005252 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80051ee:	2308      	movs	r3, #8
 80051f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051f2:	2308      	movs	r3, #8
 80051f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	0e5b      	lsrs	r3, r3, #25
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	0f5b      	lsrs	r3, r3, #29
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005216:	7bbb      	ldrb	r3, [r7, #14]
 8005218:	7b3a      	ldrb	r2, [r7, #12]
 800521a:	4911      	ldr	r1, [pc, #68]	; (8005260 <UARTEx_SetNbDataToProcess+0x94>)
 800521c:	5c8a      	ldrb	r2, [r1, r2]
 800521e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005222:	7b3a      	ldrb	r2, [r7, #12]
 8005224:	490f      	ldr	r1, [pc, #60]	; (8005264 <UARTEx_SetNbDataToProcess+0x98>)
 8005226:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005228:	fb93 f3f2 	sdiv	r3, r3, r2
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	7b7a      	ldrb	r2, [r7, #13]
 8005238:	4909      	ldr	r1, [pc, #36]	; (8005260 <UARTEx_SetNbDataToProcess+0x94>)
 800523a:	5c8a      	ldrb	r2, [r1, r2]
 800523c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005240:	7b7a      	ldrb	r2, [r7, #13]
 8005242:	4908      	ldr	r1, [pc, #32]	; (8005264 <UARTEx_SetNbDataToProcess+0x98>)
 8005244:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005246:	fb93 f3f2 	sdiv	r3, r3, r2
 800524a:	b29a      	uxth	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	08007e94 	.word	0x08007e94
 8005264:	08007e9c 	.word	0x08007e9c

08005268 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005268:	b480      	push	{r7}
 800526a:	b08b      	sub	sp, #44	; 0x2c
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	fa93 f3a3 	rbit	r3, r3
 8005282:	613b      	str	r3, [r7, #16]
  return result;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800528e:	2320      	movs	r3, #32
 8005290:	e003      	b.n	800529a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	fab3 f383 	clz	r3, r3
 8005298:	b2db      	uxtb	r3, r3
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	2103      	movs	r1, #3
 800529e:	fa01 f303 	lsl.w	r3, r1, r3
 80052a2:	43db      	mvns	r3, r3
 80052a4:	401a      	ands	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	fa93 f3a3 	rbit	r3, r3
 80052b0:	61fb      	str	r3, [r7, #28]
  return result;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80052bc:	2320      	movs	r3, #32
 80052be:	e003      	b.n	80052c8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	fab3 f383 	clz	r3, r3
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	fa01 f303 	lsl.w	r3, r1, r3
 80052d0:	431a      	orrs	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	601a      	str	r2, [r3, #0]
}
 80052d6:	bf00      	nop
 80052d8:	372c      	adds	r7, #44	; 0x2c
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b085      	sub	sp, #20
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	43db      	mvns	r3, r3
 80052f6:	401a      	ands	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	fb01 f303 	mul.w	r3, r1, r3
 8005300:	431a      	orrs	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	605a      	str	r2, [r3, #4]
}
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005312:	b480      	push	{r7}
 8005314:	b08b      	sub	sp, #44	; 0x2c
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	fa93 f3a3 	rbit	r3, r3
 800532c:	613b      	str	r3, [r7, #16]
  return result;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005338:	2320      	movs	r3, #32
 800533a:	e003      	b.n	8005344 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	fab3 f383 	clz	r3, r3
 8005342:	b2db      	uxtb	r3, r3
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	2103      	movs	r1, #3
 8005348:	fa01 f303 	lsl.w	r3, r1, r3
 800534c:	43db      	mvns	r3, r3
 800534e:	401a      	ands	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	fa93 f3a3 	rbit	r3, r3
 800535a:	61fb      	str	r3, [r7, #28]
  return result;
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005366:	2320      	movs	r3, #32
 8005368:	e003      	b.n	8005372 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	fab3 f383 	clz	r3, r3
 8005370:	b2db      	uxtb	r3, r3
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	fa01 f303 	lsl.w	r3, r1, r3
 800537a:	431a      	orrs	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005380:	bf00      	nop
 8005382:	372c      	adds	r7, #44	; 0x2c
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800538c:	b480      	push	{r7}
 800538e:	b08b      	sub	sp, #44	; 0x2c
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	fa93 f3a3 	rbit	r3, r3
 80053a6:	613b      	str	r3, [r7, #16]
  return result;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80053b2:	2320      	movs	r3, #32
 80053b4:	e003      	b.n	80053be <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	fab3 f383 	clz	r3, r3
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	2103      	movs	r1, #3
 80053c2:	fa01 f303 	lsl.w	r3, r1, r3
 80053c6:	43db      	mvns	r3, r3
 80053c8:	401a      	ands	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	fa93 f3a3 	rbit	r3, r3
 80053d4:	61fb      	str	r3, [r7, #28]
  return result;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80053e0:	2320      	movs	r3, #32
 80053e2:	e003      	b.n	80053ec <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	fab3 f383 	clz	r3, r3
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	fa01 f303 	lsl.w	r3, r1, r3
 80053f4:	431a      	orrs	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	60da      	str	r2, [r3, #12]
}
 80053fa:	bf00      	nop
 80053fc:	372c      	adds	r7, #44	; 0x2c
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005406:	b480      	push	{r7}
 8005408:	b08b      	sub	sp, #44	; 0x2c
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a1a      	ldr	r2, [r3, #32]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	fa93 f3a3 	rbit	r3, r3
 8005420:	613b      	str	r3, [r7, #16]
  return result;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800542c:	2320      	movs	r3, #32
 800542e:	e003      	b.n	8005438 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	fab3 f383 	clz	r3, r3
 8005436:	b2db      	uxtb	r3, r3
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	210f      	movs	r1, #15
 800543c:	fa01 f303 	lsl.w	r3, r1, r3
 8005440:	43db      	mvns	r3, r3
 8005442:	401a      	ands	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	fa93 f3a3 	rbit	r3, r3
 800544e:	61fb      	str	r3, [r7, #28]
  return result;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800545a:	2320      	movs	r3, #32
 800545c:	e003      	b.n	8005466 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	fab3 f383 	clz	r3, r3
 8005464:	b2db      	uxtb	r3, r3
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	fa01 f303 	lsl.w	r3, r1, r3
 800546e:	431a      	orrs	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005474:	bf00      	nop
 8005476:	372c      	adds	r7, #44	; 0x2c
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005480:	b480      	push	{r7}
 8005482:	b08b      	sub	sp, #44	; 0x2c
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	fa93 f3a3 	rbit	r3, r3
 800549c:	613b      	str	r3, [r7, #16]
  return result;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80054a8:	2320      	movs	r3, #32
 80054aa:	e003      	b.n	80054b4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	fab3 f383 	clz	r3, r3
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	210f      	movs	r1, #15
 80054b8:	fa01 f303 	lsl.w	r3, r1, r3
 80054bc:	43db      	mvns	r3, r3
 80054be:	401a      	ands	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	fa93 f3a3 	rbit	r3, r3
 80054cc:	61fb      	str	r3, [r7, #28]
  return result;
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80054d8:	2320      	movs	r3, #32
 80054da:	e003      	b.n	80054e4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	fab3 f383 	clz	r3, r3
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ec:	431a      	orrs	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80054f2:	bf00      	nop
 80054f4:	372c      	adds	r7, #44	; 0x2c
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b088      	sub	sp, #32
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	fa93 f3a3 	rbit	r3, r3
 8005514:	60fb      	str	r3, [r7, #12]
  return result;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <LL_GPIO_Init+0x26>
    return 32U;
 8005520:	2320      	movs	r3, #32
 8005522:	e003      	b.n	800552c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	fab3 f383 	clz	r3, r3
 800552a:	b2db      	uxtb	r3, r3
 800552c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800552e:	e047      	b.n	80055c0 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	2101      	movs	r1, #1
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	fa01 f303 	lsl.w	r3, r1, r3
 800553c:	4013      	ands	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d039      	beq.n	80055ba <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d003      	beq.n	8005556 <LL_GPIO_Init+0x58>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d10d      	bne.n	8005572 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	461a      	mov	r2, r3
 800555c:	69b9      	ldr	r1, [r7, #24]
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff fed7 	bl	8005312 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	461a      	mov	r2, r3
 800556a:	69b9      	ldr	r1, [r7, #24]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff feb8 	bl	80052e2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	461a      	mov	r2, r3
 8005578:	69b9      	ldr	r1, [r7, #24]
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff ff06 	bl	800538c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d111      	bne.n	80055ac <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2bff      	cmp	r3, #255	; 0xff
 800558c:	d807      	bhi.n	800559e <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	461a      	mov	r2, r3
 8005594:	69b9      	ldr	r1, [r7, #24]
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff ff35 	bl	8005406 <LL_GPIO_SetAFPin_0_7>
 800559c:	e006      	b.n	80055ac <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	461a      	mov	r2, r3
 80055a4:	69b9      	ldr	r1, [r7, #24]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff ff6a 	bl	8005480 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	461a      	mov	r2, r3
 80055b2:	69b9      	ldr	r1, [r7, #24]
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff fe57 	bl	8005268 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	3301      	adds	r3, #1
 80055be:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1b0      	bne.n	8005530 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3720      	adds	r7, #32
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055e0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80055e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	43db      	mvns	r3, r3
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	4013      	ands	r3, r2
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800560e:	b480      	push	{r7}
 8005610:	b085      	sub	sp, #20
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	1d3b      	adds	r3, r7, #4
 8005618:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <__NVIC_SetPriority>:
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	6039      	str	r1, [r7, #0]
 8005656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565c:	2b00      	cmp	r3, #0
 800565e:	db0a      	blt.n	8005676 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	b2da      	uxtb	r2, r3
 8005664:	490c      	ldr	r1, [pc, #48]	; (8005698 <__NVIC_SetPriority+0x4c>)
 8005666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566a:	0152      	lsls	r2, r2, #5
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	440b      	add	r3, r1
 8005670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005674:	e00a      	b.n	800568c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	4908      	ldr	r1, [pc, #32]	; (800569c <__NVIC_SetPriority+0x50>)
 800567c:	79fb      	ldrb	r3, [r7, #7]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	3b04      	subs	r3, #4
 8005684:	0152      	lsls	r2, r2, #5
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	440b      	add	r3, r1
 800568a:	761a      	strb	r2, [r3, #24]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	e000e100 	.word	0xe000e100
 800569c:	e000ed00 	.word	0xe000ed00

080056a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80056a4:	4b05      	ldr	r3, [pc, #20]	; (80056bc <SysTick_Handler+0x1c>)
 80056a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80056a8:	f001 fb9e 	bl	8006de8 <xTaskGetSchedulerState>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d001      	beq.n	80056b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80056b2:	f001 fff3 	bl	800769c <xPortSysTickHandler>
  }
}
 80056b6:	bf00      	nop
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	e000e010 	.word	0xe000e010

080056c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80056c4:	2100      	movs	r1, #0
 80056c6:	f06f 0004 	mvn.w	r0, #4
 80056ca:	f7ff ffbf 	bl	800564c <__NVIC_SetPriority>
#endif
}
 80056ce:	bf00      	nop
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056da:	f3ef 8305 	mrs	r3, IPSR
 80056de:	603b      	str	r3, [r7, #0]
  return(result);
 80056e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80056e6:	f06f 0305 	mvn.w	r3, #5
 80056ea:	607b      	str	r3, [r7, #4]
 80056ec:	e00c      	b.n	8005708 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80056ee:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <osKernelInitialize+0x44>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d105      	bne.n	8005702 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80056f6:	4b08      	ldr	r3, [pc, #32]	; (8005718 <osKernelInitialize+0x44>)
 80056f8:	2201      	movs	r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	607b      	str	r3, [r7, #4]
 8005700:	e002      	b.n	8005708 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005702:	f04f 33ff 	mov.w	r3, #4294967295
 8005706:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005708:	687b      	ldr	r3, [r7, #4]
}
 800570a:	4618      	mov	r0, r3
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	2000043c 	.word	0x2000043c

0800571c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005722:	f3ef 8305 	mrs	r3, IPSR
 8005726:	603b      	str	r3, [r7, #0]
  return(result);
 8005728:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <osKernelStart+0x1a>
    stat = osErrorISR;
 800572e:	f06f 0305 	mvn.w	r3, #5
 8005732:	607b      	str	r3, [r7, #4]
 8005734:	e010      	b.n	8005758 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <osKernelStart+0x48>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d109      	bne.n	8005752 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800573e:	f7ff ffbf 	bl	80056c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005742:	4b08      	ldr	r3, [pc, #32]	; (8005764 <osKernelStart+0x48>)
 8005744:	2202      	movs	r2, #2
 8005746:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005748:	f000 ff70 	bl	800662c <vTaskStartScheduler>
      stat = osOK;
 800574c:	2300      	movs	r3, #0
 800574e:	607b      	str	r3, [r7, #4]
 8005750:	e002      	b.n	8005758 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005752:	f04f 33ff 	mov.w	r3, #4294967295
 8005756:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005758:	687b      	ldr	r3, [r7, #4]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	2000043c 	.word	0x2000043c

08005768 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b08e      	sub	sp, #56	; 0x38
 800576c:	af04      	add	r7, sp, #16
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005774:	2300      	movs	r3, #0
 8005776:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005778:	f3ef 8305 	mrs	r3, IPSR
 800577c:	617b      	str	r3, [r7, #20]
  return(result);
 800577e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005780:	2b00      	cmp	r3, #0
 8005782:	d17e      	bne.n	8005882 <osThreadNew+0x11a>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d07b      	beq.n	8005882 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800578a:	2380      	movs	r3, #128	; 0x80
 800578c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800578e:	2318      	movs	r3, #24
 8005790:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005796:	f04f 33ff 	mov.w	r3, #4294967295
 800579a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d045      	beq.n	800582e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <osThreadNew+0x48>
        name = attr->name;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <osThreadNew+0x6e>
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	2b38      	cmp	r3, #56	; 0x38
 80057c8:	d805      	bhi.n	80057d6 <osThreadNew+0x6e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <osThreadNew+0x72>
        return (NULL);
 80057d6:	2300      	movs	r3, #0
 80057d8:	e054      	b.n	8005884 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	089b      	lsrs	r3, r3, #2
 80057e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00e      	beq.n	8005810 <osThreadNew+0xa8>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	2b5b      	cmp	r3, #91	; 0x5b
 80057f8:	d90a      	bls.n	8005810 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d006      	beq.n	8005810 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <osThreadNew+0xa8>
        mem = 1;
 800580a:	2301      	movs	r3, #1
 800580c:	61bb      	str	r3, [r7, #24]
 800580e:	e010      	b.n	8005832 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10c      	bne.n	8005832 <osThreadNew+0xca>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d108      	bne.n	8005832 <osThreadNew+0xca>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d104      	bne.n	8005832 <osThreadNew+0xca>
          mem = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	e001      	b.n	8005832 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d110      	bne.n	800585a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005840:	9202      	str	r2, [sp, #8]
 8005842:	9301      	str	r3, [sp, #4]
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	6a3a      	ldr	r2, [r7, #32]
 800584c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 fd4c 	bl	80062ec <xTaskCreateStatic>
 8005854:	4603      	mov	r3, r0
 8005856:	613b      	str	r3, [r7, #16]
 8005858:	e013      	b.n	8005882 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d110      	bne.n	8005882 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	b29a      	uxth	r2, r3
 8005864:	f107 0310 	add.w	r3, r7, #16
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 fd7f 	bl	8006376 <xTaskCreate>
 8005878:	4603      	mov	r3, r0
 800587a:	2b01      	cmp	r3, #1
 800587c:	d001      	beq.n	8005882 <osThreadNew+0x11a>
            hTask = NULL;
 800587e:	2300      	movs	r3, #0
 8005880:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005882:	693b      	ldr	r3, [r7, #16]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3728      	adds	r7, #40	; 0x28
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005894:	f3ef 8305 	mrs	r3, IPSR
 8005898:	60bb      	str	r3, [r7, #8]
  return(result);
 800589a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <osDelay+0x1c>
    stat = osErrorISR;
 80058a0:	f06f 0305 	mvn.w	r3, #5
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	e007      	b.n	80058b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fe96 	bl	80065e4 <vTaskDelay>
    }
  }

  return (stat);
 80058b8:	68fb      	ldr	r3, [r7, #12]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4a07      	ldr	r2, [pc, #28]	; (80058f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80058d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4a06      	ldr	r2, [pc, #24]	; (80058f4 <vApplicationGetIdleTaskMemory+0x30>)
 80058da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2280      	movs	r2, #128	; 0x80
 80058e0:	601a      	str	r2, [r3, #0]
}
 80058e2:	bf00      	nop
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	20000440 	.word	0x20000440
 80058f4:	2000049c 	.word	0x2000049c

080058f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4a07      	ldr	r2, [pc, #28]	; (8005924 <vApplicationGetTimerTaskMemory+0x2c>)
 8005908:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4a06      	ldr	r2, [pc, #24]	; (8005928 <vApplicationGetTimerTaskMemory+0x30>)
 800590e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005916:	601a      	str	r2, [r3, #0]
}
 8005918:	bf00      	nop
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	2000069c 	.word	0x2000069c
 8005928:	200006f8 	.word	0x200006f8

0800592c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f103 0208 	add.w	r2, r3, #8
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f04f 32ff 	mov.w	r2, #4294967295
 8005944:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f103 0208 	add.w	r2, r3, #8
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f103 0208 	add.w	r2, r3, #8
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	601a      	str	r2, [r3, #0]
}
 80059c2:	bf00      	nop
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059ce:	b480      	push	{r7}
 80059d0:	b085      	sub	sp, #20
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e4:	d103      	bne.n	80059ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	e00c      	b.n	8005a08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3308      	adds	r3, #8
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	e002      	b.n	80059fc <vListInsert+0x2e>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d2f6      	bcs.n	80059f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	601a      	str	r2, [r3, #0]
}
 8005a34:	bf00      	nop
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6892      	ldr	r2, [r2, #8]
 8005a56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6852      	ldr	r2, [r2, #4]
 8005a60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d103      	bne.n	8005a74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	1e5a      	subs	r2, r3, #1
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d102      	bne.n	8005aae <xQueueGenericReset+0x1a>
 8005aa8:	f001 fefe 	bl	80078a8 <ulSetInterruptMask>
 8005aac:	e7fe      	b.n	8005aac <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8005aae:	f001 fdc9 	bl	8007644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aba:	68f9      	ldr	r1, [r7, #12]
 8005abc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005abe:	fb01 f303 	mul.w	r3, r1, r3
 8005ac2:	441a      	add	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	68f9      	ldr	r1, [r7, #12]
 8005ae2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ae4:	fb01 f303 	mul.w	r3, r1, r3
 8005ae8:	441a      	add	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	22ff      	movs	r2, #255	; 0xff
 8005af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	22ff      	movs	r2, #255	; 0xff
 8005afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10e      	bne.n	8005b22 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d014      	beq.n	8005b36 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3310      	adds	r3, #16
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 ffd3 	bl	8006abc <xTaskRemoveFromEventList>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00c      	beq.n	8005b36 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b1c:	f001 fd80 	bl	8007620 <vPortYield>
 8005b20:	e009      	b.n	8005b36 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3310      	adds	r3, #16
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff ff00 	bl	800592c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3324      	adds	r3, #36	; 0x24
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff fefb 	bl	800592c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b36:	f001 fd97 	bl	8007668 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b3a:	2301      	movs	r3, #1
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <xQueueGenericCreateStatic+0x1a>
 8005b58:	f001 fea6 	bl	80078a8 <ulSetInterruptMask>
 8005b5c:	e7fe      	b.n	8005b5c <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d102      	bne.n	8005b6a <xQueueGenericCreateStatic+0x26>
 8005b64:	f001 fea0 	bl	80078a8 <ulSetInterruptMask>
 8005b68:	e7fe      	b.n	8005b68 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <xQueueGenericCreateStatic+0x32>
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <xQueueGenericCreateStatic+0x36>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <xQueueGenericCreateStatic+0x38>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d102      	bne.n	8005b86 <xQueueGenericCreateStatic+0x42>
 8005b80:	f001 fe92 	bl	80078a8 <ulSetInterruptMask>
 8005b84:	e7fe      	b.n	8005b84 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <xQueueGenericCreateStatic+0x4e>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <xQueueGenericCreateStatic+0x52>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <xQueueGenericCreateStatic+0x54>
 8005b96:	2300      	movs	r3, #0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d102      	bne.n	8005ba2 <xQueueGenericCreateStatic+0x5e>
 8005b9c:	f001 fe84 	bl	80078a8 <ulSetInterruptMask>
 8005ba0:	e7fe      	b.n	8005ba0 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ba2:	2350      	movs	r3, #80	; 0x50
 8005ba4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b50      	cmp	r3, #80	; 0x50
 8005baa:	d002      	beq.n	8005bb2 <xQueueGenericCreateStatic+0x6e>
 8005bac:	f001 fe7c 	bl	80078a8 <ulSetInterruptMask>
 8005bb0:	e7fe      	b.n	8005bb0 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005bb2:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00d      	beq.n	8005bda <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bc6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f805 	bl	8005be4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bda:	697b      	ldr	r3, [r7, #20]
	}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d103      	bne.n	8005c00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e002      	b.n	8005c06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c12:	2101      	movs	r1, #1
 8005c14:	69b8      	ldr	r0, [r7, #24]
 8005c16:	f7ff ff3d 	bl	8005a94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c22:	bf00      	nop
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b08a      	sub	sp, #40	; 0x28
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d102      	bne.n	8005c4c <xQueueGenericSend+0x22>
 8005c46:	f001 fe2f 	bl	80078a8 <ulSetInterruptMask>
 8005c4a:	e7fe      	b.n	8005c4a <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d103      	bne.n	8005c5a <xQueueGenericSend+0x30>
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <xQueueGenericSend+0x34>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <xQueueGenericSend+0x36>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d102      	bne.n	8005c6a <xQueueGenericSend+0x40>
 8005c64:	f001 fe20 	bl	80078a8 <ulSetInterruptMask>
 8005c68:	e7fe      	b.n	8005c68 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d103      	bne.n	8005c78 <xQueueGenericSend+0x4e>
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <xQueueGenericSend+0x52>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <xQueueGenericSend+0x54>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d102      	bne.n	8005c88 <xQueueGenericSend+0x5e>
 8005c82:	f001 fe11 	bl	80078a8 <ulSetInterruptMask>
 8005c86:	e7fe      	b.n	8005c86 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c88:	f001 f8ae 	bl	8006de8 <xTaskGetSchedulerState>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d102      	bne.n	8005c98 <xQueueGenericSend+0x6e>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <xQueueGenericSend+0x72>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <xQueueGenericSend+0x74>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d102      	bne.n	8005ca8 <xQueueGenericSend+0x7e>
 8005ca2:	f001 fe01 	bl	80078a8 <ulSetInterruptMask>
 8005ca6:	e7fe      	b.n	8005ca6 <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ca8:	f001 fccc 	bl	8007644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d302      	bcc.n	8005cbe <xQueueGenericSend+0x94>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d11d      	bne.n	8005cfa <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	6a38      	ldr	r0, [r7, #32]
 8005cc4:	f000 f9a4 	bl	8006010 <prvCopyDataToQueue>
 8005cc8:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	3324      	adds	r3, #36	; 0x24
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fef0 	bl	8006abc <xTaskRemoveFromEventList>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ce2:	f001 fc9d 	bl	8007620 <vPortYield>
 8005ce6:	e004      	b.n	8005cf2 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005cee:	f001 fc97 	bl	8007620 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005cf2:	f001 fcb9 	bl	8007668 <vPortExitCritical>
				return pdPASS;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e05c      	b.n	8005db4 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d103      	bne.n	8005d08 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d00:	f001 fcb2 	bl	8007668 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e055      	b.n	8005db4 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d0e:	f107 0314 	add.w	r3, r7, #20
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 ff2e 	bl	8006b74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d1c:	f001 fca4 	bl	8007668 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d20:	f000 fcda 	bl	80066d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d24:	f001 fc8e 	bl	8007644 <vPortEnterCritical>
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d2e:	b25b      	sxtb	r3, r3
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d103      	bne.n	8005d3e <xQueueGenericSend+0x114>
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d44:	b25b      	sxtb	r3, r3
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d103      	bne.n	8005d54 <xQueueGenericSend+0x12a>
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d54:	f001 fc88 	bl	8007668 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d58:	1d3a      	adds	r2, r7, #4
 8005d5a:	f107 0314 	add.w	r3, r7, #20
 8005d5e:	4611      	mov	r1, r2
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 ff1d 	bl	8006ba0 <xTaskCheckForTimeOut>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d11d      	bne.n	8005da8 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d6c:	6a38      	ldr	r0, [r7, #32]
 8005d6e:	f000 fa47 	bl	8006200 <prvIsQueueFull>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d011      	beq.n	8005d9c <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	3310      	adds	r3, #16
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fe5b 	bl	8006a3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d86:	6a38      	ldr	r0, [r7, #32]
 8005d88:	f000 f9d2 	bl	8006130 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d8c:	f000 fcb2 	bl	80066f4 <xTaskResumeAll>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d188      	bne.n	8005ca8 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 8005d96:	f001 fc43 	bl	8007620 <vPortYield>
 8005d9a:	e785      	b.n	8005ca8 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d9c:	6a38      	ldr	r0, [r7, #32]
 8005d9e:	f000 f9c7 	bl	8006130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005da2:	f000 fca7 	bl	80066f4 <xTaskResumeAll>
 8005da6:	e77f      	b.n	8005ca8 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005da8:	6a38      	ldr	r0, [r7, #32]
 8005daa:	f000 f9c1 	bl	8006130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dae:	f000 fca1 	bl	80066f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005db2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3728      	adds	r7, #40	; 0x28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08a      	sub	sp, #40	; 0x28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d102      	bne.n	8005dda <xQueueGenericSendFromISR+0x1e>
 8005dd4:	f001 fd68 	bl	80078a8 <ulSetInterruptMask>
 8005dd8:	e7fe      	b.n	8005dd8 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d103      	bne.n	8005de8 <xQueueGenericSendFromISR+0x2c>
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <xQueueGenericSendFromISR+0x30>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <xQueueGenericSendFromISR+0x32>
 8005dec:	2300      	movs	r3, #0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d102      	bne.n	8005df8 <xQueueGenericSendFromISR+0x3c>
 8005df2:	f001 fd59 	bl	80078a8 <ulSetInterruptMask>
 8005df6:	e7fe      	b.n	8005df6 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d103      	bne.n	8005e06 <xQueueGenericSendFromISR+0x4a>
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <xQueueGenericSendFromISR+0x4e>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <xQueueGenericSendFromISR+0x50>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <xQueueGenericSendFromISR+0x5a>
 8005e10:	f001 fd4a 	bl	80078a8 <ulSetInterruptMask>
 8005e14:	e7fe      	b.n	8005e14 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e16:	f001 fd47 	bl	80078a8 <ulSetInterruptMask>
 8005e1a:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d302      	bcc.n	8005e2e <xQueueGenericSendFromISR+0x72>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d12d      	bne.n	8005e8a <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e34:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	6a38      	ldr	r0, [r7, #32]
 8005e42:	f000 f8e5 	bl	8006010 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4e:	d112      	bne.n	8005e76 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d015      	beq.n	8005e84 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	3324      	adds	r3, #36	; 0x24
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fe2d 	bl	8006abc <xTaskRemoveFromEventList>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00d      	beq.n	8005e84 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	e006      	b.n	8005e84 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e76:	7efb      	ldrb	r3, [r7, #27]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	b25a      	sxtb	r2, r3
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e84:	2301      	movs	r3, #1
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8005e88:	e001      	b.n	8005e8e <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005e8e:	69f8      	ldr	r0, [r7, #28]
 8005e90:	f001 fd17 	bl	80078c2 <vClearInterruptMask>

	return xReturn;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3728      	adds	r7, #40	; 0x28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b08a      	sub	sp, #40	; 0x28
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d102      	bne.n	8005ebe <xQueueReceive+0x20>
 8005eb8:	f001 fcf6 	bl	80078a8 <ulSetInterruptMask>
 8005ebc:	e7fe      	b.n	8005ebc <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d103      	bne.n	8005ecc <xQueueReceive+0x2e>
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <xQueueReceive+0x32>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <xQueueReceive+0x34>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d102      	bne.n	8005edc <xQueueReceive+0x3e>
 8005ed6:	f001 fce7 	bl	80078a8 <ulSetInterruptMask>
 8005eda:	e7fe      	b.n	8005eda <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005edc:	f000 ff84 	bl	8006de8 <xTaskGetSchedulerState>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d102      	bne.n	8005eec <xQueueReceive+0x4e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <xQueueReceive+0x52>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e000      	b.n	8005ef2 <xQueueReceive+0x54>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d102      	bne.n	8005efc <xQueueReceive+0x5e>
 8005ef6:	f001 fcd7 	bl	80078a8 <ulSetInterruptMask>
 8005efa:	e7fe      	b.n	8005efa <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005efc:	f001 fba2 	bl	8007644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d019      	beq.n	8005f40 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	6a38      	ldr	r0, [r7, #32]
 8005f10:	f000 f8e8 	bl	80060e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	1e5a      	subs	r2, r3, #1
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d009      	beq.n	8005f38 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	3310      	adds	r3, #16
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fdc7 	bl	8006abc <xTaskRemoveFromEventList>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f34:	f001 fb74 	bl	8007620 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f38:	f001 fb96 	bl	8007668 <vPortExitCritical>
				return pdPASS;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e063      	b.n	8006008 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f46:	f001 fb8f 	bl	8007668 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e05c      	b.n	8006008 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d106      	bne.n	8005f62 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f54:	f107 0314 	add.w	r3, r7, #20
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fe0b 	bl	8006b74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f62:	f001 fb81 	bl	8007668 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f66:	f000 fbb7 	bl	80066d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f6a:	f001 fb6b 	bl	8007644 <vPortEnterCritical>
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f74:	b25b      	sxtb	r3, r3
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d103      	bne.n	8005f84 <xQueueReceive+0xe6>
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f8a:	b25b      	sxtb	r3, r3
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d103      	bne.n	8005f9a <xQueueReceive+0xfc>
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f9a:	f001 fb65 	bl	8007668 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f9e:	1d3a      	adds	r2, r7, #4
 8005fa0:	f107 0314 	add.w	r3, r7, #20
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fdfa 	bl	8006ba0 <xTaskCheckForTimeOut>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d11d      	bne.n	8005fee <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fb2:	6a38      	ldr	r0, [r7, #32]
 8005fb4:	f000 f90e 	bl	80061d4 <prvIsQueueEmpty>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d011      	beq.n	8005fe2 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	3324      	adds	r3, #36	; 0x24
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fd38 	bl	8006a3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fcc:	6a38      	ldr	r0, [r7, #32]
 8005fce:	f000 f8af 	bl	8006130 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fd2:	f000 fb8f 	bl	80066f4 <xTaskResumeAll>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d18f      	bne.n	8005efc <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 8005fdc:	f001 fb20 	bl	8007620 <vPortYield>
 8005fe0:	e78c      	b.n	8005efc <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fe2:	6a38      	ldr	r0, [r7, #32]
 8005fe4:	f000 f8a4 	bl	8006130 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fe8:	f000 fb84 	bl	80066f4 <xTaskResumeAll>
 8005fec:	e786      	b.n	8005efc <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fee:	6a38      	ldr	r0, [r7, #32]
 8005ff0:	f000 f89e 	bl	8006130 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ff4:	f000 fb7e 	bl	80066f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ff8:	6a38      	ldr	r0, [r7, #32]
 8005ffa:	f000 f8eb 	bl	80061d4 <prvIsQueueEmpty>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	f43f af7b 	beq.w	8005efc <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006006:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006008:	4618      	mov	r0, r3
 800600a:	3728      	adds	r7, #40	; 0x28
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800601c:	2300      	movs	r3, #0
 800601e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10d      	bne.n	800604a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d14d      	bne.n	80060d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fef2 	bl	8006e24 <xTaskPriorityDisinherit>
 8006040:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	609a      	str	r2, [r3, #8]
 8006048:	e043      	b.n	80060d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d119      	bne.n	8006084 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6858      	ldr	r0, [r3, #4]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	461a      	mov	r2, r3
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	f001 fe6a 	bl	8007d34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	441a      	add	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	429a      	cmp	r2, r3
 8006078:	d32b      	bcc.n	80060d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	605a      	str	r2, [r3, #4]
 8006082:	e026      	b.n	80060d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	68d8      	ldr	r0, [r3, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	461a      	mov	r2, r3
 800608e:	68b9      	ldr	r1, [r7, #8]
 8006090:	f001 fe50 	bl	8007d34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609c:	425b      	negs	r3, r3
 800609e:	441a      	add	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d207      	bcs.n	80060c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	425b      	negs	r3, r3
 80060ba:	441a      	add	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d105      	bne.n	80060d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060da:	697b      	ldr	r3, [r7, #20]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d018      	beq.n	8006128 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fe:	441a      	add	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	429a      	cmp	r2, r3
 800610e:	d303      	bcc.n	8006118 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68d9      	ldr	r1, [r3, #12]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	461a      	mov	r2, r3
 8006122:	6838      	ldr	r0, [r7, #0]
 8006124:	f001 fe06 	bl	8007d34 <memcpy>
	}
}
 8006128:	bf00      	nop
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006138:	f001 fa84 	bl	8007644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006142:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006144:	e011      	b.n	800616a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	2b00      	cmp	r3, #0
 800614c:	d012      	beq.n	8006174 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3324      	adds	r3, #36	; 0x24
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fcb2 	bl	8006abc <xTaskRemoveFromEventList>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800615e:	f000 fd71 	bl	8006c44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	3b01      	subs	r3, #1
 8006166:	b2db      	uxtb	r3, r3
 8006168:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800616a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800616e:	2b00      	cmp	r3, #0
 8006170:	dce9      	bgt.n	8006146 <prvUnlockQueue+0x16>
 8006172:	e000      	b.n	8006176 <prvUnlockQueue+0x46>
					break;
 8006174:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	22ff      	movs	r2, #255	; 0xff
 800617a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800617e:	f001 fa73 	bl	8007668 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006182:	f001 fa5f 	bl	8007644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800618c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800618e:	e011      	b.n	80061b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d012      	beq.n	80061be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3310      	adds	r3, #16
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fc8d 	bl	8006abc <xTaskRemoveFromEventList>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061a8:	f000 fd4c 	bl	8006c44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	dce9      	bgt.n	8006190 <prvUnlockQueue+0x60>
 80061bc:	e000      	b.n	80061c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	22ff      	movs	r2, #255	; 0xff
 80061c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061c8:	f001 fa4e 	bl	8007668 <vPortExitCritical>
}
 80061cc:	bf00      	nop
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061dc:	f001 fa32 	bl	8007644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d102      	bne.n	80061ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061e8:	2301      	movs	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	e001      	b.n	80061f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061f2:	f001 fa39 	bl	8007668 <vPortExitCritical>

	return xReturn;
 80061f6:	68fb      	ldr	r3, [r7, #12]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006208:	f001 fa1c 	bl	8007644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006214:	429a      	cmp	r2, r3
 8006216:	d102      	bne.n	800621e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006218:	2301      	movs	r3, #1
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	e001      	b.n	8006222 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006222:	f001 fa21 	bl	8007668 <vPortExitCritical>

	return xReturn;
 8006226:	68fb      	ldr	r3, [r7, #12]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	e014      	b.n	800626a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006240:	4a0f      	ldr	r2, [pc, #60]	; (8006280 <vQueueAddToRegistry+0x50>)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10b      	bne.n	8006264 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800624c:	490c      	ldr	r1, [pc, #48]	; (8006280 <vQueueAddToRegistry+0x50>)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006256:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <vQueueAddToRegistry+0x50>)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	4413      	add	r3, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006262:	e006      	b.n	8006272 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3301      	adds	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b07      	cmp	r3, #7
 800626e:	d9e7      	bls.n	8006240 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006270:	bf00      	nop
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20000af8 	.word	0x20000af8

08006284 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006294:	f001 f9d6 	bl	8007644 <vPortEnterCritical>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800629e:	b25b      	sxtb	r3, r3
 80062a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a4:	d103      	bne.n	80062ae <vQueueWaitForMessageRestricted+0x2a>
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062b4:	b25b      	sxtb	r3, r3
 80062b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ba:	d103      	bne.n	80062c4 <vQueueWaitForMessageRestricted+0x40>
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062c4:	f001 f9d0 	bl	8007668 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	3324      	adds	r3, #36	; 0x24
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	68b9      	ldr	r1, [r7, #8]
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 fbcb 	bl	8006a74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062de:	6978      	ldr	r0, [r7, #20]
 80062e0:	f7ff ff26 	bl	8006130 <prvUnlockQueue>
	}
 80062e4:	bf00      	nop
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08c      	sub	sp, #48	; 0x30
 80062f0:	af04      	add	r7, sp, #16
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <xTaskCreateStatic+0x1a>
 8006300:	f001 fad2 	bl	80078a8 <ulSetInterruptMask>
 8006304:	e7fe      	b.n	8006304 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	2b00      	cmp	r3, #0
 800630a:	d102      	bne.n	8006312 <xTaskCreateStatic+0x26>
 800630c:	f001 facc 	bl	80078a8 <ulSetInterruptMask>
 8006310:	e7fe      	b.n	8006310 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006312:	235c      	movs	r3, #92	; 0x5c
 8006314:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b5c      	cmp	r3, #92	; 0x5c
 800631a:	d002      	beq.n	8006322 <xTaskCreateStatic+0x36>
 800631c:	f001 fac4 	bl	80078a8 <ulSetInterruptMask>
 8006320:	e7fe      	b.n	8006320 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006322:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	2b00      	cmp	r3, #0
 8006328:	d01e      	beq.n	8006368 <xTaskCreateStatic+0x7c>
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01b      	beq.n	8006368 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006338:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	2202      	movs	r2, #2
 800633e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006342:	2300      	movs	r3, #0
 8006344:	9303      	str	r3, [sp, #12]
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	9302      	str	r3, [sp, #8]
 800634a:	f107 0318 	add.w	r3, r7, #24
 800634e:	9301      	str	r3, [sp, #4]
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f850 	bl	8006400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006360:	69f8      	ldr	r0, [r7, #28]
 8006362:	f000 f8d7 	bl	8006514 <prvAddNewTaskToReadyList>
 8006366:	e001      	b.n	800636c <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 8006368:	2300      	movs	r3, #0
 800636a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800636c:	69bb      	ldr	r3, [r7, #24]
	}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006376:	b580      	push	{r7, lr}
 8006378:	b08c      	sub	sp, #48	; 0x30
 800637a:	af04      	add	r7, sp, #16
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	603b      	str	r3, [r7, #0]
 8006382:	4613      	mov	r3, r2
 8006384:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4618      	mov	r0, r3
 800638c:	f001 faec 	bl	8007968 <pvPortMalloc>
 8006390:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00e      	beq.n	80063b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006398:	205c      	movs	r0, #92	; 0x5c
 800639a:	f001 fae5 	bl	8007968 <pvPortMalloc>
 800639e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	631a      	str	r2, [r3, #48]	; 0x30
 80063ac:	e005      	b.n	80063ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063ae:	6978      	ldr	r0, [r7, #20]
 80063b0:	f001 fb8e 	bl	8007ad0 <vPortFree>
 80063b4:	e001      	b.n	80063ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d017      	beq.n	80063f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063c8:	88fa      	ldrh	r2, [r7, #6]
 80063ca:	2300      	movs	r3, #0
 80063cc:	9303      	str	r3, [sp, #12]
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	9302      	str	r3, [sp, #8]
 80063d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d4:	9301      	str	r3, [sp, #4]
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 f80e 	bl	8006400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063e4:	69f8      	ldr	r0, [r7, #28]
 80063e6:	f000 f895 	bl	8006514 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063ea:	2301      	movs	r3, #1
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	e002      	b.n	80063f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063f0:	f04f 33ff 	mov.w	r3, #4294967295
 80063f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063f6:	69bb      	ldr	r3, [r7, #24]
	}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3720      	adds	r7, #32
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	461a      	mov	r2, r3
 8006418:	21a5      	movs	r1, #165	; 0xa5
 800641a:	f001 fc98 	bl	8007d4e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006428:	3b01      	subs	r3, #1
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f023 0307 	bic.w	r3, r3, #7
 8006436:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <prvInitialiseNewTask+0x48>
 8006442:	f001 fa31 	bl	80078a8 <ulSetInterruptMask>
 8006446:	e7fe      	b.n	8006446 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d01f      	beq.n	800648e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	e012      	b.n	800647a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	4413      	add	r3, r2
 800645a:	7819      	ldrb	r1, [r3, #0]
 800645c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	4413      	add	r3, r2
 8006462:	3334      	adds	r3, #52	; 0x34
 8006464:	460a      	mov	r2, r1
 8006466:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	4413      	add	r3, r2
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d006      	beq.n	8006482 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	3301      	adds	r3, #1
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b0f      	cmp	r3, #15
 800647e:	d9e9      	bls.n	8006454 <prvInitialiseNewTask+0x54>
 8006480:	e000      	b.n	8006484 <prvInitialiseNewTask+0x84>
			{
				break;
 8006482:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800648c:	e003      	b.n	8006496 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	2b37      	cmp	r3, #55	; 0x37
 800649a:	d901      	bls.n	80064a0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800649c:	2337      	movs	r3, #55	; 0x37
 800649e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	6a3a      	ldr	r2, [r7, #32]
 80064a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	6a3a      	ldr	r2, [r7, #32]
 80064aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	2200      	movs	r2, #0
 80064b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	3304      	adds	r3, #4
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff fa58 	bl	800596c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	3318      	adds	r3, #24
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff fa53 	bl	800596c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	2200      	movs	r2, #0
 80064e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	6938      	ldr	r0, [r7, #16]
 80064f4:	f001 f902 	bl	80076fc <pxPortInitialiseStack>
 80064f8:	4602      	mov	r2, r0
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006508:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800650a:	bf00      	nop
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800651c:	f001 f892 	bl	8007644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006520:	4b2a      	ldr	r3, [pc, #168]	; (80065cc <prvAddNewTaskToReadyList+0xb8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3301      	adds	r3, #1
 8006526:	4a29      	ldr	r2, [pc, #164]	; (80065cc <prvAddNewTaskToReadyList+0xb8>)
 8006528:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800652a:	4b29      	ldr	r3, [pc, #164]	; (80065d0 <prvAddNewTaskToReadyList+0xbc>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006532:	4a27      	ldr	r2, [pc, #156]	; (80065d0 <prvAddNewTaskToReadyList+0xbc>)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006538:	4b24      	ldr	r3, [pc, #144]	; (80065cc <prvAddNewTaskToReadyList+0xb8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d110      	bne.n	8006562 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006540:	f000 fb9c 	bl	8006c7c <prvInitialiseTaskLists>
 8006544:	e00d      	b.n	8006562 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006546:	4b23      	ldr	r3, [pc, #140]	; (80065d4 <prvAddNewTaskToReadyList+0xc0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800654e:	4b20      	ldr	r3, [pc, #128]	; (80065d0 <prvAddNewTaskToReadyList+0xbc>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	429a      	cmp	r2, r3
 800655a:	d802      	bhi.n	8006562 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800655c:	4a1c      	ldr	r2, [pc, #112]	; (80065d0 <prvAddNewTaskToReadyList+0xbc>)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006562:	4b1d      	ldr	r3, [pc, #116]	; (80065d8 <prvAddNewTaskToReadyList+0xc4>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3301      	adds	r3, #1
 8006568:	4a1b      	ldr	r2, [pc, #108]	; (80065d8 <prvAddNewTaskToReadyList+0xc4>)
 800656a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800656c:	4b1a      	ldr	r3, [pc, #104]	; (80065d8 <prvAddNewTaskToReadyList+0xc4>)
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006578:	4b18      	ldr	r3, [pc, #96]	; (80065dc <prvAddNewTaskToReadyList+0xc8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	429a      	cmp	r2, r3
 800657e:	d903      	bls.n	8006588 <prvAddNewTaskToReadyList+0x74>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	4a15      	ldr	r2, [pc, #84]	; (80065dc <prvAddNewTaskToReadyList+0xc8>)
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4a12      	ldr	r2, [pc, #72]	; (80065e0 <prvAddNewTaskToReadyList+0xcc>)
 8006596:	441a      	add	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3304      	adds	r3, #4
 800659c:	4619      	mov	r1, r3
 800659e:	4610      	mov	r0, r2
 80065a0:	f7ff f9f1 	bl	8005986 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80065a4:	f001 f860 	bl	8007668 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065a8:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <prvAddNewTaskToReadyList+0xc0>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d008      	beq.n	80065c2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <prvAddNewTaskToReadyList+0xbc>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d201      	bcs.n	80065c2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065be:	f001 f82f 	bl	8007620 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	2000100c 	.word	0x2000100c
 80065d0:	20000b38 	.word	0x20000b38
 80065d4:	20001018 	.word	0x20001018
 80065d8:	20001028 	.word	0x20001028
 80065dc:	20001014 	.word	0x20001014
 80065e0:	20000b3c 	.word	0x20000b3c

080065e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00f      	beq.n	8006616 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065f6:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <vTaskDelay+0x44>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <vTaskDelay+0x20>
 80065fe:	f001 f953 	bl	80078a8 <ulSetInterruptMask>
 8006602:	e7fe      	b.n	8006602 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8006604:	f000 f868 	bl	80066d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006608:	2100      	movs	r1, #0
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fc68 	bl	8006ee0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006610:	f000 f870 	bl	80066f4 <xTaskResumeAll>
 8006614:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 800661c:	f001 f800 	bl	8007620 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	20001034 	.word	0x20001034

0800662c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006636:	2300      	movs	r3, #0
 8006638:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800663a:	463a      	mov	r2, r7
 800663c:	1d39      	adds	r1, r7, #4
 800663e:	f107 0308 	add.w	r3, r7, #8
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff f93e 	bl	80058c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	9202      	str	r2, [sp, #8]
 8006650:	9301      	str	r3, [sp, #4]
 8006652:	2300      	movs	r3, #0
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	2300      	movs	r3, #0
 8006658:	460a      	mov	r2, r1
 800665a:	4919      	ldr	r1, [pc, #100]	; (80066c0 <vTaskStartScheduler+0x94>)
 800665c:	4819      	ldr	r0, [pc, #100]	; (80066c4 <vTaskStartScheduler+0x98>)
 800665e:	f7ff fe45 	bl	80062ec <xTaskCreateStatic>
 8006662:	4603      	mov	r3, r0
 8006664:	4a18      	ldr	r2, [pc, #96]	; (80066c8 <vTaskStartScheduler+0x9c>)
 8006666:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006668:	4b17      	ldr	r3, [pc, #92]	; (80066c8 <vTaskStartScheduler+0x9c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006670:	2301      	movs	r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	e001      	b.n	800667a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006676:	2300      	movs	r3, #0
 8006678:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d102      	bne.n	8006686 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006680:	f000 fc82 	bl	8006f88 <xTimerCreateTimerTask>
 8006684:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d10e      	bne.n	80066aa <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800668c:	f001 f90c 	bl	80078a8 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006690:	4b0e      	ldr	r3, [pc, #56]	; (80066cc <vTaskStartScheduler+0xa0>)
 8006692:	f04f 32ff 	mov.w	r2, #4294967295
 8006696:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006698:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <vTaskStartScheduler+0xa4>)
 800669a:	2201      	movs	r2, #1
 800669c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800669e:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <vTaskStartScheduler+0xa8>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066a4:	f001 f8b4 	bl	8007810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066a8:	e006      	b.n	80066b8 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b0:	d102      	bne.n	80066b8 <vTaskStartScheduler+0x8c>
 80066b2:	f001 f8f9 	bl	80078a8 <ulSetInterruptMask>
 80066b6:	e7fe      	b.n	80066b6 <vTaskStartScheduler+0x8a>
}
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	08007da0 	.word	0x08007da0
 80066c4:	08006c5d 	.word	0x08006c5d
 80066c8:	20001030 	.word	0x20001030
 80066cc:	2000102c 	.word	0x2000102c
 80066d0:	20001018 	.word	0x20001018
 80066d4:	20001010 	.word	0x20001010

080066d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066dc:	4b04      	ldr	r3, [pc, #16]	; (80066f0 <vTaskSuspendAll+0x18>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	4a03      	ldr	r2, [pc, #12]	; (80066f0 <vTaskSuspendAll+0x18>)
 80066e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066e6:	bf00      	nop
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	20001034 	.word	0x20001034

080066f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066fe:	2300      	movs	r3, #0
 8006700:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006702:	4b3b      	ldr	r3, [pc, #236]	; (80067f0 <xTaskResumeAll+0xfc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d102      	bne.n	8006710 <xTaskResumeAll+0x1c>
 800670a:	f001 f8cd 	bl	80078a8 <ulSetInterruptMask>
 800670e:	e7fe      	b.n	800670e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006710:	f000 ff98 	bl	8007644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006714:	4b36      	ldr	r3, [pc, #216]	; (80067f0 <xTaskResumeAll+0xfc>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3b01      	subs	r3, #1
 800671a:	4a35      	ldr	r2, [pc, #212]	; (80067f0 <xTaskResumeAll+0xfc>)
 800671c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800671e:	4b34      	ldr	r3, [pc, #208]	; (80067f0 <xTaskResumeAll+0xfc>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d15c      	bne.n	80067e0 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006726:	4b33      	ldr	r3, [pc, #204]	; (80067f4 <xTaskResumeAll+0x100>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d058      	beq.n	80067e0 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800672e:	e02f      	b.n	8006790 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006730:	4b31      	ldr	r3, [pc, #196]	; (80067f8 <xTaskResumeAll+0x104>)
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3318      	adds	r3, #24
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff f97f 	bl	8005a40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3304      	adds	r3, #4
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff f97a 	bl	8005a40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006750:	4b2a      	ldr	r3, [pc, #168]	; (80067fc <xTaskResumeAll+0x108>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	429a      	cmp	r2, r3
 8006756:	d903      	bls.n	8006760 <xTaskResumeAll+0x6c>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	4a27      	ldr	r2, [pc, #156]	; (80067fc <xTaskResumeAll+0x108>)
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4a24      	ldr	r2, [pc, #144]	; (8006800 <xTaskResumeAll+0x10c>)
 800676e:	441a      	add	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3304      	adds	r3, #4
 8006774:	4619      	mov	r1, r3
 8006776:	4610      	mov	r0, r2
 8006778:	f7ff f905 	bl	8005986 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006780:	4b20      	ldr	r3, [pc, #128]	; (8006804 <xTaskResumeAll+0x110>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	429a      	cmp	r2, r3
 8006788:	d302      	bcc.n	8006790 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800678a:	4b1f      	ldr	r3, [pc, #124]	; (8006808 <xTaskResumeAll+0x114>)
 800678c:	2201      	movs	r2, #1
 800678e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006790:	4b19      	ldr	r3, [pc, #100]	; (80067f8 <xTaskResumeAll+0x104>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1cb      	bne.n	8006730 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800679e:	f000 fb03 	bl	8006da8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80067a2:	4b1a      	ldr	r3, [pc, #104]	; (800680c <xTaskResumeAll+0x118>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d010      	beq.n	80067d0 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067ae:	f000 f83f 	bl	8006830 <xTaskIncrementTick>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 80067b8:	4b13      	ldr	r3, [pc, #76]	; (8006808 <xTaskResumeAll+0x114>)
 80067ba:	2201      	movs	r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1f1      	bne.n	80067ae <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 80067ca:	4b10      	ldr	r3, [pc, #64]	; (800680c <xTaskResumeAll+0x118>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067d0:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <xTaskResumeAll+0x114>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067dc:	f000 ff20 	bl	8007620 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067e0:	f000 ff42 	bl	8007668 <vPortExitCritical>

	return xAlreadyYielded;
 80067e4:	68bb      	ldr	r3, [r7, #8]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20001034 	.word	0x20001034
 80067f4:	2000100c 	.word	0x2000100c
 80067f8:	20000fcc 	.word	0x20000fcc
 80067fc:	20001014 	.word	0x20001014
 8006800:	20000b3c 	.word	0x20000b3c
 8006804:	20000b38 	.word	0x20000b38
 8006808:	20001020 	.word	0x20001020
 800680c:	2000101c 	.word	0x2000101c

08006810 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006816:	4b05      	ldr	r3, [pc, #20]	; (800682c <xTaskGetTickCount+0x1c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800681c:	687b      	ldr	r3, [r7, #4]
}
 800681e:	4618      	mov	r0, r3
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	20001010 	.word	0x20001010

08006830 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800683a:	4b4b      	ldr	r3, [pc, #300]	; (8006968 <xTaskIncrementTick+0x138>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	f040 8087 	bne.w	8006952 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006844:	4b49      	ldr	r3, [pc, #292]	; (800696c <xTaskIncrementTick+0x13c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3301      	adds	r3, #1
 800684a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800684c:	4a47      	ldr	r2, [pc, #284]	; (800696c <xTaskIncrementTick+0x13c>)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d118      	bne.n	800688a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006858:	4b45      	ldr	r3, [pc, #276]	; (8006970 <xTaskIncrementTick+0x140>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <xTaskIncrementTick+0x38>
 8006862:	f001 f821 	bl	80078a8 <ulSetInterruptMask>
 8006866:	e7fe      	b.n	8006866 <xTaskIncrementTick+0x36>
 8006868:	4b41      	ldr	r3, [pc, #260]	; (8006970 <xTaskIncrementTick+0x140>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	4b41      	ldr	r3, [pc, #260]	; (8006974 <xTaskIncrementTick+0x144>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a3f      	ldr	r2, [pc, #252]	; (8006970 <xTaskIncrementTick+0x140>)
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	4a3f      	ldr	r2, [pc, #252]	; (8006974 <xTaskIncrementTick+0x144>)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	4b3e      	ldr	r3, [pc, #248]	; (8006978 <xTaskIncrementTick+0x148>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3301      	adds	r3, #1
 8006882:	4a3d      	ldr	r2, [pc, #244]	; (8006978 <xTaskIncrementTick+0x148>)
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	f000 fa8f 	bl	8006da8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800688a:	4b3c      	ldr	r3, [pc, #240]	; (800697c <xTaskIncrementTick+0x14c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	429a      	cmp	r2, r3
 8006892:	d349      	bcc.n	8006928 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006894:	4b36      	ldr	r3, [pc, #216]	; (8006970 <xTaskIncrementTick+0x140>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d104      	bne.n	80068a8 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800689e:	4b37      	ldr	r3, [pc, #220]	; (800697c <xTaskIncrementTick+0x14c>)
 80068a0:	f04f 32ff 	mov.w	r2, #4294967295
 80068a4:	601a      	str	r2, [r3, #0]
					break;
 80068a6:	e03f      	b.n	8006928 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a8:	4b31      	ldr	r3, [pc, #196]	; (8006970 <xTaskIncrementTick+0x140>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d203      	bcs.n	80068c8 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068c0:	4a2e      	ldr	r2, [pc, #184]	; (800697c <xTaskIncrementTick+0x14c>)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068c6:	e02f      	b.n	8006928 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	3304      	adds	r3, #4
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff f8b7 	bl	8005a40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d004      	beq.n	80068e4 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	3318      	adds	r3, #24
 80068de:	4618      	mov	r0, r3
 80068e0:	f7ff f8ae 	bl	8005a40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e8:	4b25      	ldr	r3, [pc, #148]	; (8006980 <xTaskIncrementTick+0x150>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d903      	bls.n	80068f8 <xTaskIncrementTick+0xc8>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	4a22      	ldr	r2, [pc, #136]	; (8006980 <xTaskIncrementTick+0x150>)
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4a1f      	ldr	r2, [pc, #124]	; (8006984 <xTaskIncrementTick+0x154>)
 8006906:	441a      	add	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	3304      	adds	r3, #4
 800690c:	4619      	mov	r1, r3
 800690e:	4610      	mov	r0, r2
 8006910:	f7ff f839 	bl	8005986 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006918:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <xTaskIncrementTick+0x158>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	429a      	cmp	r2, r3
 8006920:	d3b8      	bcc.n	8006894 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8006922:	2301      	movs	r3, #1
 8006924:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006926:	e7b5      	b.n	8006894 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006928:	4b17      	ldr	r3, [pc, #92]	; (8006988 <xTaskIncrementTick+0x158>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692e:	4915      	ldr	r1, [pc, #84]	; (8006984 <xTaskIncrementTick+0x154>)
 8006930:	4613      	mov	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	440b      	add	r3, r1
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d901      	bls.n	8006944 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 8006940:	2301      	movs	r3, #1
 8006942:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006944:	4b11      	ldr	r3, [pc, #68]	; (800698c <xTaskIncrementTick+0x15c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d007      	beq.n	800695c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800694c:	2301      	movs	r3, #1
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	e004      	b.n	800695c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006952:	4b0f      	ldr	r3, [pc, #60]	; (8006990 <xTaskIncrementTick+0x160>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3301      	adds	r3, #1
 8006958:	4a0d      	ldr	r2, [pc, #52]	; (8006990 <xTaskIncrementTick+0x160>)
 800695a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800695c:	697b      	ldr	r3, [r7, #20]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20001034 	.word	0x20001034
 800696c:	20001010 	.word	0x20001010
 8006970:	20000fc4 	.word	0x20000fc4
 8006974:	20000fc8 	.word	0x20000fc8
 8006978:	20001024 	.word	0x20001024
 800697c:	2000102c 	.word	0x2000102c
 8006980:	20001014 	.word	0x20001014
 8006984:	20000b3c 	.word	0x20000b3c
 8006988:	20000b38 	.word	0x20000b38
 800698c:	20001020 	.word	0x20001020
 8006990:	2000101c 	.word	0x2000101c

08006994 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800699a:	4b23      	ldr	r3, [pc, #140]	; (8006a28 <vTaskSwitchContext+0x94>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069a2:	4b22      	ldr	r3, [pc, #136]	; (8006a2c <vTaskSwitchContext+0x98>)
 80069a4:	2201      	movs	r2, #1
 80069a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069a8:	e039      	b.n	8006a1e <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 80069aa:	4b20      	ldr	r3, [pc, #128]	; (8006a2c <vTaskSwitchContext+0x98>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b0:	4b1f      	ldr	r3, [pc, #124]	; (8006a30 <vTaskSwitchContext+0x9c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	607b      	str	r3, [r7, #4]
 80069b6:	e008      	b.n	80069ca <vTaskSwitchContext+0x36>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <vTaskSwitchContext+0x30>
 80069be:	f000 ff73 	bl	80078a8 <ulSetInterruptMask>
 80069c2:	e7fe      	b.n	80069c2 <vTaskSwitchContext+0x2e>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	607b      	str	r3, [r7, #4]
 80069ca:	491a      	ldr	r1, [pc, #104]	; (8006a34 <vTaskSwitchContext+0xa0>)
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	440b      	add	r3, r1
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0ec      	beq.n	80069b8 <vTaskSwitchContext+0x24>
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	4613      	mov	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4a12      	ldr	r2, [pc, #72]	; (8006a34 <vTaskSwitchContext+0xa0>)
 80069ea:	4413      	add	r3, r2
 80069ec:	603b      	str	r3, [r7, #0]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	605a      	str	r2, [r3, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	3308      	adds	r3, #8
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d104      	bne.n	8006a0e <vTaskSwitchContext+0x7a>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	605a      	str	r2, [r3, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	4a08      	ldr	r2, [pc, #32]	; (8006a38 <vTaskSwitchContext+0xa4>)
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	4a05      	ldr	r2, [pc, #20]	; (8006a30 <vTaskSwitchContext+0x9c>)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6013      	str	r3, [r2, #0]
}
 8006a1e:	bf00      	nop
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20001034 	.word	0x20001034
 8006a2c:	20001020 	.word	0x20001020
 8006a30:	20001014 	.word	0x20001014
 8006a34:	20000b3c 	.word	0x20000b3c
 8006a38:	20000b38 	.word	0x20000b38

08006a3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d102      	bne.n	8006a52 <vTaskPlaceOnEventList+0x16>
 8006a4c:	f000 ff2c 	bl	80078a8 <ulSetInterruptMask>
 8006a50:	e7fe      	b.n	8006a50 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a52:	4b07      	ldr	r3, [pc, #28]	; (8006a70 <vTaskPlaceOnEventList+0x34>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3318      	adds	r3, #24
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7fe ffb7 	bl	80059ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a60:	2101      	movs	r1, #1
 8006a62:	6838      	ldr	r0, [r7, #0]
 8006a64:	f000 fa3c 	bl	8006ee0 <prvAddCurrentTaskToDelayedList>
}
 8006a68:	bf00      	nop
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	20000b38 	.word	0x20000b38

08006a74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d102      	bne.n	8006a8c <vTaskPlaceOnEventListRestricted+0x18>
 8006a86:	f000 ff0f 	bl	80078a8 <ulSetInterruptMask>
 8006a8a:	e7fe      	b.n	8006a8a <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <vTaskPlaceOnEventListRestricted+0x44>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3318      	adds	r3, #24
 8006a92:	4619      	mov	r1, r3
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f7fe ff76 	bl	8005986 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 8006aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	68b8      	ldr	r0, [r7, #8]
 8006aaa:	f000 fa19 	bl	8006ee0 <prvAddCurrentTaskToDelayedList>
	}
 8006aae:	bf00      	nop
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20000b38 	.word	0x20000b38

08006abc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d102      	bne.n	8006ad8 <xTaskRemoveFromEventList+0x1c>
 8006ad2:	f000 fee9 	bl	80078a8 <ulSetInterruptMask>
 8006ad6:	e7fe      	b.n	8006ad6 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	3318      	adds	r3, #24
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fe ffaf 	bl	8005a40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ae2:	4b1e      	ldr	r3, [pc, #120]	; (8006b5c <xTaskRemoveFromEventList+0xa0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d11d      	bne.n	8006b26 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	3304      	adds	r3, #4
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe ffa6 	bl	8005a40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af8:	4b19      	ldr	r3, [pc, #100]	; (8006b60 <xTaskRemoveFromEventList+0xa4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d903      	bls.n	8006b08 <xTaskRemoveFromEventList+0x4c>
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	4a16      	ldr	r2, [pc, #88]	; (8006b60 <xTaskRemoveFromEventList+0xa4>)
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4a13      	ldr	r2, [pc, #76]	; (8006b64 <xTaskRemoveFromEventList+0xa8>)
 8006b16:	441a      	add	r2, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	f7fe ff31 	bl	8005986 <vListInsertEnd>
 8006b24:	e005      	b.n	8006b32 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	3318      	adds	r3, #24
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	480e      	ldr	r0, [pc, #56]	; (8006b68 <xTaskRemoveFromEventList+0xac>)
 8006b2e:	f7fe ff2a 	bl	8005986 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b36:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <xTaskRemoveFromEventList+0xb0>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d905      	bls.n	8006b4c <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b44:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <xTaskRemoveFromEventList+0xb4>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e001      	b.n	8006b50 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8006b50:	68fb      	ldr	r3, [r7, #12]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20001034 	.word	0x20001034
 8006b60:	20001014 	.word	0x20001014
 8006b64:	20000b3c 	.word	0x20000b3c
 8006b68:	20000fcc 	.word	0x20000fcc
 8006b6c:	20000b38 	.word	0x20000b38
 8006b70:	20001020 	.word	0x20001020

08006b74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b7c:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <vTaskInternalSetTimeOutState+0x24>)
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b84:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <vTaskInternalSetTimeOutState+0x28>)
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	605a      	str	r2, [r3, #4]
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	20001024 	.word	0x20001024
 8006b9c:	20001010 	.word	0x20001010

08006ba0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d102      	bne.n	8006bb6 <xTaskCheckForTimeOut+0x16>
 8006bb0:	f000 fe7a 	bl	80078a8 <ulSetInterruptMask>
 8006bb4:	e7fe      	b.n	8006bb4 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <xTaskCheckForTimeOut+0x22>
 8006bbc:	f000 fe74 	bl	80078a8 <ulSetInterruptMask>
 8006bc0:	e7fe      	b.n	8006bc0 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8006bc2:	f000 fd3f 	bl	8007644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bc6:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <xTaskCheckForTimeOut+0x9c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d102      	bne.n	8006be6 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	e023      	b.n	8006c2e <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	4b15      	ldr	r3, [pc, #84]	; (8006c40 <xTaskCheckForTimeOut+0xa0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d007      	beq.n	8006c02 <xTaskCheckForTimeOut+0x62>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d302      	bcc.n	8006c02 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	e015      	b.n	8006c2e <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d20b      	bcs.n	8006c24 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	1ad2      	subs	r2, r2, r3
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff ffab 	bl	8006b74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	e004      	b.n	8006c2e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006c2e:	f000 fd1b 	bl	8007668 <vPortExitCritical>

	return xReturn;
 8006c32:	697b      	ldr	r3, [r7, #20]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	20001010 	.word	0x20001010
 8006c40:	20001024 	.word	0x20001024

08006c44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c48:	4b03      	ldr	r3, [pc, #12]	; (8006c58 <vTaskMissedYield+0x14>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
}
 8006c4e:	bf00      	nop
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	20001020 	.word	0x20001020

08006c5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c64:	f000 f84a 	bl	8006cfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c68:	4b03      	ldr	r3, [pc, #12]	; (8006c78 <prvIdleTask+0x1c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d9f9      	bls.n	8006c64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c70:	f000 fcd6 	bl	8007620 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006c74:	e7f6      	b.n	8006c64 <prvIdleTask+0x8>
 8006c76:	bf00      	nop
 8006c78:	20000b3c 	.word	0x20000b3c

08006c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c82:	2300      	movs	r3, #0
 8006c84:	607b      	str	r3, [r7, #4]
 8006c86:	e00c      	b.n	8006ca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4a12      	ldr	r2, [pc, #72]	; (8006cdc <prvInitialiseTaskLists+0x60>)
 8006c94:	4413      	add	r3, r2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe fe48 	bl	800592c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	607b      	str	r3, [r7, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b37      	cmp	r3, #55	; 0x37
 8006ca6:	d9ef      	bls.n	8006c88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ca8:	480d      	ldr	r0, [pc, #52]	; (8006ce0 <prvInitialiseTaskLists+0x64>)
 8006caa:	f7fe fe3f 	bl	800592c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cae:	480d      	ldr	r0, [pc, #52]	; (8006ce4 <prvInitialiseTaskLists+0x68>)
 8006cb0:	f7fe fe3c 	bl	800592c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cb4:	480c      	ldr	r0, [pc, #48]	; (8006ce8 <prvInitialiseTaskLists+0x6c>)
 8006cb6:	f7fe fe39 	bl	800592c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cba:	480c      	ldr	r0, [pc, #48]	; (8006cec <prvInitialiseTaskLists+0x70>)
 8006cbc:	f7fe fe36 	bl	800592c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cc0:	480b      	ldr	r0, [pc, #44]	; (8006cf0 <prvInitialiseTaskLists+0x74>)
 8006cc2:	f7fe fe33 	bl	800592c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <prvInitialiseTaskLists+0x78>)
 8006cc8:	4a05      	ldr	r2, [pc, #20]	; (8006ce0 <prvInitialiseTaskLists+0x64>)
 8006cca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <prvInitialiseTaskLists+0x7c>)
 8006cce:	4a05      	ldr	r2, [pc, #20]	; (8006ce4 <prvInitialiseTaskLists+0x68>)
 8006cd0:	601a      	str	r2, [r3, #0]
}
 8006cd2:	bf00      	nop
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000b3c 	.word	0x20000b3c
 8006ce0:	20000f9c 	.word	0x20000f9c
 8006ce4:	20000fb0 	.word	0x20000fb0
 8006ce8:	20000fcc 	.word	0x20000fcc
 8006cec:	20000fe0 	.word	0x20000fe0
 8006cf0:	20000ff8 	.word	0x20000ff8
 8006cf4:	20000fc4 	.word	0x20000fc4
 8006cf8:	20000fc8 	.word	0x20000fc8

08006cfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d02:	e019      	b.n	8006d38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d04:	f000 fc9e 	bl	8007644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d08:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <prvCheckTasksWaitingTermination+0x50>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fe fe93 	bl	8005a40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d1a:	4b0d      	ldr	r3, [pc, #52]	; (8006d50 <prvCheckTasksWaitingTermination+0x54>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	4a0b      	ldr	r2, [pc, #44]	; (8006d50 <prvCheckTasksWaitingTermination+0x54>)
 8006d22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d24:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <prvCheckTasksWaitingTermination+0x58>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	4a0a      	ldr	r2, [pc, #40]	; (8006d54 <prvCheckTasksWaitingTermination+0x58>)
 8006d2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d2e:	f000 fc9b 	bl	8007668 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f810 	bl	8006d58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d38:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <prvCheckTasksWaitingTermination+0x58>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e1      	bne.n	8006d04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000fe0 	.word	0x20000fe0
 8006d50:	2000100c 	.word	0x2000100c
 8006d54:	20000ff4 	.word	0x20000ff4

08006d58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d108      	bne.n	8006d7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 feae 	bl	8007ad0 <vPortFree>
				vPortFree( pxTCB );
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 feab 	bl	8007ad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d7a:	e010      	b.n	8006d9e <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d103      	bne.n	8006d8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fea2 	bl	8007ad0 <vPortFree>
	}
 8006d8c:	e007      	b.n	8006d9e <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d002      	beq.n	8006d9e <prvDeleteTCB+0x46>
 8006d98:	f000 fd86 	bl	80078a8 <ulSetInterruptMask>
 8006d9c:	e7fe      	b.n	8006d9c <prvDeleteTCB+0x44>
	}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dae:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <prvResetNextTaskUnblockTime+0x38>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006db8:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <prvResetNextTaskUnblockTime+0x3c>)
 8006dba:	f04f 32ff 	mov.w	r2, #4294967295
 8006dbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006dc0:	e008      	b.n	8006dd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc2:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <prvResetNextTaskUnblockTime+0x38>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	4a04      	ldr	r2, [pc, #16]	; (8006de4 <prvResetNextTaskUnblockTime+0x3c>)
 8006dd2:	6013      	str	r3, [r2, #0]
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	20000fc4 	.word	0x20000fc4
 8006de4:	2000102c 	.word	0x2000102c

08006de8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006dee:	4b0b      	ldr	r3, [pc, #44]	; (8006e1c <xTaskGetSchedulerState+0x34>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d102      	bne.n	8006dfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006df6:	2301      	movs	r3, #1
 8006df8:	607b      	str	r3, [r7, #4]
 8006dfa:	e008      	b.n	8006e0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dfc:	4b08      	ldr	r3, [pc, #32]	; (8006e20 <xTaskGetSchedulerState+0x38>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d102      	bne.n	8006e0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e04:	2302      	movs	r3, #2
 8006e06:	607b      	str	r3, [r7, #4]
 8006e08:	e001      	b.n	8006e0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e0e:	687b      	ldr	r3, [r7, #4]
	}
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	20001018 	.word	0x20001018
 8006e20:	20001034 	.word	0x20001034

08006e24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d046      	beq.n	8006ec8 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e3a:	4b26      	ldr	r3, [pc, #152]	; (8006ed4 <xTaskPriorityDisinherit+0xb0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d002      	beq.n	8006e4a <xTaskPriorityDisinherit+0x26>
 8006e44:	f000 fd30 	bl	80078a8 <ulSetInterruptMask>
 8006e48:	e7fe      	b.n	8006e48 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d102      	bne.n	8006e58 <xTaskPriorityDisinherit+0x34>
 8006e52:	f000 fd29 	bl	80078a8 <ulSetInterruptMask>
 8006e56:	e7fe      	b.n	8006e56 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5c:	1e5a      	subs	r2, r3, #1
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d02c      	beq.n	8006ec8 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d128      	bne.n	8006ec8 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fde0 	bl	8005a40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e98:	4b0f      	ldr	r3, [pc, #60]	; (8006ed8 <xTaskPriorityDisinherit+0xb4>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d903      	bls.n	8006ea8 <xTaskPriorityDisinherit+0x84>
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	4a0c      	ldr	r2, [pc, #48]	; (8006ed8 <xTaskPriorityDisinherit+0xb4>)
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4a09      	ldr	r2, [pc, #36]	; (8006edc <xTaskPriorityDisinherit+0xb8>)
 8006eb6:	441a      	add	r2, r3
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	3304      	adds	r3, #4
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f7fe fd61 	bl	8005986 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
	}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20000b38 	.word	0x20000b38
 8006ed8:	20001014 	.word	0x20001014
 8006edc:	20000b3c 	.word	0x20000b3c

08006ee0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006eea:	4b21      	ldr	r3, [pc, #132]	; (8006f70 <prvAddCurrentTaskToDelayedList+0x90>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ef0:	4b20      	ldr	r3, [pc, #128]	; (8006f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe fda2 	bl	8005a40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f02:	d10a      	bne.n	8006f1a <prvAddCurrentTaskToDelayedList+0x3a>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d007      	beq.n	8006f1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f0a:	4b1a      	ldr	r3, [pc, #104]	; (8006f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4619      	mov	r1, r3
 8006f12:	4819      	ldr	r0, [pc, #100]	; (8006f78 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f14:	f7fe fd37 	bl	8005986 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f18:	e026      	b.n	8006f68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4413      	add	r3, r2
 8006f20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f22:	4b14      	ldr	r3, [pc, #80]	; (8006f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d209      	bcs.n	8006f46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f32:	4b12      	ldr	r3, [pc, #72]	; (8006f7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	4b0f      	ldr	r3, [pc, #60]	; (8006f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4610      	mov	r0, r2
 8006f40:	f7fe fd45 	bl	80059ce <vListInsert>
}
 8006f44:	e010      	b.n	8006f68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f46:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3304      	adds	r3, #4
 8006f50:	4619      	mov	r1, r3
 8006f52:	4610      	mov	r0, r2
 8006f54:	f7fe fd3b 	bl	80059ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f58:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d202      	bcs.n	8006f68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f62:	4a08      	ldr	r2, [pc, #32]	; (8006f84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	6013      	str	r3, [r2, #0]
}
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20001010 	.word	0x20001010
 8006f74:	20000b38 	.word	0x20000b38
 8006f78:	20000ff8 	.word	0x20000ff8
 8006f7c:	20000fc8 	.word	0x20000fc8
 8006f80:	20000fc4 	.word	0x20000fc4
 8006f84:	2000102c 	.word	0x2000102c

08006f88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f92:	f000 fac7 	bl	8007524 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f96:	4b18      	ldr	r3, [pc, #96]	; (8006ff8 <xTimerCreateTimerTask+0x70>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d020      	beq.n	8006fe0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006fa6:	463a      	mov	r2, r7
 8006fa8:	1d39      	adds	r1, r7, #4
 8006faa:	f107 0308 	add.w	r3, r7, #8
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe fca2 	bl	80058f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	9202      	str	r2, [sp, #8]
 8006fbc:	9301      	str	r3, [sp, #4]
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	460a      	mov	r2, r1
 8006fc6:	490d      	ldr	r1, [pc, #52]	; (8006ffc <xTimerCreateTimerTask+0x74>)
 8006fc8:	480d      	ldr	r0, [pc, #52]	; (8007000 <xTimerCreateTimerTask+0x78>)
 8006fca:	f7ff f98f 	bl	80062ec <xTaskCreateStatic>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	4a0c      	ldr	r2, [pc, #48]	; (8007004 <xTimerCreateTimerTask+0x7c>)
 8006fd2:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006fd4:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <xTimerCreateTimerTask+0x7c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d102      	bne.n	8006fec <xTimerCreateTimerTask+0x64>
 8006fe6:	f000 fc5f 	bl	80078a8 <ulSetInterruptMask>
 8006fea:	e7fe      	b.n	8006fea <xTimerCreateTimerTask+0x62>
	return xReturn;
 8006fec:	68fb      	ldr	r3, [r7, #12]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20001068 	.word	0x20001068
 8006ffc:	08007da8 	.word	0x08007da8
 8007000:	0800711d 	.word	0x0800711d
 8007004:	2000106c 	.word	0x2000106c

08007008 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08a      	sub	sp, #40	; 0x28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007016:	2300      	movs	r3, #0
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d102      	bne.n	8007026 <xTimerGenericCommand+0x1e>
 8007020:	f000 fc42 	bl	80078a8 <ulSetInterruptMask>
 8007024:	e7fe      	b.n	8007024 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007026:	4b1a      	ldr	r3, [pc, #104]	; (8007090 <xTimerGenericCommand+0x88>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d02a      	beq.n	8007084 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b05      	cmp	r3, #5
 800703e:	dc18      	bgt.n	8007072 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007040:	f7ff fed2 	bl	8006de8 <xTaskGetSchedulerState>
 8007044:	4603      	mov	r3, r0
 8007046:	2b02      	cmp	r3, #2
 8007048:	d109      	bne.n	800705e <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800704a:	4b11      	ldr	r3, [pc, #68]	; (8007090 <xTimerGenericCommand+0x88>)
 800704c:	6818      	ldr	r0, [r3, #0]
 800704e:	f107 0114 	add.w	r1, r7, #20
 8007052:	2300      	movs	r3, #0
 8007054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007056:	f7fe fde8 	bl	8005c2a <xQueueGenericSend>
 800705a:	6278      	str	r0, [r7, #36]	; 0x24
 800705c:	e012      	b.n	8007084 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800705e:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <xTimerGenericCommand+0x88>)
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	f107 0114 	add.w	r1, r7, #20
 8007066:	2300      	movs	r3, #0
 8007068:	2200      	movs	r2, #0
 800706a:	f7fe fdde 	bl	8005c2a <xQueueGenericSend>
 800706e:	6278      	str	r0, [r7, #36]	; 0x24
 8007070:	e008      	b.n	8007084 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007072:	4b07      	ldr	r3, [pc, #28]	; (8007090 <xTimerGenericCommand+0x88>)
 8007074:	6818      	ldr	r0, [r3, #0]
 8007076:	f107 0114 	add.w	r1, r7, #20
 800707a:	2300      	movs	r3, #0
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	f7fe fe9d 	bl	8005dbc <xQueueGenericSendFromISR>
 8007082:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007086:	4618      	mov	r0, r3
 8007088:	3728      	adds	r7, #40	; 0x28
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20001068 	.word	0x20001068

08007094 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af02      	add	r7, sp, #8
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800709e:	4b1e      	ldr	r3, [pc, #120]	; (8007118 <prvProcessExpiredTimer+0x84>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3304      	adds	r3, #4
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fe fcc7 	bl	8005a40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01a      	beq.n	80070f6 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	699a      	ldr	r2, [r3, #24]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	18d1      	adds	r1, r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f8c1 	bl	8007254 <prvInsertTimerInActiveList>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d017      	beq.n	8007108 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070d8:	2300      	movs	r3, #0
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	2300      	movs	r3, #0
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	2100      	movs	r1, #0
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff ff90 	bl	8007008 <xTimerGenericCommand>
 80070e8:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <prvProcessExpiredTimer+0x74>
 80070f0:	f000 fbda 	bl	80078a8 <ulSetInterruptMask>
 80070f4:	e7fe      	b.n	80070f4 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070fc:	f023 0301 	bic.w	r3, r3, #1
 8007100:	b2da      	uxtb	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	4798      	blx	r3
}
 8007110:	bf00      	nop
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	20001060 	.word	0x20001060

0800711c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007124:	f107 0308 	add.w	r3, r7, #8
 8007128:	4618      	mov	r0, r3
 800712a:	f000 f84f 	bl	80071cc <prvGetNextExpireTime>
 800712e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	4619      	mov	r1, r3
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 f803 	bl	8007140 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800713a:	f000 f8cd 	bl	80072d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800713e:	e7f1      	b.n	8007124 <prvTimerTask+0x8>

08007140 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800714a:	f7ff fac5 	bl	80066d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800714e:	f107 0308 	add.w	r3, r7, #8
 8007152:	4618      	mov	r0, r3
 8007154:	f000 f85e 	bl	8007214 <prvSampleTimeNow>
 8007158:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d12a      	bne.n	80071b6 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10a      	bne.n	800717c <prvProcessTimerOrBlockTask+0x3c>
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	429a      	cmp	r2, r3
 800716c:	d806      	bhi.n	800717c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800716e:	f7ff fac1 	bl	80066f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007172:	68f9      	ldr	r1, [r7, #12]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff ff8d 	bl	8007094 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800717a:	e01e      	b.n	80071ba <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d008      	beq.n	8007194 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007182:	4b10      	ldr	r3, [pc, #64]	; (80071c4 <prvProcessTimerOrBlockTask+0x84>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <prvProcessTimerOrBlockTask+0x50>
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <prvProcessTimerOrBlockTask+0x52>
 8007190:	2300      	movs	r3, #0
 8007192:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007194:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <prvProcessTimerOrBlockTask+0x88>)
 8007196:	6818      	ldr	r0, [r3, #0]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	4619      	mov	r1, r3
 80071a2:	f7ff f86f 	bl	8006284 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071a6:	f7ff faa5 	bl	80066f4 <xTaskResumeAll>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d104      	bne.n	80071ba <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80071b0:	f000 fa36 	bl	8007620 <vPortYield>
}
 80071b4:	e001      	b.n	80071ba <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80071b6:	f7ff fa9d 	bl	80066f4 <xTaskResumeAll>
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20001064 	.word	0x20001064
 80071c8:	20001068 	.word	0x20001068

080071cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071d4:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <prvGetNextExpireTime+0x44>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <prvGetNextExpireTime+0x16>
 80071de:	2201      	movs	r2, #1
 80071e0:	e000      	b.n	80071e4 <prvGetNextExpireTime+0x18>
 80071e2:	2200      	movs	r2, #0
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d105      	bne.n	80071fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071f0:	4b07      	ldr	r3, [pc, #28]	; (8007210 <prvGetNextExpireTime+0x44>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	e001      	b.n	8007200 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007200:	68fb      	ldr	r3, [r7, #12]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	20001060 	.word	0x20001060

08007214 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800721c:	f7ff faf8 	bl	8006810 <xTaskGetTickCount>
 8007220:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007222:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <prvSampleTimeNow+0x3c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	429a      	cmp	r2, r3
 800722a:	d205      	bcs.n	8007238 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800722c:	f000 f91e 	bl	800746c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	e002      	b.n	800723e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800723e:	4a04      	ldr	r2, [pc, #16]	; (8007250 <prvSampleTimeNow+0x3c>)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007244:	68fb      	ldr	r3, [r7, #12]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20001070 	.word	0x20001070

08007254 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	429a      	cmp	r2, r3
 8007278:	d812      	bhi.n	80072a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	429a      	cmp	r2, r3
 8007286:	d302      	bcc.n	800728e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007288:	2301      	movs	r3, #1
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	e01b      	b.n	80072c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800728e:	4b10      	ldr	r3, [pc, #64]	; (80072d0 <prvInsertTimerInActiveList+0x7c>)
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3304      	adds	r3, #4
 8007296:	4619      	mov	r1, r3
 8007298:	4610      	mov	r0, r2
 800729a:	f7fe fb98 	bl	80059ce <vListInsert>
 800729e:	e012      	b.n	80072c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d206      	bcs.n	80072b6 <prvInsertTimerInActiveList+0x62>
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d302      	bcc.n	80072b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072b0:	2301      	movs	r3, #1
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	e007      	b.n	80072c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072b6:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <prvInsertTimerInActiveList+0x80>)
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3304      	adds	r3, #4
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f7fe fb84 	bl	80059ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072c6:	697b      	ldr	r3, [r7, #20]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20001064 	.word	0x20001064
 80072d4:	20001060 	.word	0x20001060

080072d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08c      	sub	sp, #48	; 0x30
 80072dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072de:	e0b2      	b.n	8007446 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	da11      	bge.n	800730a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072e6:	f107 0308 	add.w	r3, r7, #8
 80072ea:	3304      	adds	r3, #4
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d102      	bne.n	80072fa <prvProcessReceivedCommands+0x22>
 80072f4:	f000 fad8 	bl	80078a8 <ulSetInterruptMask>
 80072f8:	e7fe      	b.n	80072f8 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007300:	6850      	ldr	r0, [r2, #4]
 8007302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007304:	6892      	ldr	r2, [r2, #8]
 8007306:	4611      	mov	r1, r2
 8007308:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f2c0 8099 	blt.w	8007444 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	3304      	adds	r3, #4
 8007322:	4618      	mov	r0, r3
 8007324:	f7fe fb8c 	bl	8005a40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007328:	1d3b      	adds	r3, r7, #4
 800732a:	4618      	mov	r0, r3
 800732c:	f7ff ff72 	bl	8007214 <prvSampleTimeNow>
 8007330:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b09      	cmp	r3, #9
 8007336:	f200 8086 	bhi.w	8007446 <prvProcessReceivedCommands+0x16e>
 800733a:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <prvProcessReceivedCommands+0x68>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	08007369 	.word	0x08007369
 8007344:	08007369 	.word	0x08007369
 8007348:	08007369 	.word	0x08007369
 800734c:	080073cd 	.word	0x080073cd
 8007350:	080073e1 	.word	0x080073e1
 8007354:	0800741b 	.word	0x0800741b
 8007358:	08007369 	.word	0x08007369
 800735c:	08007369 	.word	0x08007369
 8007360:	080073cd 	.word	0x080073cd
 8007364:	080073e1 	.word	0x080073e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800736e:	f043 0301 	orr.w	r3, r3, #1
 8007372:	b2da      	uxtb	r2, r3
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	18d1      	adds	r1, r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	69fa      	ldr	r2, [r7, #28]
 8007386:	6a38      	ldr	r0, [r7, #32]
 8007388:	f7ff ff64 	bl	8007254 <prvInsertTimerInActiveList>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d059      	beq.n	8007446 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	6a38      	ldr	r0, [r7, #32]
 8007398:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d04e      	beq.n	8007446 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	441a      	add	r2, r3
 80073b0:	2300      	movs	r3, #0
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	2300      	movs	r3, #0
 80073b6:	2100      	movs	r1, #0
 80073b8:	6a38      	ldr	r0, [r7, #32]
 80073ba:	f7ff fe25 	bl	8007008 <xTimerGenericCommand>
 80073be:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d13f      	bne.n	8007446 <prvProcessReceivedCommands+0x16e>
 80073c6:	f000 fa6f 	bl	80078a8 <ulSetInterruptMask>
 80073ca:	e7fe      	b.n	80073ca <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073d2:	f023 0301 	bic.w	r3, r3, #1
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073de:	e032      	b.n	8007446 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e6:	f043 0301 	orr.w	r3, r3, #1
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d102      	bne.n	8007406 <prvProcessReceivedCommands+0x12e>
 8007400:	f000 fa52 	bl	80078a8 <ulSetInterruptMask>
 8007404:	e7fe      	b.n	8007404 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	18d1      	adds	r1, r2, r3
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	69fa      	ldr	r2, [r7, #28]
 8007412:	6a38      	ldr	r0, [r7, #32]
 8007414:	f7ff ff1e 	bl	8007254 <prvInsertTimerInActiveList>
					break;
 8007418:	e015      	b.n	8007446 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d103      	bne.n	8007430 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8007428:	6a38      	ldr	r0, [r7, #32]
 800742a:	f000 fb51 	bl	8007ad0 <vPortFree>
 800742e:	e00a      	b.n	8007446 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007436:	f023 0301 	bic.w	r3, r3, #1
 800743a:	b2da      	uxtb	r2, r3
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007442:	e000      	b.n	8007446 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007444:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007446:	4b08      	ldr	r3, [pc, #32]	; (8007468 <prvProcessReceivedCommands+0x190>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f107 0108 	add.w	r1, r7, #8
 800744e:	2200      	movs	r2, #0
 8007450:	4618      	mov	r0, r3
 8007452:	f7fe fd24 	bl	8005e9e <xQueueReceive>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	f47f af41 	bne.w	80072e0 <prvProcessReceivedCommands+0x8>
	}
}
 800745e:	bf00      	nop
 8007460:	bf00      	nop
 8007462:	3728      	adds	r7, #40	; 0x28
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20001068 	.word	0x20001068

0800746c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007472:	e040      	b.n	80074f6 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007474:	4b29      	ldr	r3, [pc, #164]	; (800751c <prvSwitchTimerLists+0xb0>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800747e:	4b27      	ldr	r3, [pc, #156]	; (800751c <prvSwitchTimerLists+0xb0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3304      	adds	r3, #4
 800748c:	4618      	mov	r0, r3
 800748e:	f7fe fad7 	bl	8005a40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d026      	beq.n	80074f6 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	4413      	add	r3, r2
 80074b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d90e      	bls.n	80074d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074c6:	4b15      	ldr	r3, [pc, #84]	; (800751c <prvSwitchTimerLists+0xb0>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3304      	adds	r3, #4
 80074ce:	4619      	mov	r1, r3
 80074d0:	4610      	mov	r0, r2
 80074d2:	f7fe fa7c 	bl	80059ce <vListInsert>
 80074d6:	e00e      	b.n	80074f6 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074d8:	2300      	movs	r3, #0
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	2300      	movs	r3, #0
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	2100      	movs	r1, #0
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f7ff fd90 	bl	8007008 <xTimerGenericCommand>
 80074e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d102      	bne.n	80074f6 <prvSwitchTimerLists+0x8a>
 80074f0:	f000 f9da 	bl	80078a8 <ulSetInterruptMask>
 80074f4:	e7fe      	b.n	80074f4 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074f6:	4b09      	ldr	r3, [pc, #36]	; (800751c <prvSwitchTimerLists+0xb0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1b9      	bne.n	8007474 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007500:	4b06      	ldr	r3, [pc, #24]	; (800751c <prvSwitchTimerLists+0xb0>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007506:	4b06      	ldr	r3, [pc, #24]	; (8007520 <prvSwitchTimerLists+0xb4>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a04      	ldr	r2, [pc, #16]	; (800751c <prvSwitchTimerLists+0xb0>)
 800750c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800750e:	4a04      	ldr	r2, [pc, #16]	; (8007520 <prvSwitchTimerLists+0xb4>)
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	6013      	str	r3, [r2, #0]
}
 8007514:	bf00      	nop
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20001060 	.word	0x20001060
 8007520:	20001064 	.word	0x20001064

08007524 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800752a:	f000 f88b 	bl	8007644 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800752e:	4b15      	ldr	r3, [pc, #84]	; (8007584 <prvCheckForValidListAndQueue+0x60>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d120      	bne.n	8007578 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007536:	4814      	ldr	r0, [pc, #80]	; (8007588 <prvCheckForValidListAndQueue+0x64>)
 8007538:	f7fe f9f8 	bl	800592c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800753c:	4813      	ldr	r0, [pc, #76]	; (800758c <prvCheckForValidListAndQueue+0x68>)
 800753e:	f7fe f9f5 	bl	800592c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007542:	4b13      	ldr	r3, [pc, #76]	; (8007590 <prvCheckForValidListAndQueue+0x6c>)
 8007544:	4a10      	ldr	r2, [pc, #64]	; (8007588 <prvCheckForValidListAndQueue+0x64>)
 8007546:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007548:	4b12      	ldr	r3, [pc, #72]	; (8007594 <prvCheckForValidListAndQueue+0x70>)
 800754a:	4a10      	ldr	r2, [pc, #64]	; (800758c <prvCheckForValidListAndQueue+0x68>)
 800754c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800754e:	2300      	movs	r3, #0
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	4b11      	ldr	r3, [pc, #68]	; (8007598 <prvCheckForValidListAndQueue+0x74>)
 8007554:	4a11      	ldr	r2, [pc, #68]	; (800759c <prvCheckForValidListAndQueue+0x78>)
 8007556:	2110      	movs	r1, #16
 8007558:	200a      	movs	r0, #10
 800755a:	f7fe faf3 	bl	8005b44 <xQueueGenericCreateStatic>
 800755e:	4603      	mov	r3, r0
 8007560:	4a08      	ldr	r2, [pc, #32]	; (8007584 <prvCheckForValidListAndQueue+0x60>)
 8007562:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007564:	4b07      	ldr	r3, [pc, #28]	; (8007584 <prvCheckForValidListAndQueue+0x60>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <prvCheckForValidListAndQueue+0x60>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	490b      	ldr	r1, [pc, #44]	; (80075a0 <prvCheckForValidListAndQueue+0x7c>)
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe fe5c 	bl	8006230 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007578:	f000 f876 	bl	8007668 <vPortExitCritical>
}
 800757c:	bf00      	nop
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	20001068 	.word	0x20001068
 8007588:	20001038 	.word	0x20001038
 800758c:	2000104c 	.word	0x2000104c
 8007590:	20001060 	.word	0x20001060
 8007594:	20001064 	.word	0x20001064
 8007598:	20001114 	.word	0x20001114
 800759c:	20001074 	.word	0x20001074
 80075a0:	08007db0 	.word	0x08007db0

080075a4 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 80075a4:	b480      	push	{r7}
 80075a6:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075a8:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <vPortSetupTimerInterrupt+0x34>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075ae:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <vPortSetupTimerInterrupt+0x38>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075b4:	4b0a      	ldr	r3, [pc, #40]	; (80075e0 <vPortSetupTimerInterrupt+0x3c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a0a      	ldr	r2, [pc, #40]	; (80075e4 <vPortSetupTimerInterrupt+0x40>)
 80075ba:	fba2 2303 	umull	r2, r3, r2, r3
 80075be:	099b      	lsrs	r3, r3, #6
 80075c0:	4a09      	ldr	r2, [pc, #36]	; (80075e8 <vPortSetupTimerInterrupt+0x44>)
 80075c2:	3b01      	subs	r3, #1
 80075c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80075c6:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <vPortSetupTimerInterrupt+0x34>)
 80075c8:	2207      	movs	r2, #7
 80075ca:	601a      	str	r2, [r3, #0]
}
 80075cc:	bf00      	nop
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	e000e010 	.word	0xe000e010
 80075dc:	e000e018 	.word	0xe000e018
 80075e0:	20000000 	.word	0x20000000
 80075e4:	10624dd3 	.word	0x10624dd3
 80075e8:	e000e014 	.word	0xe000e014

080075ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 80075f6:	4b09      	ldr	r3, [pc, #36]	; (800761c <prvTaskExitError+0x30>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fe:	d002      	beq.n	8007606 <prvTaskExitError+0x1a>
 8007600:	f000 f952 	bl	80078a8 <ulSetInterruptMask>
 8007604:	e7fe      	b.n	8007604 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 8007606:	f000 f94f 	bl	80078a8 <ulSetInterruptMask>

	while( ulDummy == 0 )
 800760a:	bf00      	nop
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0fc      	beq.n	800760c <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 8007612:	bf00      	nop
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	2000000c 	.word	0x2000000c

08007620 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8007620:	b480      	push	{r7}
 8007622:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007624:	4b06      	ldr	r3, [pc, #24]	; (8007640 <vPortYield+0x20>)
 8007626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800762a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800762c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007630:	f3bf 8f6f 	isb	sy
}
 8007634:	bf00      	nop
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	e000ed04 	.word	0xe000ed04

08007644 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8007644:	b580      	push	{r7, lr}
 8007646:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8007648:	f000 f92e 	bl	80078a8 <ulSetInterruptMask>
	ulCriticalNesting++;
 800764c:	4b05      	ldr	r3, [pc, #20]	; (8007664 <vPortEnterCritical+0x20>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3301      	adds	r3, #1
 8007652:	4a04      	ldr	r2, [pc, #16]	; (8007664 <vPortEnterCritical+0x20>)
 8007654:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8007656:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800765a:	f3bf 8f6f 	isb	sy
}
 800765e:	bf00      	nop
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	2000000c 	.word	0x2000000c

08007668 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800766c:	4b0a      	ldr	r3, [pc, #40]	; (8007698 <vPortExitCritical+0x30>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <vPortExitCritical+0x12>
 8007674:	f000 f918 	bl	80078a8 <ulSetInterruptMask>
 8007678:	e7fe      	b.n	8007678 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800767a:	4b07      	ldr	r3, [pc, #28]	; (8007698 <vPortExitCritical+0x30>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3b01      	subs	r3, #1
 8007680:	4a05      	ldr	r2, [pc, #20]	; (8007698 <vPortExitCritical+0x30>)
 8007682:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8007684:	4b04      	ldr	r3, [pc, #16]	; (8007698 <vPortExitCritical+0x30>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 800768c:	2000      	movs	r0, #0
 800768e:	f000 f918 	bl	80078c2 <vClearInterruptMask>
	}
}
 8007692:	bf00      	nop
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	2000000c 	.word	0x2000000c

0800769c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80076a2:	f000 f901 	bl	80078a8 <ulSetInterruptMask>
 80076a6:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076a8:	f7ff f8c2 	bl	8006830 <xTaskIncrementTick>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076b2:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <xPortSysTickHandler+0x2c>)
 80076b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b8:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f901 	bl	80078c2 <vClearInterruptMask>
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3b02      	subs	r3, #2
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 80076e2:	7afb      	ldrb	r3, [r7, #11]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d102      	bne.n	80076ee <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 80076e8:	f000 f8b2 	bl	8007850 <vRestoreContextOfFirstTask>
		}
		break;
 80076ec:	e002      	b.n	80076f4 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 80076ee:	f000 f8db 	bl	80078a8 <ulSetInterruptMask>
 80076f2:	e7fe      	b.n	80076f2 <vPortSVCHandler_C+0x26>
		}
	}
}
 80076f4:	bf00      	nop
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3b04      	subs	r3, #4
 800770e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007716:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3b04      	subs	r3, #4
 800771c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3b04      	subs	r3, #4
 8007728:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800772a:	4a38      	ldr	r2, [pc, #224]	; (800780c <pxPortInitialiseStack+0x110>)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3b04      	subs	r3, #4
 8007734:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800773c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3b04      	subs	r3, #4
 8007742:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800774a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3b04      	subs	r3, #4
 8007750:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8007758:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3b04      	subs	r3, #4
 800775e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8007766:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3b04      	subs	r3, #4
 800776c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	3b04      	subs	r3, #4
 8007778:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8007780:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3b04      	subs	r3, #4
 8007786:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800778e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	3b04      	subs	r3, #4
 8007794:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800779c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3b04      	subs	r3, #4
 80077a2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 80077aa:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3b04      	subs	r3, #4
 80077b0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 80077b8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3b04      	subs	r3, #4
 80077be:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 80077c6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3b04      	subs	r3, #4
 80077cc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 80077d4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3b04      	subs	r3, #4
 80077da:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 80077e2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3b04      	subs	r3, #4
 80077e8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f06f 0243 	mvn.w	r2, #67	; 0x43
 80077f0:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3b04      	subs	r3, #4
 80077f6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 80077fe:	68fb      	ldr	r3, [r7, #12]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	080075ed 	.word	0x080075ed

08007810 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8007810:	b580      	push	{r7, lr}
 8007812:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007814:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <xPortStartScheduler+0x38>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a0b      	ldr	r2, [pc, #44]	; (8007848 <xPortStartScheduler+0x38>)
 800781a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800781e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007820:	4b09      	ldr	r3, [pc, #36]	; (8007848 <xPortStartScheduler+0x38>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a08      	ldr	r2, [pc, #32]	; (8007848 <xPortStartScheduler+0x38>)
 8007826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800782a:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 800782c:	f7ff feba 	bl	80075a4 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8007830:	4b06      	ldr	r3, [pc, #24]	; (800784c <xPortStartScheduler+0x3c>)
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 8007836:	f000 f823 	bl	8007880 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 800783a:	f7ff f8ab 	bl	8006994 <vTaskSwitchContext>
	prvTaskExitError();
 800783e:	f7ff fed5 	bl	80075ec <prvTaskExitError>

	/* Should not get here. */
	return 0;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	bd80      	pop	{r7, pc}
 8007848:	e000ed20 	.word	0xe000ed20
 800784c:	2000000c 	.word	0x2000000c

08007850 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8007850:	4a07      	ldr	r2, [pc, #28]	; (8007870 <pxCurrentTCBConst2>)
 8007852:	6811      	ldr	r1, [r2, #0]
 8007854:	6808      	ldr	r0, [r1, #0]
 8007856:	c806      	ldmia	r0!, {r1, r2}
 8007858:	f381 880b 	msr	PSPLIM, r1
 800785c:	2102      	movs	r1, #2
 800785e:	f381 8814 	msr	CONTROL, r1
 8007862:	3020      	adds	r0, #32
 8007864:	f380 8809 	msr	PSP, r0
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	4710      	bx	r2
 800786e:	bf00      	nop

08007870 <pxCurrentTCBConst2>:
 8007870:	20000b38 	.word	0x20000b38
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop
	...

08007880 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8007880:	4807      	ldr	r0, [pc, #28]	; (80078a0 <xVTORConst>)
 8007882:	6800      	ldr	r0, [r0, #0]
 8007884:	6800      	ldr	r0, [r0, #0]
 8007886:	f380 8808 	msr	MSP, r0
 800788a:	b662      	cpsie	i
 800788c:	b661      	cpsie	f
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	df02      	svc	2
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	f3af 8000 	nop.w

080078a0 <xVTORConst>:
 80078a0:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop

080078a8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80078a8:	f3ef 8011 	mrs	r0, BASEPRI
 80078ac:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 80078b0:	f381 8811 	msr	BASEPRI, r1
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078be:	bf00      	nop
 80078c0:	4618      	mov	r0, r3

080078c2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80078c2:	f380 8811 	msr	BASEPRI, r0
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 80078d0:	bf00      	nop
	...

080078e0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80078e0:	f3ef 8009 	mrs	r0, PSP
 80078e4:	f3ef 820b 	mrs	r2, PSPLIM
 80078e8:	4673      	mov	r3, lr
 80078ea:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80078ee:	4a10      	ldr	r2, [pc, #64]	; (8007930 <pxCurrentTCBConst>)
 80078f0:	6811      	ldr	r1, [r2, #0]
 80078f2:	6008      	str	r0, [r1, #0]
 80078f4:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 80078f8:	f380 8811 	msr	BASEPRI, r0
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f7ff f846 	bl	8006994 <vTaskSwitchContext>
 8007908:	f04f 0000 	mov.w	r0, #0
 800790c:	f380 8811 	msr	BASEPRI, r0
 8007910:	4a07      	ldr	r2, [pc, #28]	; (8007930 <pxCurrentTCBConst>)
 8007912:	6811      	ldr	r1, [r2, #0]
 8007914:	6808      	ldr	r0, [r1, #0]
 8007916:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800791a:	f382 880b 	msr	PSPLIM, r2
 800791e:	f380 8809 	msr	PSP, r0
 8007922:	4718      	bx	r3
 8007924:	f3af 8000 	nop.w
 8007928:	f3af 8000 	nop.w
 800792c:	f3af 8000 	nop.w

08007930 <pxCurrentTCBConst>:
 8007930:	20000b38 	.word	0x20000b38
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop
	...

08007940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8007940:	f01e 0f04 	tst.w	lr, #4
 8007944:	bf0c      	ite	eq
 8007946:	f3ef 8008 	mrseq	r0, MSP
 800794a:	f3ef 8009 	mrsne	r0, PSP
 800794e:	4904      	ldr	r1, [pc, #16]	; (8007960 <svchandler_address_const>)
 8007950:	4708      	bx	r1
 8007952:	bf00      	nop
 8007954:	f3af 8000 	nop.w
 8007958:	f3af 8000 	nop.w
 800795c:	f3af 8000 	nop.w

08007960 <svchandler_address_const>:
 8007960:	080076cd 	.word	0x080076cd
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop

08007968 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8007974:	f7fe feb0 	bl	80066d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007978:	4b4f      	ldr	r3, [pc, #316]	; (8007ab8 <pvPortMalloc+0x150>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007980:	f000 f8f8 	bl	8007b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007984:	4b4d      	ldr	r3, [pc, #308]	; (8007abc <pvPortMalloc+0x154>)
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4013      	ands	r3, r2
 800798c:	2b00      	cmp	r3, #0
 800798e:	f040 8083 	bne.w	8007a98 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d015      	beq.n	80079c4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8007998:	2208      	movs	r2, #8
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4413      	add	r3, r2
 800799e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f003 0307 	and.w	r3, r3, #7
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00c      	beq.n	80079c4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f023 0307 	bic.w	r3, r3, #7
 80079b0:	3308      	adds	r3, #8
 80079b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f003 0307 	and.w	r3, r3, #7
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <pvPortMalloc+0x5c>
 80079be:	f7ff ff73 	bl	80078a8 <ulSetInterruptMask>
 80079c2:	e7fe      	b.n	80079c2 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d066      	beq.n	8007a98 <pvPortMalloc+0x130>
 80079ca:	4b3d      	ldr	r3, [pc, #244]	; (8007ac0 <pvPortMalloc+0x158>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d861      	bhi.n	8007a98 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079d4:	4b3b      	ldr	r3, [pc, #236]	; (8007ac4 <pvPortMalloc+0x15c>)
 80079d6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80079d8:	4b3a      	ldr	r3, [pc, #232]	; (8007ac4 <pvPortMalloc+0x15c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079de:	e004      	b.n	80079ea <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d903      	bls.n	80079fc <pvPortMalloc+0x94>
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1f1      	bne.n	80079e0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079fc:	4b2e      	ldr	r3, [pc, #184]	; (8007ab8 <pvPortMalloc+0x150>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d048      	beq.n	8007a98 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2208      	movs	r2, #8
 8007a0c:	4413      	add	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	1ad2      	subs	r2, r2, r3
 8007a20:	2308      	movs	r3, #8
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d917      	bls.n	8007a58 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f003 0307 	and.w	r3, r3, #7
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d002      	beq.n	8007a40 <pvPortMalloc+0xd8>
 8007a3a:	f7ff ff35 	bl	80078a8 <ulSetInterruptMask>
 8007a3e:	e7fe      	b.n	8007a3e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	1ad2      	subs	r2, r2, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a52:	68b8      	ldr	r0, [r7, #8]
 8007a54:	f000 f8f0 	bl	8007c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a58:	4b19      	ldr	r3, [pc, #100]	; (8007ac0 <pvPortMalloc+0x158>)
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	4a17      	ldr	r2, [pc, #92]	; (8007ac0 <pvPortMalloc+0x158>)
 8007a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a66:	4b16      	ldr	r3, [pc, #88]	; (8007ac0 <pvPortMalloc+0x158>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	4b17      	ldr	r3, [pc, #92]	; (8007ac8 <pvPortMalloc+0x160>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d203      	bcs.n	8007a7a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a72:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <pvPortMalloc+0x158>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a14      	ldr	r2, [pc, #80]	; (8007ac8 <pvPortMalloc+0x160>)
 8007a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <pvPortMalloc+0x154>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	431a      	orrs	r2, r3
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a8e:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <pvPortMalloc+0x164>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3301      	adds	r3, #1
 8007a94:	4a0d      	ldr	r2, [pc, #52]	; (8007acc <pvPortMalloc+0x164>)
 8007a96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a98:	f7fe fe2c 	bl	80066f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f003 0307 	and.w	r3, r3, #7
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d002      	beq.n	8007aac <pvPortMalloc+0x144>
 8007aa6:	f7ff feff 	bl	80078a8 <ulSetInterruptMask>
 8007aaa:	e7fe      	b.n	8007aaa <pvPortMalloc+0x142>
	return pvReturn;
 8007aac:	68fb      	ldr	r3, [r7, #12]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	2000316c 	.word	0x2000316c
 8007abc:	20003180 	.word	0x20003180
 8007ac0:	20003170 	.word	0x20003170
 8007ac4:	20003164 	.word	0x20003164
 8007ac8:	20003174 	.word	0x20003174
 8007acc:	20003178 	.word	0x20003178

08007ad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d03d      	beq.n	8007b5e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ae2:	2308      	movs	r3, #8
 8007ae4:	425b      	negs	r3, r3
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	4413      	add	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	4b1c      	ldr	r3, [pc, #112]	; (8007b68 <vPortFree+0x98>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4013      	ands	r3, r2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d102      	bne.n	8007b04 <vPortFree+0x34>
 8007afe:	f7ff fed3 	bl	80078a8 <ulSetInterruptMask>
 8007b02:	e7fe      	b.n	8007b02 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <vPortFree+0x42>
 8007b0c:	f7ff fecc 	bl	80078a8 <ulSetInterruptMask>
 8007b10:	e7fe      	b.n	8007b10 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	4b14      	ldr	r3, [pc, #80]	; (8007b68 <vPortFree+0x98>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d01e      	beq.n	8007b5e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d11a      	bne.n	8007b5e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	4b0e      	ldr	r3, [pc, #56]	; (8007b68 <vPortFree+0x98>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	43db      	mvns	r3, r3
 8007b32:	401a      	ands	r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b38:	f7fe fdce 	bl	80066d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <vPortFree+0x9c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4413      	add	r3, r2
 8007b46:	4a09      	ldr	r2, [pc, #36]	; (8007b6c <vPortFree+0x9c>)
 8007b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b4a:	68b8      	ldr	r0, [r7, #8]
 8007b4c:	f000 f874 	bl	8007c38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b50:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <vPortFree+0xa0>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3301      	adds	r3, #1
 8007b56:	4a06      	ldr	r2, [pc, #24]	; (8007b70 <vPortFree+0xa0>)
 8007b58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b5a:	f7fe fdcb 	bl	80066f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b5e:	bf00      	nop
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20003180 	.word	0x20003180
 8007b6c:	20003170 	.word	0x20003170
 8007b70:	2000317c 	.word	0x2000317c

08007b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b80:	4b27      	ldr	r3, [pc, #156]	; (8007c20 <prvHeapInit+0xac>)
 8007b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00c      	beq.n	8007ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3307      	adds	r3, #7
 8007b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0307 	bic.w	r3, r3, #7
 8007b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	4a1f      	ldr	r2, [pc, #124]	; (8007c20 <prvHeapInit+0xac>)
 8007ba4:	4413      	add	r3, r2
 8007ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007bac:	4a1d      	ldr	r2, [pc, #116]	; (8007c24 <prvHeapInit+0xb0>)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007bb2:	4b1c      	ldr	r3, [pc, #112]	; (8007c24 <prvHeapInit+0xb0>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	1a9b      	subs	r3, r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 0307 	bic.w	r3, r3, #7
 8007bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4a15      	ldr	r2, [pc, #84]	; (8007c28 <prvHeapInit+0xb4>)
 8007bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bd6:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <prvHeapInit+0xb4>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bde:	4b12      	ldr	r3, [pc, #72]	; (8007c28 <prvHeapInit+0xb4>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	1ad2      	subs	r2, r2, r3
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bf4:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <prvHeapInit+0xb4>)
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	4a0a      	ldr	r2, [pc, #40]	; (8007c2c <prvHeapInit+0xb8>)
 8007c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	4a09      	ldr	r2, [pc, #36]	; (8007c30 <prvHeapInit+0xbc>)
 8007c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c0c:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <prvHeapInit+0xc0>)
 8007c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c12:	601a      	str	r2, [r3, #0]
}
 8007c14:	bf00      	nop
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	20001164 	.word	0x20001164
 8007c24:	20003164 	.word	0x20003164
 8007c28:	2000316c 	.word	0x2000316c
 8007c2c:	20003174 	.word	0x20003174
 8007c30:	20003170 	.word	0x20003170
 8007c34:	20003180 	.word	0x20003180

08007c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c40:	4b28      	ldr	r3, [pc, #160]	; (8007ce4 <prvInsertBlockIntoFreeList+0xac>)
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	e002      	b.n	8007c4c <prvInsertBlockIntoFreeList+0x14>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d8f7      	bhi.n	8007c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	4413      	add	r3, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d108      	bne.n	8007c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	441a      	add	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	441a      	add	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d118      	bne.n	8007cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	4b15      	ldr	r3, [pc, #84]	; (8007ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d00d      	beq.n	8007cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	441a      	add	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	e008      	b.n	8007cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007cb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	e003      	b.n	8007cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d002      	beq.n	8007cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cd6:	bf00      	nop
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	20003164 	.word	0x20003164
 8007ce8:	2000316c 	.word	0x2000316c

08007cec <__libc_init_array>:
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	4d0d      	ldr	r5, [pc, #52]	; (8007d24 <__libc_init_array+0x38>)
 8007cf0:	2600      	movs	r6, #0
 8007cf2:	4c0d      	ldr	r4, [pc, #52]	; (8007d28 <__libc_init_array+0x3c>)
 8007cf4:	1b64      	subs	r4, r4, r5
 8007cf6:	10a4      	asrs	r4, r4, #2
 8007cf8:	42a6      	cmp	r6, r4
 8007cfa:	d109      	bne.n	8007d10 <__libc_init_array+0x24>
 8007cfc:	4d0b      	ldr	r5, [pc, #44]	; (8007d2c <__libc_init_array+0x40>)
 8007cfe:	2600      	movs	r6, #0
 8007d00:	4c0b      	ldr	r4, [pc, #44]	; (8007d30 <__libc_init_array+0x44>)
 8007d02:	f000 f82d 	bl	8007d60 <_init>
 8007d06:	1b64      	subs	r4, r4, r5
 8007d08:	10a4      	asrs	r4, r4, #2
 8007d0a:	42a6      	cmp	r6, r4
 8007d0c:	d105      	bne.n	8007d1a <__libc_init_array+0x2e>
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d14:	3601      	adds	r6, #1
 8007d16:	4798      	blx	r3
 8007d18:	e7ee      	b.n	8007cf8 <__libc_init_array+0xc>
 8007d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d1e:	3601      	adds	r6, #1
 8007d20:	4798      	blx	r3
 8007d22:	e7f2      	b.n	8007d0a <__libc_init_array+0x1e>
 8007d24:	08007eac 	.word	0x08007eac
 8007d28:	08007eac 	.word	0x08007eac
 8007d2c:	08007eac 	.word	0x08007eac
 8007d30:	08007eb0 	.word	0x08007eb0

08007d34 <memcpy>:
 8007d34:	440a      	add	r2, r1
 8007d36:	1e43      	subs	r3, r0, #1
 8007d38:	4291      	cmp	r1, r2
 8007d3a:	d100      	bne.n	8007d3e <memcpy+0xa>
 8007d3c:	4770      	bx	lr
 8007d3e:	b510      	push	{r4, lr}
 8007d40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d44:	4291      	cmp	r1, r2
 8007d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d4a:	d1f9      	bne.n	8007d40 <memcpy+0xc>
 8007d4c:	bd10      	pop	{r4, pc}

08007d4e <memset>:
 8007d4e:	4402      	add	r2, r0
 8007d50:	4603      	mov	r3, r0
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d100      	bne.n	8007d58 <memset+0xa>
 8007d56:	4770      	bx	lr
 8007d58:	f803 1b01 	strb.w	r1, [r3], #1
 8007d5c:	e7f9      	b.n	8007d52 <memset+0x4>
	...

08007d60 <_init>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	bf00      	nop
 8007d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d66:	bc08      	pop	{r3}
 8007d68:	469e      	mov	lr, r3
 8007d6a:	4770      	bx	lr

08007d6c <_fini>:
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6e:	bf00      	nop
 8007d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d72:	bc08      	pop	{r3}
 8007d74:	469e      	mov	lr, r3
 8007d76:	4770      	bx	lr
